openapi: 3.1.0
info:
  title: OpenAI API
  description: The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference
    for more details.
  version: 2.3.0
  termsOfService: https://openai.com/policies/terms-of-use
  contact:
    name: OpenAI Support
    url: https://help.openai.com/
  license:
    name: MIT
    url: https://github.com/openai/openai-openapi/blob/master/LICENSE
servers:
- url: /ai/v1
security:
- ApiKeyAuth: []
tags:
- name: Audio
  description: Turn audio into text or text into audio.
- name: Chat
  description: Given a list of messages comprising a conversation, the model will
    return a response.
- name: Completions
  description: Given a prompt, the model will return one or more predicted completions,
    and can also return the probabilities of alternative tokens at each position.
- name: Embeddings
  description: Get a vector representation of a given input that can be easily consumed
    by machine learning models and algorithms.
- name: Images
  description: Given a prompt and/or an input image, the model will generate a new
    image.
- name: Moderations
  description: Given text and/or image inputs, classifies if those inputs are potentially
    harmful.
paths:
  /audio/speech:
    post:
      operationId: createSpeech
      tags:
      - Audio
      summary: Generates audio from the input text.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSpeechRequest'
      responses:
        '200':
          description: OK
          headers:
            Transfer-Encoding:
              schema:
                type: string
              description: chunked
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            text/event-stream:
              schema:
                $ref: '#/components/schemas/CreateSpeechResponseStreamEvent'
  /audio/transcriptions:
    post:
      operationId: createTranscription
      tags:
      - Audio
      summary: Transcribes audio into the input language.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTranscriptionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/CreateTranscriptionResponseJson'
                - $ref: '#/components/schemas/CreateTranscriptionResponseVerboseJson'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/CreateTranscriptionResponseStreamEvent'
  /audio/translations:
    post:
      operationId: createTranslation
      tags:
      - Audio
      summary: Translates audio into English.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTranslationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/CreateTranslationResponseJson'
                - $ref: '#/components/schemas/CreateTranslationResponseVerboseJson'
  /chat/completions:
    get:
      operationId: listChatCompletions
      tags:
      - Chat
      summary: 'List stored Chat Completions. Only Chat Completions that have been
        stored

        with the `store` parameter set to `true` will be returned.

        '
      parameters:
      - name: model
        in: query
        description: The model used to generate the Chat Completions.
        required: false
        schema:
          type: string
      - name: metadata
        in: query
        description: 'A list of metadata keys to filter the Chat Completions by. Example:


          `metadata[key1]=value1&metadata[key2]=value2`

          '
        required: false
        schema:
          $ref: '#/components/schemas/Metadata'
      - name: after
        in: query
        description: Identifier for the last chat completion from the previous pagination
          request.
        required: false
        schema:
          type: string
      - name: limit
        in: query
        description: Number of Chat Completions to retrieve.
        required: false
        schema:
          type: integer
          default: 20
      - name: order
        in: query
        description: Sort order for Chat Completions by timestamp. Use `asc` for ascending
          order or `desc` for descending order. Defaults to `asc`.
        required: false
        schema:
          type: string
          enum:
          - asc
          - desc
          default: asc
      responses:
        '200':
          description: A list of Chat Completions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionList'
    post:
      operationId: createChatCompletion
      tags:
      - Chat
      summary: "Creates a model response for the given chat conversation. Learn more\
        \ in the\n[text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),\n\
        and [audio](/docs/guides/audio) guides.\n\nParameter support can differ depending\
        \ on the model used to generate the\nresponse, particularly for newer reasoning\
        \ models. Parameters that are only\nsupported for reasoning models are noted\
        \ below. For the current state of \nunsupported parameters in reasoning models,\
        \ \n[refer to the reasoning guide](/docs/guides/reasoning).\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatCompletionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionStreamResponse'
  /chat/completions/{completion_id}:
    get:
      operationId: getChatCompletion
      tags:
      - Chat
      summary: 'Get a stored chat completion. Only Chat Completions that have been
        created

        with the `store` parameter set to `true` will be returned.

        '
      parameters:
      - in: path
        name: completion_id
        required: true
        schema:
          type: string
        description: The ID of the chat completion to retrieve.
      responses:
        '200':
          description: A chat completion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionResponse'
    post:
      operationId: updateChatCompletion
      tags:
      - Chat
      summary: 'Modify a stored chat completion. Only Chat Completions that have been

        created with the `store` parameter set to `true` can be modified. Currently,

        the only supported modification is to update the `metadata` field.

        '
      parameters:
      - in: path
        name: completion_id
        required: true
        schema:
          type: string
        description: The ID of the chat completion to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - metadata
              properties:
                metadata:
                  $ref: '#/components/schemas/Metadata'
      responses:
        '200':
          description: A chat completion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionResponse'
    delete:
      operationId: deleteChatCompletion
      tags:
      - Chat
      summary: 'Delete a stored chat completion. Only Chat Completions that have been

        created with the `store` parameter set to `true` can be deleted.

        '
      parameters:
      - in: path
        name: completion_id
        required: true
        schema:
          type: string
        description: The ID of the chat completion to delete.
      responses:
        '200':
          description: The chat completion was deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionDeleted'
  /chat/completions/{completion_id}/messages:
    get:
      operationId: getChatCompletionMessages
      tags:
      - Chat
      summary: 'Get the messages in a stored chat completion. Only Chat Completions
        that

        have been created with the `store` parameter set to `true` will be

        returned.

        '
      parameters:
      - in: path
        name: completion_id
        required: true
        schema:
          type: string
        description: The ID of the chat completion to retrieve messages from.
      - name: after
        in: query
        description: Identifier for the last message from the previous pagination
          request.
        required: false
        schema:
          type: string
      - name: limit
        in: query
        description: Number of messages to retrieve.
        required: false
        schema:
          type: integer
          default: 20
      - name: order
        in: query
        description: Sort order for messages by timestamp. Use `asc` for ascending
          order or `desc` for descending order. Defaults to `asc`.
        required: false
        schema:
          type: string
          enum:
          - asc
          - desc
          default: asc
      responses:
        '200':
          description: A list of messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionMessageList'
  /completions:
    post:
      operationId: createCompletion
      tags:
      - Completions
      summary: Creates a completion for the provided prompt and parameters.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompletionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCompletionResponse'
  /embeddings:
    post:
      operationId: createEmbedding
      tags:
      - Embeddings
      summary: Creates an embedding vector representing the input text.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmbeddingRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEmbeddingResponse'
  /images/edits:
    post:
      operationId: createImageEdit
      tags:
      - Images
      summary: Creates an edited or extended image given one or more source images
        and a prompt. This endpoint only supports `gpt-image-1` and `dall-e-2`.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateImageEditRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ImageEditStreamEvent'
  /images/generations:
    post:
      operationId: createImage
      tags:
      - Images
      summary: 'Creates an image given a prompt. [Learn more](/docs/guides/images).

        '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateImageRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ImageGenStreamEvent'
  /images/variations:
    post:
      operationId: createImageVariation
      tags:
      - Images
      summary: Creates a variation of a given image. This endpoint only supports `dall-e-2`.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateImageVariationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
  /models:
    get:
      operationId: listModels
      tags:
      - Models
      summary: Lists the currently available models, and provides basic information
        about each one such as the owner and availability.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
  /moderations:
    post:
      operationId: createModeration
      tags:
      - Moderations
      summary: 'Classifies if text and/or image inputs are potentially harmful. Learn

        more in the [moderation guide](/docs/guides/moderation).

        '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateModerationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateModerationResponse'
  /responses:
    post:
      operationId: createResponse
      tags:
      - Responses
      summary: 'Creates a model response. Provide [text](/docs/guides/text) or

        [image](/docs/guides/images) inputs to generate [text](/docs/guides/text)

        or [JSON](/docs/guides/structured-outputs) outputs. Have the model call

        your own [custom code](/docs/guides/function-calling) or use built-in

        [tools](/docs/guides/tools) like [web search](/docs/guides/tools-web-search)

        or [file search](/docs/guides/tools-file-search) to use your own data

        as input for the model''s response.

        '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResponse'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ResponseStreamEvent'
  /responses/{response_id}:
    get:
      operationId: getResponse
      tags:
      - Responses
      summary: 'Retrieves a model response with the given ID.

        '
      parameters:
      - in: path
        name: response_id
        required: true
        schema:
          type: string
          example: resp_677efb5139a88190b512bc3fef8e535d
        description: The ID of the response to retrieve.
      - in: query
        name: include
        schema:
          type: array
          items:
            $ref: '#/components/schemas/Includable'
        description: 'Additional fields to include in the response. See the `include`

          parameter for Response creation above for more information.

          '
      - in: query
        name: stream
        schema:
          type: boolean
        description: 'If set to true, the model response data will be streamed to
          the client

          as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).

          See the [Streaming section below](/docs/api-reference/responses-streaming)

          for more information.

          '
      - in: query
        name: starting_after
        schema:
          type: integer
        description: 'The sequence number of the event after which to start streaming.

          '
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    delete:
      operationId: deleteResponse
      tags:
      - Responses
      summary: 'Deletes a model response with the given ID.

        '
      parameters:
      - in: path
        name: response_id
        required: true
        schema:
          type: string
          example: resp_677efb5139a88190b512bc3fef8e535d
        description: The ID of the response to delete.
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /responses/{response_id}/cancel:
    post:
      operationId: cancelResponse
      tags:
      - Responses
      summary: "Cancels a model response with the given ID. Only responses created\
        \ with\nthe `background` parameter set to `true` can be cancelled. \n[Learn\
        \ more](/docs/guides/background).\n"
      parameters:
      - in: path
        name: response_id
        required: true
        schema:
          type: string
          example: resp_677efb5139a88190b512bc3fef8e535d
        description: The ID of the response to cancel.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /responses/{response_id}/input_items:
    get:
      operationId: listInputItems
      tags:
      - Responses
      summary: Returns a list of input items for a given response.
      parameters:
      - in: path
        name: response_id
        required: true
        schema:
          type: string
        description: The ID of the response to retrieve input items for.
      - name: limit
        in: query
        description: 'A limit on the number of objects to be returned. Limit can range
          between

          1 and 100, and the default is 20.

          '
        required: false
        schema:
          type: integer
          default: 20
      - in: query
        name: order
        schema:
          type: string
          enum:
          - asc
          - desc
        description: 'The order to return the input items in. Default is `desc`.

          - `asc`: Return the input items in ascending order.

          - `desc`: Return the input items in descending order.

          '
      - in: query
        name: after
        schema:
          type: string
        description: 'An item ID to list items after, used in pagination.

          '
      - in: query
        name: before
        schema:
          type: string
        description: 'An item ID to list items before, used in pagination.

          '
      - in: query
        name: include
        schema:
          type: array
          items:
            $ref: '#/components/schemas/Includable'
        description: 'Additional fields to include in the response. See the `include`

          parameter for Response creation above for more information.

          '
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseItemList'
components:
  schemas:
    AudioResponseFormat:
      description: 'The format of the output, in one of these options: `json`, `text`,
        `srt`, `verbose_json`, or `vtt`. For `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`,
        the only supported format is `json`.

        '
      type: string
      enum:
      - json
      - text
      - srt
      - verbose_json
      - vtt
      default: json
    ChatCompletionDeleted:
      type: object
      properties:
        object:
          type: string
          description: The type of object being deleted.
          enum:
          - chat.completion.deleted
          x-stainless-const: true
        id:
          type: string
          description: The ID of the chat completion that was deleted.
        deleted:
          type: boolean
          description: Whether the chat completion was deleted.
      required:
      - object
      - id
      - deleted
    ChatCompletionFunctionCallOption:
      type: object
      description: 'Specifying a particular function via `{"name": "my_function"}`
        forces the model to call that function.

        '
      properties:
        name:
          type: string
          description: The name of the function to call.
      required:
      - name
    ChatCompletionFunctions:
      type: object
      deprecated: true
      properties:
        description:
          type: string
          description: A description of what the function does, used by the model
            to choose when and how to call the function.
        name:
          type: string
          description: The name of the function to be called. Must be a-z, A-Z, 0-9,
            or contain underscores and dashes, with a maximum length of 64.
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
      required:
      - name
    ChatCompletionList:
      type: object
      title: ChatCompletionList
      description: 'An object representing a list of Chat Completions.

        '
      properties:
        object:
          type: string
          enum:
          - list
          default: list
          description: 'The type of this object. It is always set to "list".

            '
          x-stainless-const: true
        data:
          type: array
          description: 'An array of chat completion objects.

            '
          items:
            $ref: '#/components/schemas/CreateChatCompletionResponse'
        first_id:
          type: string
          description: The identifier of the first chat completion in the data array.
        last_id:
          type: string
          description: The identifier of the last chat completion in the data array.
        has_more:
          type: boolean
          description: Indicates whether there are more Chat Completions available.
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ChatCompletionMessageList:
      type: object
      title: ChatCompletionMessageList
      description: 'An object representing a list of chat completion messages.

        '
      properties:
        object:
          type: string
          enum:
          - list
          default: list
          description: 'The type of this object. It is always set to "list".

            '
          x-stainless-const: true
        data:
          type: array
          description: 'An array of chat completion message objects.

            '
          items:
            allOf:
            - $ref: '#/components/schemas/ChatCompletionResponseMessage'
            - type: object
              required:
              - id
              properties:
                id:
                  type: string
                  description: The identifier of the chat message.
        first_id:
          type: string
          description: The identifier of the first chat message in the data array.
        last_id:
          type: string
          description: The identifier of the last chat message in the data array.
        has_more:
          type: boolean
          description: Indicates whether there are more chat messages available.
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ChatCompletionMessageToolCall:
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
          - function
          description: The type of the tool. Currently, only `function` is supported.
          x-stainless-const: true
        function:
          type: object
          description: The function that the model called.
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description: The arguments to call the function with, as generated by
                the model in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your function
                schema. Validate the arguments in your code before calling your function.
          required:
          - name
          - arguments
      required:
      - id
      - type
      - function
    ChatCompletionMessageToolCallChunk:
      type: object
      properties:
        index:
          type: integer
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
          - function
          description: The type of the tool. Currently, only `function` is supported.
          x-stainless-const: true
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description: The arguments to call the function with, as generated by
                the model in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your function
                schema. Validate the arguments in your code before calling your function.
      required:
      - index
    ChatCompletionMessageToolCalls:
      type: array
      description: The tool calls generated by the model, such as function calls.
      items:
        $ref: '#/components/schemas/ChatCompletionMessageToolCall'
    ChatCompletionModalities:
      type: array
      nullable: true
      description: 'Output types that you would like the model to generate for this
        request.

        Most models are capable of generating text, which is the default:


        `["text"]`


        The `gpt-4o-audio-preview` model can also be used to [generate audio](/docs/guides/audio).
        To

        request that this model generate both text and audio responses, you can

        use:


        `["text", "audio"]`

        '
      items:
        type: string
        enum:
        - text
        - audio
    ChatCompletionNamedToolChoice:
      type: object
      description: Specifies a tool the model should use. Use to force the model to
        call a specific function.
      properties:
        type:
          type: string
          enum:
          - function
          description: The type of the tool. Currently, only `function` is supported.
          x-stainless-const: true
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
          required:
          - name
      required:
      - type
      - function
    ChatCompletionRequestAssistantMessage:
      type: object
      title: Assistant message
      description: 'Messages sent by the model in response to user messages.

        '
      properties:
        content:
          nullable: true
          oneOf:
          - type: string
            description: The contents of the assistant message.
            title: Text content
          - type: array
            description: An array of content parts with a defined type. Can be one
              or more of type `text`, or exactly one of type `refusal`.
            title: Array of content parts
            items:
              $ref: '#/components/schemas/ChatCompletionRequestAssistantMessageContentPart'
            minItems: 1
          description: 'The contents of the assistant message. Required unless `tool_calls`
            or `function_call` is specified.

            '
        refusal:
          nullable: true
          type: string
          description: The refusal message by the assistant.
        role:
          type: string
          enum:
          - assistant
          description: The role of the messages author, in this case `assistant`.
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
        audio:
          type: object
          nullable: true
          description: "Data about a previous audio response from the model. \n[Learn\
            \ more](/docs/guides/audio).\n"
          required:
          - id
          properties:
            id:
              type: string
              description: 'Unique identifier for a previous audio response from the
                model.

                '
        tool_calls:
          $ref: '#/components/schemas/ChatCompletionMessageToolCalls'
        function_call:
          type: object
          deprecated: true
          description: Deprecated and replaced by `tool_calls`. The name and arguments
            of a function that should be called, as generated by the model.
          nullable: true
          properties:
            arguments:
              type: string
              description: The arguments to call the function with, as generated by
                the model in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your function
                schema. Validate the arguments in your code before calling your function.
            name:
              type: string
              description: The name of the function to call.
          required:
          - arguments
          - name
      required:
      - role
    ChatCompletionRequestAssistantMessageContentPart:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartRefusal'
    ChatCompletionRequestDeveloperMessage:
      type: object
      title: Developer message
      description: 'Developer-provided instructions that the model should follow,
        regardless of

        messages sent by the user. With o1 models and newer, `developer` messages

        replace the previous `system` messages.

        '
      properties:
        content:
          description: The contents of the developer message.
          oneOf:
          - type: string
            description: The contents of the developer message.
            title: Text content
          - type: array
            description: An array of content parts with a defined type. For developer
              messages, only type `text` is supported.
            title: Array of content parts
            items:
              $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
            minItems: 1
        role:
          type: string
          enum:
          - developer
          description: The role of the messages author, in this case `developer`.
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
      required:
      - content
      - role
    ChatCompletionRequestFunctionMessage:
      type: object
      title: Function message
      deprecated: true
      properties:
        role:
          type: string
          enum:
          - function
          description: The role of the messages author, in this case `function`.
          x-stainless-const: true
        content:
          nullable: true
          type: string
          description: The contents of the function message.
        name:
          type: string
          description: The name of the function to call.
      required:
      - role
      - content
      - name
    ChatCompletionRequestMessage:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestDeveloperMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestSystemMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestFunctionMessage'
    ChatCompletionRequestMessageContentPartAudio:
      type: object
      title: Audio content part
      description: 'Learn about [audio inputs](/docs/guides/audio).

        '
      properties:
        type:
          type: string
          enum:
          - input_audio
          description: The type of the content part. Always `input_audio`.
          x-stainless-const: true
        input_audio:
          type: object
          properties:
            data:
              type: string
              description: Base64 encoded audio data.
            format:
              type: string
              enum:
              - wav
              - mp3
              description: 'The format of the encoded audio data. Currently supports
                "wav" and "mp3".

                '
          required:
          - data
          - format
      required:
      - type
      - input_audio
    ChatCompletionRequestMessageContentPartFile:
      type: object
      title: File content part
      description: 'Learn about [file inputs](/docs/guides/text) for text generation.

        '
      properties:
        type:
          type: string
          enum:
          - file
          description: The type of the content part. Always `file`.
          x-stainless-const: true
        file:
          type: object
          properties:
            filename:
              type: string
              description: "The name of the file, used when passing the file to the\
                \ model as a \nstring.\n"
            file_data:
              type: string
              description: "The base64 encoded file data, used when passing the file\
                \ to the model \nas a string.\n"
            file_id:
              type: string
              description: 'The ID of an uploaded file to use as input.

                '
      required:
      - type
      - file
    ChatCompletionRequestMessageContentPartImage:
      type: object
      title: Image content part
      description: 'Learn about [image inputs](/docs/guides/vision).

        '
      properties:
        type:
          type: string
          enum:
          - image_url
          description: The type of the content part.
          x-stainless-const: true
        image_url:
          type: object
          properties:
            url:
              type: string
              description: Either a URL of the image or the base64 encoded image data.
              format: uri
            detail:
              type: string
              description: Specifies the detail level of the image. Learn more in
                the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
              enum:
              - auto
              - low
              - high
              default: auto
          required:
          - url
      required:
      - type
      - image_url
    ChatCompletionRequestMessageContentPartRefusal:
      type: object
      title: Refusal content part
      properties:
        type:
          type: string
          enum:
          - refusal
          description: The type of the content part.
          x-stainless-const: true
        refusal:
          type: string
          description: The refusal message generated by the model.
      required:
      - type
      - refusal
    ChatCompletionRequestMessageContentPartText:
      type: object
      title: Text content part
      description: 'Learn about [text inputs](/docs/guides/text-generation).

        '
      properties:
        type:
          type: string
          enum:
          - text
          description: The type of the content part.
          x-stainless-const: true
        text:
          type: string
          description: The text content.
      required:
      - type
      - text
    ChatCompletionRequestSystemMessage:
      type: object
      title: System message
      description: 'Developer-provided instructions that the model should follow,
        regardless of

        messages sent by the user. With o1 models and newer, use `developer` messages

        for this purpose instead.

        '
      properties:
        content:
          description: The contents of the system message.
          oneOf:
          - type: string
            description: The contents of the system message.
            title: Text content
          - type: array
            description: An array of content parts with a defined type. For system
              messages, only type `text` is supported.
            title: Array of content parts
            items:
              $ref: '#/components/schemas/ChatCompletionRequestSystemMessageContentPart'
            minItems: 1
        role:
          type: string
          enum:
          - system
          description: The role of the messages author, in this case `system`.
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
      required:
      - content
      - role
    ChatCompletionRequestSystemMessageContentPart:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
    ChatCompletionRequestToolMessage:
      type: object
      title: Tool message
      properties:
        role:
          type: string
          enum:
          - tool
          description: The role of the messages author, in this case `tool`.
          x-stainless-const: true
        content:
          oneOf:
          - type: string
            description: The contents of the tool message.
            title: Text content
          - type: array
            description: An array of content parts with a defined type. For tool messages,
              only type `text` is supported.
            title: Array of content parts
            items:
              $ref: '#/components/schemas/ChatCompletionRequestToolMessageContentPart'
            minItems: 1
          description: The contents of the tool message.
        tool_call_id:
          type: string
          description: Tool call that this message is responding to.
      required:
      - role
      - content
      - tool_call_id
    ChatCompletionRequestToolMessageContentPart:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
    ChatCompletionRequestUserMessage:
      type: object
      title: User message
      description: 'Messages sent by an end user, containing prompts or additional
        context

        information.

        '
      properties:
        content:
          description: 'The contents of the user message.

            '
          oneOf:
          - type: string
            description: The text contents of the message.
            title: Text content
          - type: array
            description: An array of content parts with a defined type. Supported
              options differ based on the [model](/docs/models) being used to generate
              the response. Can contain text, image, or audio inputs.
            title: Array of content parts
            items:
              $ref: '#/components/schemas/ChatCompletionRequestUserMessageContentPart'
            minItems: 1
        role:
          type: string
          enum:
          - user
          description: The role of the messages author, in this case `user`.
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
      required:
      - content
      - role
    ChatCompletionRequestUserMessageContentPart:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartImage'
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartAudio'
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartFile'
    ChatCompletionResponseMessage:
      type: object
      description: A chat completion message generated by the model.
      properties:
        content:
          type: string
          description: The contents of the message.
          nullable: true
        refusal:
          type: string
          description: The refusal message generated by the model.
          nullable: true
        tool_calls:
          $ref: '#/components/schemas/ChatCompletionMessageToolCalls'
        annotations:
          type: array
          description: 'Annotations for the message, when applicable, as when using
            the

            [web search tool](/docs/guides/tools-web-search?api-mode=chat).

            '
          items:
            type: object
            description: 'A URL citation when using web search.

              '
            required:
            - type
            - url_citation
            properties:
              type:
                type: string
                description: The type of the URL citation. Always `url_citation`.
                enum:
                - url_citation
                x-stainless-const: true
              url_citation:
                type: object
                description: A URL citation when using web search.
                required:
                - end_index
                - start_index
                - url
                - title
                properties:
                  end_index:
                    type: integer
                    description: The index of the last character of the URL citation
                      in the message.
                  start_index:
                    type: integer
                    description: The index of the first character of the URL citation
                      in the message.
                  url:
                    type: string
                    description: The URL of the web resource.
                  title:
                    type: string
                    description: The title of the web resource.
        role:
          type: string
          enum:
          - assistant
          description: The role of the author of this message.
          x-stainless-const: true
        function_call:
          type: object
          deprecated: true
          description: Deprecated and replaced by `tool_calls`. The name and arguments
            of a function that should be called, as generated by the model.
          properties:
            arguments:
              type: string
              description: The arguments to call the function with, as generated by
                the model in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your function
                schema. Validate the arguments in your code before calling your function.
            name:
              type: string
              description: The name of the function to call.
          required:
          - name
          - arguments
        audio:
          type: object
          nullable: true
          description: 'If the audio output modality is requested, this object contains
            data

            about the audio response from the model. [Learn more](/docs/guides/audio).

            '
          required:
          - id
          - expires_at
          - data
          - transcript
          properties:
            id:
              type: string
              description: Unique identifier for this audio response.
            expires_at:
              type: integer
              description: 'The Unix timestamp (in seconds) for when this audio response
                will

                no longer be accessible on the server for use in multi-turn

                conversations.

                '
            data:
              type: string
              description: 'Base64 encoded audio bytes generated by the model, in
                the format

                specified in the request.

                '
            transcript:
              type: string
              description: Transcript of the audio generated by the model.
      required:
      - role
      - content
      - refusal
    ChatCompletionRole:
      type: string
      description: The role of the author of a message
      enum:
      - developer
      - system
      - user
      - assistant
      - tool
      - function
    ChatCompletionStreamOptions:
      description: 'Options for streaming response. Only set this when you set `stream:
        true`.

        '
      type: object
      nullable: true
      default: null
      properties:
        include_usage:
          type: boolean
          description: "If set, an additional chunk will be streamed before the `data:\
            \ [DONE]`\nmessage. The `usage` field on this chunk shows the token usage\
            \ statistics\nfor the entire request, and the `choices` field will always\
            \ be an empty\narray. \n\nAll other chunks will also include a `usage`\
            \ field, but with a null\nvalue. **NOTE:** If the stream is interrupted,\
            \ you may not receive the\nfinal usage chunk which contains the total\
            \ token usage for the request.\n"
    ChatCompletionStreamResponseDelta:
      type: object
      description: A chat completion delta generated by streamed model responses.
      properties:
        content:
          type: string
          description: The contents of the chunk message.
          nullable: true
        function_call:
          deprecated: true
          type: object
          description: Deprecated and replaced by `tool_calls`. The name and arguments
            of a function that should be called, as generated by the model.
          properties:
            arguments:
              type: string
              description: The arguments to call the function with, as generated by
                the model in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your function
                schema. Validate the arguments in your code before calling your function.
            name:
              type: string
              description: The name of the function to call.
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionMessageToolCallChunk'
        role:
          type: string
          enum:
          - developer
          - system
          - user
          - assistant
          - tool
          description: The role of the author of this message.
        refusal:
          type: string
          description: The refusal message generated by the model.
          nullable: true
    ChatCompletionTokenLogprob:
      type: object
      properties:
        token:
          description: The token.
          type: string
        logprob:
          description: The log probability of this token, if it is within the top
            20 most likely tokens. Otherwise, the value `-9999.0` is used to signify
            that the token is very unlikely.
          type: number
        bytes:
          description: A list of integers representing the UTF-8 bytes representation
            of the token. Useful in instances where characters are represented by
            multiple tokens and their byte representations must be combined to generate
            the correct text representation. Can be `null` if there is no bytes representation
            for the token.
          type: array
          items:
            type: integer
          nullable: true
        top_logprobs:
          description: List of the most likely tokens and their log probability, at
            this token position. In rare cases, there may be fewer than the number
            of requested `top_logprobs` returned.
          type: array
          items:
            type: object
            properties:
              token:
                description: The token.
                type: string
              logprob:
                description: The log probability of this token, if it is within the
                  top 20 most likely tokens. Otherwise, the value `-9999.0` is used
                  to signify that the token is very unlikely.
                type: number
              bytes:
                description: A list of integers representing the UTF-8 bytes representation
                  of the token. Useful in instances where characters are represented
                  by multiple tokens and their byte representations must be combined
                  to generate the correct text representation. Can be `null` if there
                  is no bytes representation for the token.
                type: array
                items:
                  type: integer
                nullable: true
            required:
            - token
            - logprob
            - bytes
      required:
      - token
      - logprob
      - bytes
      - top_logprobs
    ChatCompletionTool:
      type: object
      properties:
        type:
          type: string
          enum:
          - function
          description: The type of the tool. Currently, only `function` is supported.
          x-stainless-const: true
        function:
          $ref: '#/components/schemas/FunctionObject'
      required:
      - type
      - function
    ChatCompletionToolChoiceOption:
      description: 'Controls which (if any) tool is called by the model.

        `none` means the model will not call any tool and instead generates a message.

        `auto` means the model can pick between generating a message or calling one
        or more tools.

        `required` means the model must call one or more tools.

        Specifying a particular tool via `{"type": "function", "function": {"name":
        "my_function"}}` forces the model to call that tool.


        `none` is the default when no tools are present. `auto` is the default if
        tools are present.

        '
      oneOf:
      - type: string
        description: '`none` means the model will not call any tool and instead generates
          a message. `auto` means the model can pick between generating a message
          or calling one or more tools. `required` means the model must call one or
          more tools.

          '
        enum:
        - none
        - auto
        - required
      - $ref: '#/components/schemas/ChatCompletionNamedToolChoice'
    ChunkingStrategyRequestParam:
      type: object
      description: The chunking strategy used to chunk the file(s). If not set, will
        use the `auto` strategy.
      oneOf:
      - $ref: '#/components/schemas/AutoChunkingStrategyRequestParam'
      - $ref: '#/components/schemas/StaticChunkingStrategyRequestParam'
    Click:
      type: object
      title: Click
      description: 'A click action.

        '
      properties:
        type:
          type: string
          enum:
          - click
          default: click
          description: "Specifies the event type. For a click action, this property\
            \ is \nalways set to `click`.\n"
          x-stainless-const: true
        button:
          type: string
          enum:
          - left
          - right
          - wheel
          - back
          - forward
          description: 'Indicates which mouse button was pressed during the click.
            One of `left`, `right`, `wheel`, `back`, or `forward`.

            '
        x:
          type: integer
          description: 'The x-coordinate where the click occurred.

            '
        y:
          type: integer
          description: 'The y-coordinate where the click occurred.

            '
      required:
      - type
      - button
      - x
      - y
    CodeInterpreterFileOutput:
      type: object
      title: Code interpreter file output
      description: 'The output of a code interpreter tool call that is a file.

        '
      properties:
        type:
          type: string
          enum:
          - files
          description: 'The type of the code interpreter file output. Always `files`.

            '
          x-stainless-const: true
        files:
          type: array
          items:
            type: object
            properties:
              mime_type:
                type: string
                description: 'The MIME type of the file.

                  '
              file_id:
                type: string
                description: 'The ID of the file.

                  '
            required:
            - mime_type
            - file_id
      required:
      - type
      - files
    CodeInterpreterOutputImage:
      type: object
      title: Code interpreter output image
      description: 'The image output from the code interpreter.

        '
      properties:
        type:
          type: string
          enum:
          - image
          default: image
          x-stainless-const: true
          description: The type of the output. Always 'image'.
        url:
          type: string
          description: The URL of the image output from the code interpreter.
      required:
      - type
      - url
    CodeInterpreterOutputLogs:
      type: object
      title: Code interpreter output logs
      description: 'The logs output from the code interpreter.

        '
      properties:
        type:
          type: string
          enum:
          - logs
          default: logs
          x-stainless-const: true
          description: The type of the output. Always 'logs'.
        logs:
          type: string
          description: The logs output from the code interpreter.
      required:
      - type
      - logs
    CodeInterpreterTextOutput:
      type: object
      title: Code interpreter text output
      description: 'The output of a code interpreter tool call that is text.

        '
      properties:
        type:
          type: string
          enum:
          - logs
          description: 'The type of the code interpreter text output. Always `logs`.

            '
          x-stainless-const: true
        logs:
          type: string
          description: 'The logs of the code interpreter tool call.

            '
      required:
      - type
      - logs
    CodeInterpreterTool:
      type: object
      title: Code interpreter
      description: 'A tool that runs Python code to help generate a response to a
        prompt.

        '
      properties:
        type:
          type: string
          enum:
          - code_interpreter
          description: 'The type of the code interpreter tool. Always `code_interpreter`.

            '
          x-stainless-const: true
        container:
          description: 'The code interpreter container. Can be a container ID or an
            object that

            specifies uploaded file IDs to make available to your code.

            '
          oneOf:
          - type: string
            description: The container ID.
          - $ref: '#/components/schemas/CodeInterpreterToolAuto'
      required:
      - type
      - container
    CodeInterpreterToolAuto:
      type: object
      title: CodeInterpreterContainerAuto
      description: 'Configuration for a code interpreter container. Optionally specify
        the IDs

        of the files to run the code on.

        '
      required:
      - type
      properties:
        type:
          type: string
          enum:
          - auto
          description: Always `auto`.
          x-stainless-const: true
        file_ids:
          type: array
          items:
            type: string
          description: 'An optional list of uploaded files to make available to your
            code.

            '
    CodeInterpreterToolCall:
      type: object
      title: Code interpreter tool call
      description: 'A tool call to run code.

        '
      properties:
        type:
          type: string
          enum:
          - code_interpreter_call
          default: code_interpreter_call
          x-stainless-const: true
          description: 'The type of the code interpreter tool call. Always `code_interpreter_call`.

            '
        id:
          type: string
          description: 'The unique ID of the code interpreter tool call.

            '
        status:
          type: string
          enum:
          - in_progress
          - completed
          - incomplete
          - interpreting
          - failed
          description: 'The status of the code interpreter tool call. Valid values
            are `in_progress`, `completed`, `incomplete`, `interpreting`, and `failed`.

            '
        container_id:
          type: string
          description: 'The ID of the container used to run the code.

            '
        code:
          type: string
          nullable: true
          description: 'The code to run, or null if not available.

            '
        outputs:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/CodeInterpreterOutputLogs'
            - $ref: '#/components/schemas/CodeInterpreterOutputImage'
          discriminator:
            propertyName: type
          nullable: true
          description: "The outputs generated by the code interpreter, such as logs\
            \ or images. \nCan be null if no outputs are available.\n"
      required:
      - type
      - id
      - status
      - container_id
      - code
      - outputs
    ComparisonFilter:
      type: object
      additionalProperties: false
      title: Comparison Filter
      description: 'A filter used to compare a specified attribute key to a given
        value using a defined comparison operation.

        '
      properties:
        type:
          type: string
          default: eq
          enum:
          - eq
          - ne
          - gt
          - gte
          - lt
          - lte
          description: 'Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`,
            `lt`, `lte`.

            - `eq`: equals

            - `ne`: not equal

            - `gt`: greater than

            - `gte`: greater than or equal

            - `lt`: less than

            - `lte`: less than or equal

            '
        key:
          type: string
          description: The key to compare against the value.
        value:
          oneOf:
          - type: string
          - type: number
          - type: boolean
          description: The value to compare against the attribute key; supports string,
            number, or boolean types.
      required:
      - type
      - key
      - value
    CompleteUploadRequest:
      type: object
      additionalProperties: false
      properties:
        part_ids:
          type: array
          description: 'The ordered list of Part IDs.

            '
          items:
            type: string
        md5:
          description: 'The optional md5 checksum for the file contents to verify
            if the bytes uploaded matches what you expect.

            '
          type: string
      required:
      - part_ids
    CompletionUsage:
      type: object
      description: Usage statistics for the completion request.
      properties:
        completion_tokens:
          type: integer
          default: 0
          description: Number of tokens in the generated completion.
        prompt_tokens:
          type: integer
          default: 0
          description: Number of tokens in the prompt.
        total_tokens:
          type: integer
          default: 0
          description: Total number of tokens used in the request (prompt + completion).
        completion_tokens_details:
          type: object
          description: Breakdown of tokens used in a completion.
          properties:
            accepted_prediction_tokens:
              type: integer
              default: 0
              description: 'When using Predicted Outputs, the number of tokens in
                the

                prediction that appeared in the completion.

                '
            audio_tokens:
              type: integer
              default: 0
              description: Audio input tokens generated by the model.
            reasoning_tokens:
              type: integer
              default: 0
              description: Tokens generated by the model for reasoning.
            rejected_prediction_tokens:
              type: integer
              default: 0
              description: 'When using Predicted Outputs, the number of tokens in
                the

                prediction that did not appear in the completion. However, like

                reasoning tokens, these tokens are still counted in the total

                completion tokens for purposes of billing, output, and context window

                limits.

                '
        prompt_tokens_details:
          type: object
          description: Breakdown of tokens used in the prompt.
          properties:
            audio_tokens:
              type: integer
              default: 0
              description: Audio input tokens present in the prompt.
            cached_tokens:
              type: integer
              default: 0
              description: Cached tokens present in the prompt.
      required:
      - prompt_tokens
      - completion_tokens
      - total_tokens
    CompoundFilter:
      $recursiveAnchor: true
      type: object
      additionalProperties: false
      title: Compound Filter
      description: Combine multiple filters using `and` or `or`.
      properties:
        type:
          type: string
          description: 'Type of operation: `and` or `or`.'
          enum:
          - and
          - or
        filters:
          type: array
          description: Array of filters to combine. Items can be `ComparisonFilter`
            or `CompoundFilter`.
          items:
            oneOf:
            - $ref: '#/components/schemas/ComparisonFilter'
            - $recursiveRef: '#'
      required:
      - type
      - filters
    ComputerAction:
      oneOf:
      - $ref: '#/components/schemas/Click'
      - $ref: '#/components/schemas/DoubleClick'
      - $ref: '#/components/schemas/Drag'
      - $ref: '#/components/schemas/KeyPress'
      - $ref: '#/components/schemas/Move'
      - $ref: '#/components/schemas/Screenshot'
      - $ref: '#/components/schemas/Scroll'
      - $ref: '#/components/schemas/Type'
      - $ref: '#/components/schemas/Wait'
    ComputerScreenshotImage:
      type: object
      description: 'A computer screenshot image used with the computer use tool.

        '
      properties:
        type:
          type: string
          enum:
          - computer_screenshot
          default: computer_screenshot
          description: "Specifies the event type. For a computer screenshot, this\
            \ property is \nalways set to `computer_screenshot`.\n"
          x-stainless-const: true
        image_url:
          type: string
          description: The URL of the screenshot image.
        file_id:
          type: string
          description: The identifier of an uploaded file that contains the screenshot.
      required:
      - type
    ComputerToolCall:
      type: object
      title: Computer tool call
      description: "A tool call to a computer use tool. See the \n[computer use guide](/docs/guides/tools-computer-use)\
        \ for more information.\n"
      properties:
        type:
          type: string
          description: The type of the computer call. Always `computer_call`.
          enum:
          - computer_call
          default: computer_call
        id:
          type: string
          description: The unique ID of the computer call.
        call_id:
          type: string
          description: 'An identifier used when responding to the tool call with output.

            '
        action:
          $ref: '#/components/schemas/ComputerAction'
        pending_safety_checks:
          type: array
          items:
            $ref: '#/components/schemas/ComputerToolCallSafetyCheck'
          description: 'The pending safety checks for the computer call.

            '
        status:
          type: string
          description: 'The status of the item. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
      required:
      - type
      - id
      - action
      - call_id
      - pending_safety_checks
      - status
    ComputerToolCallOutput:
      type: object
      title: Computer tool call output
      description: 'The output of a computer tool call.

        '
      properties:
        type:
          type: string
          description: 'The type of the computer tool call output. Always `computer_call_output`.

            '
          enum:
          - computer_call_output
          default: computer_call_output
          x-stainless-const: true
        id:
          type: string
          description: 'The ID of the computer tool call output.

            '
        call_id:
          type: string
          description: 'The ID of the computer tool call that produced the output.

            '
        acknowledged_safety_checks:
          type: array
          description: "The safety checks reported by the API that have been acknowledged\
            \ by the \ndeveloper.\n"
          items:
            $ref: '#/components/schemas/ComputerToolCallSafetyCheck'
        output:
          $ref: '#/components/schemas/ComputerScreenshotImage'
        status:
          type: string
          description: 'The status of the message input. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when input items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
      required:
      - type
      - call_id
      - output
    ComputerToolCallOutputResource:
      allOf:
      - $ref: '#/components/schemas/ComputerToolCallOutput'
      - type: object
        properties:
          id:
            type: string
            description: 'The unique ID of the computer call tool output.

              '
        required:
        - id
    ComputerToolCallSafetyCheck:
      type: object
      description: 'A pending safety check for the computer call.

        '
      properties:
        id:
          type: string
          description: The ID of the pending safety check.
        code:
          type: string
          description: The type of the pending safety check.
        message:
          type: string
          description: Details about the pending safety check.
      required:
      - id
      - code
      - message
    ContainerFileListResource:
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          description: The type of object returned, must be 'list'.
        data:
          type: array
          description: A list of container files.
          items:
            $ref: '#/components/schemas/ContainerFileResource'
        first_id:
          type: string
          description: The ID of the first file in the list.
        last_id:
          type: string
          description: The ID of the last file in the list.
        has_more:
          type: boolean
          description: Whether there are more files available.
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ContainerFileResource:
      type: object
      title: The container file object
      properties:
        id:
          type: string
          description: Unique identifier for the file.
        object:
          type: string
          description: The type of this object (`container.file`).
        container_id:
          type: string
          description: The container this file belongs to.
        created_at:
          type: integer
          description: Unix timestamp (in seconds) when the file was created.
        bytes:
          type: integer
          description: Size of the file in bytes.
        path:
          type: string
          description: Path of the file in the container.
        source:
          type: string
          description: Source of the file (e.g., `user`, `assistant`).
      required:
      - id
      - object
      - created_at
      - bytes
      - container_id
      - path
      - source
    ContainerListResource:
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          description: The type of object returned, must be 'list'.
        data:
          type: array
          description: A list of containers.
          items:
            $ref: '#/components/schemas/ContainerResource'
        first_id:
          type: string
          description: The ID of the first container in the list.
        last_id:
          type: string
          description: The ID of the last container in the list.
        has_more:
          type: boolean
          description: Whether there are more containers available.
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ContainerResource:
      type: object
      title: The container object
      properties:
        id:
          type: string
          description: Unique identifier for the container.
        object:
          type: string
          description: The type of this object.
        name:
          type: string
          description: Name of the container.
        created_at:
          type: integer
          description: Unix timestamp (in seconds) when the container was created.
        status:
          type: string
          description: Status of the container (e.g., active, deleted).
        expires_after:
          type: object
          description: 'The container will expire after this time period.

            The anchor is the reference point for the expiration.

            The minutes is the number of minutes after the anchor before the container
            expires.

            '
          properties:
            anchor:
              type: string
              description: The reference point for the expiration.
              enum:
              - last_active_at
            minutes:
              type: integer
              description: The number of minutes after the anchor before the container
                expires.
      required:
      - id
      - object
      - name
      - created_at
      - status
      - id
      - name
      - created_at
      - status
    Content:
      description: 'Multi-modal input and output contents.

        '
      oneOf:
      - title: Input content types
        $ref: '#/components/schemas/InputContent'
      - title: Output content types
        $ref: '#/components/schemas/OutputContent'
    Coordinate:
      type: object
      title: Coordinate
      description: 'An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`.

        '
      properties:
        x:
          type: integer
          description: 'The x-coordinate.

            '
        y:
          type: integer
          description: 'The y-coordinate.

            '
      required:
      - x
      - y
    CostsResult:
      type: object
      description: The aggregated costs details of the specific time bucket.
      properties:
        object:
          type: string
          enum:
          - organization.costs.result
          x-stainless-const: true
        amount:
          type: object
          description: The monetary value in its associated currency.
          properties:
            value:
              type: number
              description: The numeric value of the cost.
            currency:
              type: string
              description: Lowercase ISO-4217 currency e.g. "usd"
        line_item:
          type: string
          nullable: true
          description: When `group_by=line_item`, this field provides the line item
            of the grouped costs result.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped costs result.
      required:
      - object
    CreateAssistantRequest:
      type: object
      additionalProperties: false
      properties:
        model:
          description: 'ID of the model to use. You can use the [List models](/docs/api-reference/models/list)
            API to see all of your available models, or see our [Model overview](/docs/models)
            for descriptions of them.

            '
          example: gpt-4o
          anyOf:
          - type: string
          - $ref: '#/components/schemas/AssistantSupportedModels'
          x-oaiTypeLabel: string
        name:
          description: 'The name of the assistant. The maximum length is 256 characters.

            '
          type: string
          nullable: true
          maxLength: 256
        description:
          description: 'The description of the assistant. The maximum length is 512
            characters.

            '
          type: string
          nullable: true
          maxLength: 512
        instructions:
          description: 'The system instructions that the assistant uses. The maximum
            length is 256,000 characters.

            '
          type: string
          nullable: true
          maxLength: 256000
        reasoning_effort:
          $ref: '#/components/schemas/ReasoningEffort'
        tools:
          description: 'A list of tool enabled on the assistant. There can be a maximum
            of 128 tools per assistant. Tools can be of types `code_interpreter`,
            `file_search`, or `function`.

            '
          default: []
          type: array
          maxItems: 128
          items:
            oneOf:
            - $ref: '#/components/schemas/AssistantToolsCode'
            - $ref: '#/components/schemas/AssistantToolsFileSearch'
            - $ref: '#/components/schemas/AssistantToolsFunction'
        tool_resources:
          type: object
          description: 'A set of resources that are used by the assistant''s tools.
            The resources are specific to the type of tool. For example, the `code_interpreter`
            tool requires a list of file IDs, while the `file_search` tool requires
            a list of vector store IDs.

            '
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: 'A list of [file](/docs/api-reference/files) IDs made
                    available to the `code_interpreter` tool. There can be a maximum
                    of 20 files associated with the tool.

                    '
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: 'The [vector store](/docs/api-reference/vector-stores/object)
                    attached to this assistant. There can be a maximum of 1 vector
                    store attached to the assistant.

                    '
                  maxItems: 1
                  items:
                    type: string
                vector_stores:
                  type: array
                  description: 'A helper to create a [vector store](/docs/api-reference/vector-stores/object)
                    with file_ids and attach it to this assistant. There can be a
                    maximum of 1 vector store attached to the assistant.

                    '
                  maxItems: 1
                  items:
                    type: object
                    properties:
                      file_ids:
                        type: array
                        description: 'A list of [file](/docs/api-reference/files)
                          IDs to add to the vector store. There can be a maximum of
                          10000 files in a vector store.

                          '
                        maxItems: 10000
                        items:
                          type: string
                      chunking_strategy:
                        type: object
                        description: The chunking strategy used to chunk the file(s).
                          If not set, will use the `auto` strategy.
                        oneOf:
                        - type: object
                          title: Auto Chunking Strategy
                          description: The default strategy. This strategy currently
                            uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens`
                            of `400`.
                          additionalProperties: false
                          properties:
                            type:
                              type: string
                              description: Always `auto`.
                              enum:
                              - auto
                              x-stainless-const: true
                          required:
                          - type
                        - type: object
                          title: Static Chunking Strategy
                          additionalProperties: false
                          properties:
                            type:
                              type: string
                              description: Always `static`.
                              enum:
                              - static
                              x-stainless-const: true
                            static:
                              type: object
                              additionalProperties: false
                              properties:
                                max_chunk_size_tokens:
                                  type: integer
                                  minimum: 100
                                  maximum: 4096
                                  description: The maximum number of tokens in each
                                    chunk. The default value is `800`. The minimum
                                    value is `100` and the maximum value is `4096`.
                                chunk_overlap_tokens:
                                  type: integer
                                  description: 'The number of tokens that overlap
                                    between chunks. The default value is `400`.


                                    Note that the overlap must not exceed half of
                                    `max_chunk_size_tokens`.

                                    '
                              required:
                              - max_chunk_size_tokens
                              - chunk_overlap_tokens
                          required:
                          - type
                          - static
                      metadata:
                        $ref: '#/components/schemas/Metadata'
              oneOf:
              - required:
                - vector_store_ids
              - required:
                - vector_stores
          nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
        temperature:
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            '
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: 'An alternative to sampling with temperature, called nucleus
            sampling, where the model considers the results of the tokens with top_p
            probability mass. So 0.1 means only the tokens comprising the top 10%
            probability mass are considered.


            We generally recommend altering this or temperature but not both.

            '
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
      required:
      - model
    CreateChatCompletionRequest:
      allOf:
      - $ref: '#/components/schemas/CreateModelResponseProperties'
      - type: object
        properties:
          messages:
            description: 'A list of messages comprising the conversation so far. Depending
              on the

              [model](/docs/models) you use, different message types (modalities)
              are

              supported, like [text](/docs/guides/text-generation),

              [images](/docs/guides/vision), and [audio](/docs/guides/audio).

              '
            type: array
            minItems: 1
            items:
              $ref: '#/components/schemas/ChatCompletionRequestMessage'
          model:
            description: 'Model ID used to generate the response, like `gpt-4o` or
              `o3`. OpenAI

              offers a wide range of models with different capabilities, performance

              characteristics, and price points. Refer to the [model guide](/docs/models)

              to browse and compare available models.

              '
            $ref: '#/components/schemas/ModelIdsShared'
          modalities:
            $ref: '#/components/schemas/ResponseModalities'
          reasoning_effort:
            $ref: '#/components/schemas/ReasoningEffort'
          max_completion_tokens:
            description: 'An upper bound for the number of tokens that can be generated
              for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).

              '
            type: integer
            nullable: true
          frequency_penalty:
            type: number
            default: 0
            minimum: -2
            maximum: 2
            nullable: true
            description: 'Number between -2.0 and 2.0. Positive values penalize new
              tokens based on

              their existing frequency in the text so far, decreasing the model''s

              likelihood to repeat the same line verbatim.

              '
          presence_penalty:
            type: number
            default: 0
            minimum: -2
            maximum: 2
            nullable: true
            description: 'Number between -2.0 and 2.0. Positive values penalize new
              tokens based on

              whether they appear in the text so far, increasing the model''s likelihood

              to talk about new topics.

              '
          web_search_options:
            type: object
            title: Web search
            description: 'This tool searches the web for relevant results to use in
              a response.

              Learn more about the [web search tool](/docs/guides/tools-web-search?api-mode=chat).

              '
            properties:
              user_location:
                type: object
                nullable: true
                required:
                - type
                - approximate
                description: 'Approximate location parameters for the search.

                  '
                properties:
                  type:
                    type: string
                    description: 'The type of location approximation. Always `approximate`.

                      '
                    enum:
                    - approximate
                    x-stainless-const: true
                  approximate:
                    $ref: '#/components/schemas/WebSearchLocation'
              search_context_size:
                $ref: '#/components/schemas/WebSearchContextSize'
          top_logprobs:
            description: 'An integer between 0 and 20 specifying the number of most
              likely tokens to

              return at each token position, each with an associated log probability.

              `logprobs` must be set to `true` if this parameter is used.

              '
            type: integer
            minimum: 0
            maximum: 20
            nullable: true
          response_format:
            description: 'An object specifying the format that the model must output.


              Setting to `{ "type": "json_schema", "json_schema": {...} }` enables

              Structured Outputs which ensures the model will match your supplied
              JSON

              schema. Learn more in the [Structured Outputs

              guide](/docs/guides/structured-outputs).


              Setting to `{ "type": "json_object" }` enables the older JSON mode,
              which

              ensures the message the model generates is valid JSON. Using `json_schema`

              is preferred for models that support it.

              '
            oneOf:
            - $ref: '#/components/schemas/ResponseFormatText'
            - $ref: '#/components/schemas/ResponseFormatJsonSchema'
            - $ref: '#/components/schemas/ResponseFormatJsonObject'
          audio:
            type: object
            nullable: true
            description: 'Parameters for audio output. Required when audio output
              is requested with

              `modalities: ["audio"]`. [Learn more](/docs/guides/audio).

              '
            required:
            - voice
            - format
            properties:
              voice:
                $ref: '#/components/schemas/VoiceIdsShared'
                description: "The voice the model uses to respond. Supported voices\
                  \ are \n`alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `nova`,\
                  \ `onyx`, `sage`, and `shimmer`.\n"
              format:
                type: string
                enum:
                - wav
                - aac
                - mp3
                - flac
                - opus
                - pcm16
                description: 'Specifies the output audio format. Must be one of `wav`,
                  `mp3`, `flac`,

                  `opus`, or `pcm16`.

                  '
          store:
            type: boolean
            default: false
            nullable: true
            description: "Whether or not to store the output of this chat completion\
              \ request for \nuse in our [model distillation](/docs/guides/distillation)\
              \ or\n[evals](/docs/guides/evals) products. \n\nSupports text and image\
              \ inputs. Note: image inputs over 10MB will be dropped.\n"
          stream:
            description: 'If set to true, the model response data will be streamed
              to the client

              as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).

              See the [Streaming section below](/docs/api-reference/chat/streaming)

              for more information, along with the [streaming responses](/docs/guides/streaming-responses)

              guide for more information on how to handle the streaming events.

              '
            type: boolean
            nullable: true
            default: false
          stop:
            $ref: '#/components/schemas/StopConfiguration'
          logit_bias:
            type: object
            x-oaiTypeLabel: map
            default: null
            nullable: true
            additionalProperties:
              type: integer
            description: 'Modify the likelihood of specified tokens appearing in the
              completion.


              Accepts a JSON object that maps tokens (specified by their token ID
              in the

              tokenizer) to an associated bias value from -100 to 100. Mathematically,

              the bias is added to the logits generated by the model prior to sampling.

              The exact effect will vary per model, but values between -1 and 1 should

              decrease or increase likelihood of selection; values like -100 or 100

              should result in a ban or exclusive selection of the relevant token.

              '
          logprobs:
            description: 'Whether to return log probabilities of the output tokens
              or not. If true,

              returns the log probabilities of each output token returned in the

              `content` of `message`.

              '
            type: boolean
            default: false
            nullable: true
          max_tokens:
            description: 'The maximum number of [tokens](/tokenizer) that can be generated
              in the

              chat completion. This value can be used to control

              [costs](https://openai.com/api/pricing/) for text generated via API.


              This value is now deprecated in favor of `max_completion_tokens`, and
              is

              not compatible with [o-series models](/docs/guides/reasoning).

              '
            type: integer
            nullable: true
            deprecated: true
          n:
            type: integer
            minimum: 1
            maximum: 128
            default: 1
            example: 1
            nullable: true
            description: How many chat completion choices to generate for each input
              message. Note that you will be charged based on the number of generated
              tokens across all of the choices. Keep `n` as `1` to minimize costs.
          prediction:
            nullable: true
            description: 'Configuration for a [Predicted Output](/docs/guides/predicted-outputs),

              which can greatly improve response times when large parts of the model

              response are known ahead of time. This is most common when you are

              regenerating a file with only minor changes to most of the content.

              '
            oneOf:
            - $ref: '#/components/schemas/PredictionContent'
          seed:
            type: integer
            minimum: -9223372036854776000
            maximum: 9223372036854776000
            nullable: true
            description: 'This feature is in Beta.

              If specified, our system will make a best effort to sample deterministically,
              such that repeated requests with the same `seed` and parameters should
              return the same result.

              Determinism is not guaranteed, and you should refer to the `system_fingerprint`
              response parameter to monitor changes in the backend.

              '
          stream_options:
            $ref: '#/components/schemas/ChatCompletionStreamOptions'
          tools:
            type: array
            description: 'A list of tools the model may call. Currently, only functions
              are supported as a tool. Use this to provide a list of functions the
              model may generate JSON inputs for. A max of 128 functions are supported.

              '
            items:
              $ref: '#/components/schemas/ChatCompletionTool'
          tool_choice:
            $ref: '#/components/schemas/ChatCompletionToolChoiceOption'
          parallel_tool_calls:
            $ref: '#/components/schemas/ParallelToolCalls'
          function_call:
            deprecated: true
            description: 'Deprecated in favor of `tool_choice`.


              Controls which (if any) function is called by the model.


              `none` means the model will not call a function and instead generates
              a

              message.


              `auto` means the model can pick between generating a message or calling
              a

              function.


              Specifying a particular function via `{"name": "my_function"}` forces
              the

              model to call that function.


              `none` is the default when no functions are present. `auto` is the default

              if functions are present.

              '
            oneOf:
            - type: string
              description: '`none` means the model will not call a function and instead
                generates a message. `auto` means the model can pick between generating
                a message or calling a function.

                '
              enum:
              - none
              - auto
            - $ref: '#/components/schemas/ChatCompletionFunctionCallOption'
          functions:
            deprecated: true
            description: 'Deprecated in favor of `tools`.


              A list of functions the model may generate JSON inputs for.

              '
            type: array
            minItems: 1
            maxItems: 128
            items:
              $ref: '#/components/schemas/ChatCompletionFunctions'
        required:
        - model
        - messages
    CreateChatCompletionResponse:
      type: object
      description: Represents a chat completion response returned by model, based
        on the provided input.
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion.
        choices:
          type: array
          description: A list of chat completion choices. Can be more than one if
            `n` is greater than 1.
          items:
            type: object
            required:
            - finish_reason
            - index
            - message
            - logprobs
            properties:
              finish_reason:
                type: string
                description: 'The reason the model stopped generating tokens. This
                  will be `stop` if the model hit a natural stop point or a provided
                  stop sequence,

                  `length` if the maximum number of tokens specified in the request
                  was reached,

                  `content_filter` if content was omitted due to a flag from our content
                  filters,

                  `tool_calls` if the model called a tool, or `function_call` (deprecated)
                  if the model called a function.

                  '
                enum:
                - stop
                - length
                - tool_calls
                - content_filter
                - function_call
              index:
                type: integer
                description: The index of the choice in the list of choices.
              message:
                $ref: '#/components/schemas/ChatCompletionResponseMessage'
              logprobs:
                description: Log probability information for the choice.
                type: object
                nullable: true
                properties:
                  content:
                    description: A list of message content tokens with log probability
                      information.
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                  refusal:
                    description: A list of message refusal tokens with log probability
                      information.
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                required:
                - content
                - refusal
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the chat completion
            was created.
        model:
          type: string
          description: The model used for the chat completion.
        service_tier:
          $ref: '#/components/schemas/ServiceTier'
        system_fingerprint:
          type: string
          description: 'This fingerprint represents the backend configuration that
            the model runs with.


            Can be used in conjunction with the `seed` request parameter to understand
            when backend changes have been made that might impact determinism.

            '
        object:
          type: string
          description: The object type, which is always `chat.completion`.
          enum:
          - chat.completion
          x-stainless-const: true
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      required:
      - choices
      - created
      - id
      - model
      - object
    CreateChatCompletionStreamResponse:
      type: object
      description: "Represents a streamed chunk of a chat completion response returned\n\
        by the model, based on the provided input. \n[Learn more](/docs/guides/streaming-responses).\n"
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion. Each chunk has
            the same ID.
        choices:
          type: array
          description: 'A list of chat completion choices. Can contain more than one
            elements if `n` is greater than 1. Can also be empty for the

            last chunk if you set `stream_options: {"include_usage": true}`.

            '
          items:
            type: object
            required:
            - delta
            - finish_reason
            - index
            properties:
              delta:
                $ref: '#/components/schemas/ChatCompletionStreamResponseDelta'
              logprobs:
                description: Log probability information for the choice.
                type: object
                nullable: true
                properties:
                  content:
                    description: A list of message content tokens with log probability
                      information.
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                  refusal:
                    description: A list of message refusal tokens with log probability
                      information.
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                required:
                - content
                - refusal
              finish_reason:
                type: string
                description: 'The reason the model stopped generating tokens. This
                  will be `stop` if the model hit a natural stop point or a provided
                  stop sequence,

                  `length` if the maximum number of tokens specified in the request
                  was reached,

                  `content_filter` if content was omitted due to a flag from our content
                  filters,

                  `tool_calls` if the model called a tool, or `function_call` (deprecated)
                  if the model called a function.

                  '
                enum:
                - stop
                - length
                - tool_calls
                - content_filter
                - function_call
                nullable: true
              index:
                type: integer
                description: The index of the choice in the list of choices.
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the chat completion
            was created. Each chunk has the same timestamp.
        model:
          type: string
          description: The model to generate the completion.
        service_tier:
          $ref: '#/components/schemas/ServiceTier'
        system_fingerprint:
          type: string
          description: 'This fingerprint represents the backend configuration that
            the model runs with.

            Can be used in conjunction with the `seed` request parameter to understand
            when backend changes have been made that might impact determinism.

            '
        object:
          type: string
          description: The object type, which is always `chat.completion.chunk`.
          enum:
          - chat.completion.chunk
          x-stainless-const: true
        usage:
          $ref: '#/components/schemas/CompletionUsage'
          nullable: true
          description: 'An optional field that will only be present when you set

            `stream_options: {"include_usage": true}` in your request. When present,
            it

            contains a null value **except for the last chunk** which contains the

            token usage statistics for the entire request.


            **NOTE:** If the stream is interrupted or cancelled, you may not

            receive the final usage chunk which contains the total token usage for

            the request.

            '
      required:
      - choices
      - created
      - id
      - model
      - object
    CreateCompletionRequest:
      type: object
      properties:
        model:
          description: 'ID of the model to use. You can use the [List models](/docs/api-reference/models/list)
            API to see all of your available models, or see our [Model overview](/docs/models)
            for descriptions of them.

            '
          anyOf:
          - type: string
          - type: string
            enum:
            - gpt-3.5-turbo-instruct
            - davinci-002
            - babbage-002
          x-oaiTypeLabel: string
        prompt:
          description: 'The prompt(s) to generate completions for, encoded as a string,
            array of strings, array of tokens, or array of token arrays.


            Note that <|endoftext|> is the document separator that the model sees
            during training, so if a prompt is not specified the model will generate
            as if from the beginning of a new document.

            '
          default: <|endoftext|>
          nullable: true
          oneOf:
          - type: string
            default: ''
            example: This is a test.
          - type: array
            items:
              type: string
              default: ''
              example: This is a test.
          - type: array
            minItems: 1
            items:
              type: integer
            example: '[1212, 318, 257, 1332, 13]'
          - type: array
            minItems: 1
            items:
              type: array
              minItems: 1
              items:
                type: integer
            example: '[[1212, 318, 257, 1332, 13]]'
        best_of:
          type: integer
          default: 1
          minimum: 0
          maximum: 20
          nullable: true
          description: 'Generates `best_of` completions server-side and returns the
            "best" (the one with the highest log probability per token). Results cannot
            be streamed.


            When used with `n`, `best_of` controls the number of candidate completions
            and `n` specifies how many to return – `best_of` must be greater than
            `n`.


            **Note:** Because this parameter generates many completions, it can quickly
            consume your token quota. Use carefully and ensure that you have reasonable
            settings for `max_tokens` and `stop`.

            '
        echo:
          type: boolean
          default: false
          nullable: true
          description: 'Echo back the prompt in addition to the completion

            '
        frequency_penalty:
          type: number
          default: 0
          minimum: -2
          maximum: 2
          nullable: true
          description: 'Number between -2.0 and 2.0. Positive values penalize new
            tokens based on their existing frequency in the text so far, decreasing
            the model''s likelihood to repeat the same line verbatim.


            [See more information about frequency and presence penalties.](/docs/guides/text-generation)

            '
        logit_bias:
          type: object
          x-oaiTypeLabel: map
          default: null
          nullable: true
          additionalProperties:
            type: integer
          description: 'Modify the likelihood of specified tokens appearing in the
            completion.


            Accepts a JSON object that maps tokens (specified by their token ID in
            the GPT tokenizer) to an associated bias value from -100 to 100. You can
            use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token
            IDs. Mathematically, the bias is added to the logits generated by the
            model prior to sampling. The exact effect will vary per model, but values
            between -1 and 1 should decrease or increase likelihood of selection;
            values like -100 or 100 should result in a ban or exclusive selection
            of the relevant token.


            As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|>
            token from being generated.

            '
        logprobs:
          type: integer
          minimum: 0
          maximum: 5
          default: null
          nullable: true
          description: 'Include the log probabilities on the `logprobs` most likely
            output tokens, as well the chosen tokens. For example, if `logprobs` is
            5, the API will return a list of the 5 most likely tokens. The API will
            always return the `logprob` of the sampled token, so there may be up to
            `logprobs+1` elements in the response.


            The maximum value for `logprobs` is 5.

            '
        max_tokens:
          type: integer
          minimum: 0
          default: 16
          example: 16
          nullable: true
          description: 'The maximum number of [tokens](/tokenizer) that can be generated
            in the completion.


            The token count of your prompt plus `max_tokens` cannot exceed the model''s
            context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)
            for counting tokens.

            '
        n:
          type: integer
          minimum: 1
          maximum: 128
          default: 1
          example: 1
          nullable: true
          description: 'How many completions to generate for each prompt.


            **Note:** Because this parameter generates many completions, it can quickly
            consume your token quota. Use carefully and ensure that you have reasonable
            settings for `max_tokens` and `stop`.

            '
        presence_penalty:
          type: number
          default: 0
          minimum: -2
          maximum: 2
          nullable: true
          description: 'Number between -2.0 and 2.0. Positive values penalize new
            tokens based on whether they appear in the text so far, increasing the
            model''s likelihood to talk about new topics.


            [See more information about frequency and presence penalties.](/docs/guides/text-generation)

            '
        seed:
          type: integer
          format: int64
          nullable: true
          description: 'If specified, our system will make a best effort to sample
            deterministically, such that repeated requests with the same `seed` and
            parameters should return the same result.


            Determinism is not guaranteed, and you should refer to the `system_fingerprint`
            response parameter to monitor changes in the backend.

            '
        stop:
          $ref: '#/components/schemas/StopConfiguration'
        stream:
          description: 'Whether to stream back partial progress. If set, tokens will
            be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
            as they become available, with the stream terminated by a `data: [DONE]`
            message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).

            '
          type: boolean
          nullable: true
          default: false
        stream_options:
          $ref: '#/components/schemas/ChatCompletionStreamOptions'
        suffix:
          description: 'The suffix that comes after a completion of inserted text.


            This parameter is only supported for `gpt-3.5-turbo-instruct`.

            '
          default: null
          nullable: true
          type: string
          example: test.
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.


            We generally recommend altering this or `top_p` but not both.

            '
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: 'An alternative to sampling with temperature, called nucleus
            sampling, where the model considers the results of the tokens with top_p
            probability mass. So 0.1 means only the tokens comprising the top 10%
            probability mass are considered.


            We generally recommend altering this or `temperature` but not both.

            '
        user:
          type: string
          example: user-1234
          description: 'A unique identifier representing your end-user, which can
            help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

            '
      required:
      - model
      - prompt
    CreateCompletionResponse:
      type: object
      description: 'Represents a completion response from the API. Note: both the
        streamed and non-streamed response objects share the same shape (unlike the
        chat endpoint).

        '
      properties:
        id:
          type: string
          description: A unique identifier for the completion.
        choices:
          type: array
          description: The list of completion choices the model generated for the
            input prompt.
          items:
            type: object
            required:
            - finish_reason
            - index
            - logprobs
            - text
            properties:
              finish_reason:
                type: string
                description: 'The reason the model stopped generating tokens. This
                  will be `stop` if the model hit a natural stop point or a provided
                  stop sequence,

                  `length` if the maximum number of tokens specified in the request
                  was reached,

                  or `content_filter` if content was omitted due to a flag from our
                  content filters.

                  '
                enum:
                - stop
                - length
                - content_filter
              index:
                type: integer
              logprobs:
                type: object
                nullable: true
                properties:
                  text_offset:
                    type: array
                    items:
                      type: integer
                  token_logprobs:
                    type: array
                    items:
                      type: number
                  tokens:
                    type: array
                    items:
                      type: string
                  top_logprobs:
                    type: array
                    items:
                      type: object
                      additionalProperties:
                        type: number
              text:
                type: string
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the completion was
            created.
        model:
          type: string
          description: The model used for completion.
        system_fingerprint:
          type: string
          description: 'This fingerprint represents the backend configuration that
            the model runs with.


            Can be used in conjunction with the `seed` request parameter to understand
            when backend changes have been made that might impact determinism.

            '
        object:
          type: string
          description: The object type, which is always "text_completion"
          enum:
          - text_completion
          x-stainless-const: true
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      required:
      - id
      - object
      - created
      - model
      - choices
    CreateContainerBody:
      type: object
      properties:
        name:
          type: string
          description: Name of the container to create.
        file_ids:
          type: array
          description: IDs of files to copy to the container.
          items:
            type: string
        expires_after:
          type: object
          description: Container expiration time in seconds relative to the 'anchor'
            time.
          properties:
            anchor:
              type: string
              enum:
              - last_active_at
              description: Time anchor for the expiration time. Currently only 'last_active_at'
                is supported.
            minutes:
              type: integer
          required:
          - anchor
          - minutes
      required:
      - name
    CreateContainerFileBody:
      type: object
      properties:
        file_id:
          type: string
          description: Name of the file to create.
        file:
          description: 'The File object (not file name) to be uploaded.

            '
          type: string
          format: binary
      required: []
    CreateEmbeddingRequest:
      type: object
      additionalProperties: false
      properties:
        input:
          description: 'Input text to embed, encoded as a string or array of tokens.
            To embed multiple inputs in a single request, pass an array of strings
            or array of token arrays. The input must not exceed the max input tokens
            for the model (8192 tokens for all embedding models), cannot be an empty
            string, and any array must be 2048 dimensions or less. [Example Python
            code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)
            for counting tokens. In addition to the per-input token limit, all embedding  models
            enforce a maximum of 300,000 tokens summed across all inputs in a  single
            request.

            '
          example: The quick brown fox jumped over the lazy dog
          oneOf:
          - type: string
            title: string
            description: The string that will be turned into an embedding.
            default: ''
            example: This is a test.
          - type: array
            title: array
            description: The array of strings that will be turned into an embedding.
            minItems: 1
            maxItems: 2048
            items:
              type: string
              default: ''
              example: '[''This is a test.'']'
          - type: array
            title: array
            description: The array of integers that will be turned into an embedding.
            minItems: 1
            maxItems: 2048
            items:
              type: integer
            example: '[1212, 318, 257, 1332, 13]'
          - type: array
            title: array
            description: The array of arrays containing integers that will be turned
              into an embedding.
            minItems: 1
            maxItems: 2048
            items:
              type: array
              minItems: 1
              items:
                type: integer
            example: '[[1212, 318, 257, 1332, 13]]'
        model:
          description: 'ID of the model to use. You can use the [List models](/docs/api-reference/models/list)
            API to see all of your available models, or see our [Model overview](/docs/models)
            for descriptions of them.

            '
          example: text-embedding-3-small
          anyOf:
          - type: string
          - type: string
            enum:
            - text-embedding-ada-002
            - text-embedding-3-small
            - text-embedding-3-large
          x-oaiTypeLabel: string
        encoding_format:
          description: The format to return the embeddings in. Can be either `float`
            or [`base64`](https://pypi.org/project/pybase64/).
          example: float
          default: float
          type: string
          enum:
          - float
          - base64
        dimensions:
          description: 'The number of dimensions the resulting output embeddings should
            have. Only supported in `text-embedding-3` and later models.

            '
          type: integer
          minimum: 1
        user:
          type: string
          example: user-1234
          description: 'A unique identifier representing your end-user, which can
            help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

            '
      required:
      - model
      - input
    CreateEmbeddingResponse:
      type: object
      properties:
        data:
          type: array
          description: The list of embeddings generated by the model.
          items:
            $ref: '#/components/schemas/Embedding'
        model:
          type: string
          description: The name of the model used to generate the embedding.
        object:
          type: string
          description: The object type, which is always "list".
          enum:
          - list
          x-stainless-const: true
        usage:
          type: object
          description: The usage information for the request.
          properties:
            prompt_tokens:
              type: integer
              description: The number of tokens used by the prompt.
            total_tokens:
              type: integer
              description: The total number of tokens used by the request.
          required:
          - prompt_tokens
          - total_tokens
      required:
      - object
      - model
      - data
      - usage
    CreateEvalCompletionsRunDataSource:
      type: object
      title: CompletionsRunDataSource
      description: 'A CompletionsRunDataSource object describing a model sampling
        configuration.

        '
      properties:
        type:
          type: string
          enum:
          - completions
          default: completions
          description: The type of run data source. Always `completions`.
        input_messages:
          description: Used when sampling from a model. Dictates the structure of
            the messages passed into the model. Can either be a reference to a prebuilt
            trajectory (ie, `item.input_trajectory`), or a template with variable
            references to the `item` namespace.
          oneOf:
          - type: object
            title: TemplateInputMessages
            properties:
              type:
                type: string
                enum:
                - template
                description: The type of input messages. Always `template`.
              template:
                type: array
                description: A list of chat messages forming the prompt or context.
                  May include variable references to the `item` namespace, ie {{item.name}}.
                items:
                  oneOf:
                  - $ref: '#/components/schemas/EasyInputMessage'
                  - $ref: '#/components/schemas/EvalItem'
            required:
            - type
            - template
          - type: object
            title: ItemReferenceInputMessages
            properties:
              type:
                type: string
                enum:
                - item_reference
                description: The type of input messages. Always `item_reference`.
              item_reference:
                type: string
                description: A reference to a variable in the `item` namespace. Ie,
                  "item.input_trajectory"
            required:
            - type
            - item_reference
        sampling_params:
          type: object
          properties:
            temperature:
              type: number
              description: A higher temperature increases randomness in the outputs.
              default: 1
            max_completion_tokens:
              type: integer
              description: The maximum number of tokens in the generated output.
            top_p:
              type: number
              description: An alternative to temperature for nucleus sampling; 1.0
                includes all tokens.
              default: 1
            seed:
              type: integer
              description: A seed value to initialize the randomness, during sampling.
              default: 42
            response_format:
              description: 'An object specifying the format that the model must output.


                Setting to `{ "type": "json_schema", "json_schema": {...} }` enables

                Structured Outputs which ensures the model will match your supplied
                JSON

                schema. Learn more in the [Structured Outputs

                guide](/docs/guides/structured-outputs).


                Setting to `{ "type": "json_object" }` enables the older JSON mode,
                which

                ensures the message the model generates is valid JSON. Using `json_schema`

                is preferred for models that support it.

                '
              oneOf:
              - $ref: '#/components/schemas/ResponseFormatText'
              - $ref: '#/components/schemas/ResponseFormatJsonSchema'
              - $ref: '#/components/schemas/ResponseFormatJsonObject'
            tools:
              type: array
              description: 'A list of tools the model may call. Currently, only functions
                are supported as a tool. Use this to provide a list of functions the
                model may generate JSON inputs for. A max of 128 functions are supported.

                '
              items:
                $ref: '#/components/schemas/ChatCompletionTool'
        model:
          type: string
          description: The name of the model to use for generating completions (e.g.
            "o3-mini").
        source:
          description: Determines what populates the `item` namespace in this run's
            data source.
          oneOf:
          - $ref: '#/components/schemas/EvalJsonlFileContentSource'
          - $ref: '#/components/schemas/EvalJsonlFileIdSource'
          - $ref: '#/components/schemas/EvalStoredCompletionsSource'
      required:
      - type
      - source
    CreateEvalCustomDataSourceConfig:
      type: object
      title: CustomDataSourceConfig
      description: 'A CustomDataSourceConfig object that defines the schema for the
        data source used for the evaluation runs.

        This schema is used to define the shape of the data that will be:

        - Used to define your testing criteria and

        - What data is required when creating a run

        '
      properties:
        type:
          type: string
          enum:
          - custom
          default: custom
          description: The type of data source. Always `custom`.
          x-stainless-const: true
        item_schema:
          type: object
          description: The json schema for each row in the data source.
          additionalProperties: true
          example: "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\"\
            : {\"type\": \"string\"},\n    \"age\": {\"type\": \"integer\"}\n  },\n\
            \  \"required\": [\"name\", \"age\"]\n}\n"
        include_sample_schema:
          type: boolean
          default: false
          description: Whether the eval should expect you to populate the sample namespace
            (ie, by generating responses off of your data source)
      required:
      - item_schema
      - type
    CreateEvalItem:
      title: CreateEvalItem
      description: A chat message that makes up the prompt or context. May include
        variable references to the `item` namespace, ie {{item.name}}.
      type: object
      oneOf:
      - type: object
        title: SimpleInputMessage
        properties:
          role:
            type: string
            description: The role of the message (e.g. "system", "assistant", "user").
          content:
            type: string
            description: The content of the message.
        required:
        - role
        - content
      - $ref: '#/components/schemas/EvalItem'
    CreateEvalJsonlRunDataSource:
      type: object
      title: JsonlRunDataSource
      description: 'A JsonlRunDataSource object with that specifies a JSONL file that
        matches the eval

        '
      properties:
        type:
          type: string
          enum:
          - jsonl
          default: jsonl
          description: The type of data source. Always `jsonl`.
          x-stainless-const: true
        source:
          description: Determines what populates the `item` namespace in the data
            source.
          oneOf:
          - $ref: '#/components/schemas/EvalJsonlFileContentSource'
          - $ref: '#/components/schemas/EvalJsonlFileIdSource'
      required:
      - type
      - source
    CreateEvalLabelModelGrader:
      type: object
      title: LabelModelGrader
      description: 'A LabelModelGrader object which uses a model to assign labels
        to each item

        in the evaluation.

        '
      properties:
        type:
          description: The object type, which is always `label_model`.
          type: string
          enum:
          - label_model
          x-stainless-const: true
        name:
          type: string
          description: The name of the grader.
        model:
          type: string
          description: The model to use for the evaluation. Must support structured
            outputs.
        input:
          type: array
          description: A list of chat messages forming the prompt or context. May
            include variable references to the `item` namespace, ie {{item.name}}.
          items:
            $ref: '#/components/schemas/CreateEvalItem'
        labels:
          type: array
          items:
            type: string
          description: The labels to classify to each item in the evaluation.
        passing_labels:
          type: array
          items:
            type: string
          description: The labels that indicate a passing result. Must be a subset
            of labels.
      required:
      - type
      - model
      - input
      - passing_labels
      - labels
      - name
    CreateEvalLogsDataSourceConfig:
      type: object
      title: LogsDataSourceConfig
      description: 'A data source config which specifies the metadata property of
        your logs query.

        This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.

        '
      properties:
        type:
          type: string
          enum:
          - logs
          default: logs
          description: The type of data source. Always `logs`.
          x-stainless-const: true
        metadata:
          type: object
          description: Metadata filters for the logs data source.
          additionalProperties: true
          example: "{\n  \"use_case\": \"customer_support_agent\"\n}\n"
      required:
      - type
    CreateEvalRequest:
      type: object
      title: CreateEvalRequest
      properties:
        name:
          type: string
          description: The name of the evaluation.
        metadata:
          $ref: '#/components/schemas/Metadata'
        data_source_config:
          type: object
          description: The configuration for the data source used for the evaluation
            runs. Dictates the schema of the data used in the evaluation.
          oneOf:
          - $ref: '#/components/schemas/CreateEvalCustomDataSourceConfig'
          - $ref: '#/components/schemas/CreateEvalLogsDataSourceConfig'
          - $ref: '#/components/schemas/CreateEvalStoredCompletionsDataSourceConfig'
        testing_criteria:
          type: array
          description: A list of graders for all eval runs in this group. Graders
            can reference variables in the data source using double curly braces notation,
            like `{{item.variable_name}}`. To reference the model's output, use the
            `sample` namespace (ie, `{{sample.output_text}}`).
          items:
            oneOf:
            - $ref: '#/components/schemas/CreateEvalLabelModelGrader'
            - $ref: '#/components/schemas/EvalGraderStringCheck'
            - $ref: '#/components/schemas/EvalGraderTextSimilarity'
            - $ref: '#/components/schemas/EvalGraderPython'
            - $ref: '#/components/schemas/EvalGraderScoreModel'
      required:
      - data_source_config
      - testing_criteria
    CreateEvalResponsesRunDataSource:
      type: object
      title: ResponsesRunDataSource
      description: 'A ResponsesRunDataSource object describing a model sampling configuration.

        '
      properties:
        type:
          type: string
          enum:
          - responses
          default: responses
          description: The type of run data source. Always `responses`.
        input_messages:
          description: Used when sampling from a model. Dictates the structure of
            the messages passed into the model. Can either be a reference to a prebuilt
            trajectory (ie, `item.input_trajectory`), or a template with variable
            references to the `item` namespace.
          oneOf:
          - type: object
            title: InputMessagesTemplate
            properties:
              type:
                type: string
                enum:
                - template
                description: The type of input messages. Always `template`.
              template:
                type: array
                description: A list of chat messages forming the prompt or context.
                  May include variable references to the `item` namespace, ie {{item.name}}.
                items:
                  oneOf:
                  - type: object
                    title: ChatMessage
                    properties:
                      role:
                        type: string
                        description: The role of the message (e.g. "system", "assistant",
                          "user").
                      content:
                        type: string
                        description: The content of the message.
                    required:
                    - role
                    - content
                  - $ref: '#/components/schemas/EvalItem'
            required:
            - type
            - template
          - type: object
            title: InputMessagesItemReference
            properties:
              type:
                type: string
                enum:
                - item_reference
                description: The type of input messages. Always `item_reference`.
              item_reference:
                type: string
                description: A reference to a variable in the `item` namespace. Ie,
                  "item.name"
            required:
            - type
            - item_reference
        sampling_params:
          type: object
          properties:
            temperature:
              type: number
              description: A higher temperature increases randomness in the outputs.
              default: 1
            max_completion_tokens:
              type: integer
              description: The maximum number of tokens in the generated output.
            top_p:
              type: number
              description: An alternative to temperature for nucleus sampling; 1.0
                includes all tokens.
              default: 1
            seed:
              type: integer
              description: A seed value to initialize the randomness, during sampling.
              default: 42
            tools:
              type: array
              description: "An array of tools the model may call while generating\
                \ a response. You\ncan specify which tool to use by setting the `tool_choice`\
                \ parameter.\n\nThe two categories of tools you can provide the model\
                \ are:\n\n- **Built-in tools**: Tools that are provided by OpenAI\
                \ that extend the\n  model's capabilities, like [web search](/docs/guides/tools-web-search)\n\
                \  or [file search](/docs/guides/tools-file-search). Learn more about\n\
                \  [built-in tools](/docs/guides/tools).\n- **Function calls (custom\
                \ tools)**: Functions that are defined by you,\n  enabling the model\
                \ to call your own code. Learn more about\n  [function calling](/docs/guides/function-calling).\n"
              items:
                $ref: '#/components/schemas/Tool'
            text:
              type: object
              description: 'Configuration options for a text response from the model.
                Can be plain

                text or structured JSON data. Learn more:

                - [Text inputs and outputs](/docs/guides/text)

                - [Structured Outputs](/docs/guides/structured-outputs)

                '
              properties:
                format:
                  $ref: '#/components/schemas/TextResponseFormatConfiguration'
        model:
          type: string
          description: The name of the model to use for generating completions (e.g.
            "o3-mini").
        source:
          description: Determines what populates the `item` namespace in this run's
            data source.
          oneOf:
          - $ref: '#/components/schemas/EvalJsonlFileContentSource'
          - $ref: '#/components/schemas/EvalJsonlFileIdSource'
          - $ref: '#/components/schemas/EvalResponsesSource'
      required:
      - type
      - source
    CreateEvalRunRequest:
      type: object
      title: CreateEvalRunRequest
      properties:
        name:
          type: string
          description: The name of the run.
        metadata:
          $ref: '#/components/schemas/Metadata'
        data_source:
          type: object
          description: Details about the run's data source.
          oneOf:
          - $ref: '#/components/schemas/CreateEvalJsonlRunDataSource'
          - $ref: '#/components/schemas/CreateEvalCompletionsRunDataSource'
          - $ref: '#/components/schemas/CreateEvalResponsesRunDataSource'
      required:
      - data_source
    CreateEvalStoredCompletionsDataSourceConfig:
      type: object
      title: StoredCompletionsDataSourceConfig
      description: 'Deprecated in favor of LogsDataSourceConfig.

        '
      properties:
        type:
          type: string
          enum:
          - stored_completions
          default: stored_completions
          description: The type of data source. Always `stored_completions`.
          x-stainless-const: true
        metadata:
          type: object
          description: Metadata filters for the stored completions data source.
          additionalProperties: true
          example: "{\n  \"use_case\": \"customer_support_agent\"\n}\n"
      required:
      - type
      deprecated: true
    CreateFileRequest:
      type: object
      additionalProperties: false
      properties:
        file:
          description: 'The File object (not file name) to be uploaded.

            '
          type: string
          format: binary
        purpose:
          description: 'The intended purpose of the uploaded file. One of: - `assistants`:
            Used in the Assistants API - `batch`: Used in the Batch API - `fine-tune`:
            Used for fine-tuning - `vision`: Images used for vision fine-tuning -
            `user_data`: Flexible file type for any purpose - `evals`: Used for eval
            data sets

            '
          type: string
          enum:
          - assistants
          - batch
          - fine-tune
          - vision
          - user_data
          - evals
      required:
      - file
      - purpose
    CreateFineTuningCheckpointPermissionRequest:
      type: object
      additionalProperties: false
      properties:
        project_ids:
          type: array
          description: The project identifiers to grant access to.
          items:
            type: string
      required:
      - project_ids
    CreateFineTuningJobRequest:
      type: object
      properties:
        model:
          description: 'The name of the model to fine-tune. You can select one of
            the

            [supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).

            '
          example: gpt-4o-mini
          anyOf:
          - type: string
          - type: string
            enum:
            - babbage-002
            - davinci-002
            - gpt-3.5-turbo
            - gpt-4o-mini
          x-oaiTypeLabel: string
        training_file:
          description: 'The ID of an uploaded file that contains training data.


            See [upload file](/docs/api-reference/files/create) for how to upload
            a file.


            Your dataset must be formatted as a JSONL file. Additionally, you must
            upload your file with the purpose `fine-tune`.


            The contents of the file should differ depending on if the model uses
            the [chat](/docs/api-reference/fine-tuning/chat-input), [completions](/docs/api-reference/fine-tuning/completions-input)
            format, or if the fine-tuning method uses the [preference](/docs/api-reference/fine-tuning/preference-input)
            format.


            See the [fine-tuning guide](/docs/guides/model-optimization) for more
            details.

            '
          type: string
          example: file-abc123
        hyperparameters:
          type: object
          description: 'The hyperparameters used for the fine-tuning job.

            This value is now deprecated in favor of `method`, and should be passed
            in under the `method` parameter.

            '
          properties:
            batch_size:
              description: 'Number of examples in each batch. A larger batch size
                means that model parameters

                are updated less frequently, but with lower variance.

                '
              oneOf:
              - type: string
                enum:
                - auto
                x-stainless-const: true
              - type: integer
                minimum: 1
                maximum: 256
              default: auto
            learning_rate_multiplier:
              description: 'Scaling factor for the learning rate. A smaller learning
                rate may be useful to avoid

                overfitting.

                '
              oneOf:
              - type: string
                enum:
                - auto
                x-stainless-const: true
              - type: number
                minimum: 0
                exclusiveMinimum: true
              default: auto
            n_epochs:
              description: 'The number of epochs to train the model for. An epoch
                refers to one full cycle

                through the training dataset.

                '
              oneOf:
              - type: string
                enum:
                - auto
                x-stainless-const: true
              - type: integer
                minimum: 1
                maximum: 50
              default: auto
          deprecated: true
        suffix:
          description: 'A string of up to 64 characters that will be added to your
            fine-tuned model name.


            For example, a `suffix` of "custom-model-name" would produce a model name
            like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.

            '
          type: string
          minLength: 1
          maxLength: 64
          default: null
          nullable: true
        validation_file:
          description: 'The ID of an uploaded file that contains validation data.


            If you provide this file, the data is used to generate validation

            metrics periodically during fine-tuning. These metrics can be viewed in

            the fine-tuning results file.

            The same data should not be present in both train and validation files.


            Your dataset must be formatted as a JSONL file. You must upload your file
            with the purpose `fine-tune`.


            See the [fine-tuning guide](/docs/guides/model-optimization) for more
            details.

            '
          type: string
          nullable: true
          example: file-abc123
        integrations:
          type: array
          description: A list of integrations to enable for your fine-tuning job.
          nullable: true
          items:
            type: object
            required:
            - type
            - wandb
            properties:
              type:
                description: 'The type of integration to enable. Currently, only "wandb"
                  (Weights and Biases) is supported.

                  '
                oneOf:
                - type: string
                  enum:
                  - wandb
                  x-stainless-const: true
              wandb:
                type: object
                description: 'The settings for your integration with Weights and Biases.
                  This payload specifies the project that

                  metrics will be sent to. Optionally, you can set an explicit display
                  name for your run, add tags

                  to your run, and set a default entity (team, username, etc) to be
                  associated with your run.

                  '
                required:
                - project
                properties:
                  project:
                    description: 'The name of the project that the new run will be
                      created under.

                      '
                    type: string
                    example: my-wandb-project
                  name:
                    description: 'A display name to set for the run. If not set, we
                      will use the Job ID as the name.

                      '
                    nullable: true
                    type: string
                  entity:
                    description: 'The entity to use for the run. This allows you to
                      set the team or username of the WandB user that you would

                      like associated with the run. If not set, the default entity
                      for the registered WandB API key is used.

                      '
                    nullable: true
                    type: string
                  tags:
                    description: 'A list of tags to be attached to the newly created
                      run. These tags are passed through directly to WandB. Some

                      default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}",
                      "openai/{ftjob-abcdef}".

                      '
                    type: array
                    items:
                      type: string
                      example: custom-tag
        seed:
          description: 'The seed controls the reproducibility of the job. Passing
            in the same seed and job parameters should produce the same results, but
            may differ in rare cases.

            If a seed is not specified, one will be generated for you.

            '
          type: integer
          nullable: true
          minimum: 0
          maximum: 2147483647
          example: 42
        method:
          $ref: '#/components/schemas/FineTuneMethod'
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
      - model
      - training_file
    CreateImageEditRequest:
      type: object
      properties:
        image:
          anyOf:
          - type: string
            format: binary
          - type: array
            maxItems: 16
            items:
              type: string
              format: binary
          description: "The image(s) to edit. Must be a supported image file or an\
            \ array of images.\n\nFor `gpt-image-1`, each image should be a `png`,\
            \ `webp`, or `jpg` file less \nthan 50MB. You can provide up to 16 images.\n\
            \nFor `dall-e-2`, you can only provide one image, and it should be a square\
            \ \n`png` file less than 4MB.\n"
        prompt:
          description: A text description of the desired image(s). The maximum length
            is 1000 characters for `dall-e-2`, and 32000 characters for `gpt-image-1`.
          type: string
          example: A cute baby sea otter wearing a beret
        mask:
          description: An additional image whose fully transparent areas (e.g. where
            alpha is zero) indicate where `image` should be edited. If there are multiple
            images provided, the mask will be applied on the first image. Must be
            a valid PNG file, less than 4MB, and have the same dimensions as `image`.
          type: string
          format: binary
        background:
          type: string
          enum:
          - transparent
          - opaque
          - auto
          default: auto
          example: transparent
          nullable: true
          description: "Allows to set transparency for the background of the generated\
            \ image(s). \nThis parameter is only supported for `gpt-image-1`. Must\
            \ be one of \n`transparent`, `opaque` or `auto` (default value). When\
            \ `auto` is used, the \nmodel will automatically determine the best background\
            \ for the image.\n\nIf `transparent`, the output format needs to support\
            \ transparency, so it \nshould be set to either `png` (default value)\
            \ or `webp`.\n"
        model:
          anyOf:
          - type: string
          - type: string
            enum:
            - dall-e-2
            - gpt-image-1
            x-stainless-const: true
          x-oaiTypeLabel: string
          default: dall-e-2
          example: gpt-image-1
          nullable: true
          description: The model to use for image generation. Only `dall-e-2` and
            `gpt-image-1` are supported. Defaults to `dall-e-2` unless a parameter
            specific to `gpt-image-1` is used.
        n:
          type: integer
          minimum: 1
          maximum: 10
          default: 1
          example: 1
          nullable: true
          description: The number of images to generate. Must be between 1 and 10.
        size:
          type: string
          enum:
          - 256x256
          - 512x512
          - 1024x1024
          - 1536x1024
          - 1024x1536
          - auto
          default: 1024x1024
          example: 1024x1024
          nullable: true
          description: The size of the generated images. Must be one of `1024x1024`,
            `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value)
            for `gpt-image-1`, and one of `256x256`, `512x512`, or `1024x1024` for
            `dall-e-2`.
        response_format:
          type: string
          enum:
          - url
          - b64_json
          default: url
          example: url
          nullable: true
          description: The format in which the generated images are returned. Must
            be one of `url` or `b64_json`. URLs are only valid for 60 minutes after
            the image has been generated. This parameter is only supported for `dall-e-2`,
            as `gpt-image-1` will always return base64-encoded images.
        output_format:
          type: string
          enum:
          - png
          - jpeg
          - webp
          default: png
          example: png
          nullable: true
          description: 'The format in which the generated images are returned. This
            parameter is

            only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.

            The default value is `png`.

            '
        output_compression:
          type: integer
          default: 100
          example: 100
          nullable: true
          description: "The compression level (0-100%) for the generated images. This\
            \ parameter \nis only supported for `gpt-image-1` with the `webp` or `jpeg`\
            \ output \nformats, and defaults to 100.\n"
        user:
          type: string
          example: user-1234
          description: 'A unique identifier representing your end-user, which can
            help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

            '
        input_fidelity:
          $ref: '#/components/schemas/ImageInputFidelity'
        stream:
          type: boolean
          default: false
          example: false
          nullable: true
          description: "Edit the image in streaming mode. Defaults to `false`. See\
            \ the \n[Image generation guide](/docs/guides/image-generation) for more\
            \ information.\n"
        partial_images:
          $ref: '#/components/schemas/PartialImages'
        quality:
          type: string
          enum:
          - standard
          - low
          - medium
          - high
          - auto
          default: auto
          example: high
          nullable: true
          description: 'The quality of the image that will be generated. `high`, `medium`
            and `low` are only supported for `gpt-image-1`. `dall-e-2` only supports
            `standard` quality. Defaults to `auto`.

            '
      required:
      - prompt
      - image
    CreateImageRequest:
      type: object
      properties:
        prompt:
          description: A text description of the desired image(s). The maximum length
            is 32000 characters for `gpt-image-1`, 1000 characters for `dall-e-2`
            and 4000 characters for `dall-e-3`.
          type: string
          example: A cute baby sea otter
        model:
          anyOf:
          - type: string
          - type: string
            enum:
            - dall-e-2
            - dall-e-3
            - gpt-image-1
          x-oaiTypeLabel: string
          default: dall-e-2
          example: gpt-image-1
          nullable: true
          description: The model to use for image generation. One of `dall-e-2`, `dall-e-3`,
            or `gpt-image-1`. Defaults to `dall-e-2` unless a parameter specific to
            `gpt-image-1` is used.
        n:
          type: integer
          minimum: 1
          maximum: 10
          default: 1
          example: 1
          nullable: true
          description: The number of images to generate. Must be between 1 and 10.
            For `dall-e-3`, only `n=1` is supported.
        quality:
          type: string
          enum:
          - standard
          - hd
          - low
          - medium
          - high
          - auto
          default: auto
          example: medium
          nullable: true
          description: "The quality of the image that will be generated. \n\n- `auto`\
            \ (default value) will automatically select the best quality for the given\
            \ model.\n- `high`, `medium` and `low` are supported for `gpt-image-1`.\n\
            - `hd` and `standard` are supported for `dall-e-3`.\n- `standard` is the\
            \ only option for `dall-e-2`.\n"
        response_format:
          type: string
          enum:
          - url
          - b64_json
          default: url
          example: url
          nullable: true
          description: The format in which generated images with `dall-e-2` and `dall-e-3`
            are returned. Must be one of `url` or `b64_json`. URLs are only valid
            for 60 minutes after the image has been generated. This parameter isn't
            supported for `gpt-image-1` which will always return base64-encoded images.
        output_format:
          type: string
          enum:
          - png
          - jpeg
          - webp
          default: png
          example: png
          nullable: true
          description: The format in which the generated images are returned. This
            parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`,
            or `webp`.
        output_compression:
          type: integer
          default: 100
          example: 100
          nullable: true
          description: The compression level (0-100%) for the generated images. This
            parameter is only supported for `gpt-image-1` with the `webp` or `jpeg`
            output formats, and defaults to 100.
        stream:
          type: boolean
          default: false
          example: false
          nullable: true
          description: "Generate the image in streaming mode. Defaults to `false`.\
            \ See the \n[Image generation guide](/docs/guides/image-generation) for\
            \ more information.\nThis parameter is only supported for `gpt-image-1`.\n"
        partial_images:
          $ref: '#/components/schemas/PartialImages'
        size:
          type: string
          enum:
          - auto
          - 1024x1024
          - 1536x1024
          - 1024x1536
          - 256x256
          - 512x512
          - 1792x1024
          - 1024x1792
          default: auto
          example: 1024x1024
          nullable: true
          description: The size of the generated images. Must be one of `1024x1024`,
            `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value)
            for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`,
            and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
        moderation:
          type: string
          enum:
          - low
          - auto
          default: auto
          example: low
          nullable: true
          description: Control the content-moderation level for images generated by
            `gpt-image-1`. Must be either `low` for less restrictive filtering or
            `auto` (default value).
        background:
          type: string
          enum:
          - transparent
          - opaque
          - auto
          default: auto
          example: transparent
          nullable: true
          description: "Allows to set transparency for the background of the generated\
            \ image(s). \nThis parameter is only supported for `gpt-image-1`. Must\
            \ be one of \n`transparent`, `opaque` or `auto` (default value). When\
            \ `auto` is used, the \nmodel will automatically determine the best background\
            \ for the image.\n\nIf `transparent`, the output format needs to support\
            \ transparency, so it \nshould be set to either `png` (default value)\
            \ or `webp`.\n"
        style:
          type: string
          enum:
          - vivid
          - natural
          default: vivid
          example: vivid
          nullable: true
          description: The style of the generated images. This parameter is only supported
            for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the
            model to lean towards generating hyper-real and dramatic images. Natural
            causes the model to produce more natural, less hyper-real looking images.
        user:
          type: string
          example: user-1234
          description: 'A unique identifier representing your end-user, which can
            help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

            '
      required:
      - prompt
    CreateImageVariationRequest:
      type: object
      properties:
        image:
          description: The image to use as the basis for the variation(s). Must be
            a valid PNG file, less than 4MB, and square.
          type: string
          format: binary
        model:
          anyOf:
          - type: string
          - type: string
            enum:
            - dall-e-2
            x-stainless-const: true
          x-oaiTypeLabel: string
          default: dall-e-2
          example: dall-e-2
          nullable: true
          description: The model to use for image generation. Only `dall-e-2` is supported
            at this time.
        n:
          type: integer
          minimum: 1
          maximum: 10
          default: 1
          example: 1
          nullable: true
          description: The number of images to generate. Must be between 1 and 10.
        response_format:
          type: string
          enum:
          - url
          - b64_json
          default: url
          example: url
          nullable: true
          description: The format in which the generated images are returned. Must
            be one of `url` or `b64_json`. URLs are only valid for 60 minutes after
            the image has been generated.
        size:
          type: string
          enum:
          - 256x256
          - 512x512
          - 1024x1024
          default: 1024x1024
          example: 1024x1024
          nullable: true
          description: The size of the generated images. Must be one of `256x256`,
            `512x512`, or `1024x1024`.
        user:
          type: string
          example: user-1234
          description: 'A unique identifier representing your end-user, which can
            help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

            '
      required:
      - image
    CreateMessageRequest:
      type: object
      additionalProperties: false
      required:
      - role
      - content
      properties:
        role:
          type: string
          enum:
          - user
          - assistant
          description: 'The role of the entity that is creating the message. Allowed
            values include:

            - `user`: Indicates the message is sent by an actual user and should be
            used in most cases to represent user-generated messages.

            - `assistant`: Indicates the message is generated by the assistant. Use
            this value to insert messages from the assistant into the conversation.

            '
        content:
          oneOf:
          - type: string
            description: The text contents of the message.
            title: Text content
          - type: array
            description: An array of content parts with a defined type, each can be
              of type `text` or images can be passed with `image_url` or `image_file`.
              Image types are only supported on [Vision-compatible models](/docs/models).
            title: Array of content parts
            items:
              oneOf:
              - $ref: '#/components/schemas/MessageContentImageFileObject'
              - $ref: '#/components/schemas/MessageContentImageUrlObject'
              - $ref: '#/components/schemas/MessageRequestContentTextObject'
            minItems: 1
        attachments:
          type: array
          items:
            type: object
            properties:
              file_id:
                type: string
                description: The ID of the file to attach to the message.
              tools:
                description: The tools to add this file to.
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/AssistantToolsCode'
                  - $ref: '#/components/schemas/AssistantToolsFileSearchTypeOnly'
          description: A list of files attached to the message, and the tools they
            should be added to.
          required:
          - file_id
          - tools
          nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
    CreateModelResponseProperties:
      allOf:
      - $ref: '#/components/schemas/ModelResponseProperties'
      - type: object
        properties:
          top_logprobs:
            description: 'An integer between 0 and 20 specifying the number of most
              likely tokens to

              return at each token position, each with an associated log probability.

              '
            type: integer
            minimum: 0
            maximum: 20
    CreateModerationRequest:
      type: object
      properties:
        input:
          description: 'Input (or inputs) to classify. Can be a single string, an
            array of strings, or

            an array of multi-modal input objects similar to other models.

            '
          oneOf:
          - type: string
            description: A string of text to classify for moderation.
            default: ''
            example: I want to kill them.
          - type: array
            description: An array of strings to classify for moderation.
            items:
              type: string
              default: ''
              example: I want to kill them.
          - type: array
            description: An array of multi-modal inputs to the moderation model.
            items:
              oneOf:
              - type: object
                description: An object describing an image to classify.
                properties:
                  type:
                    description: Always `image_url`.
                    type: string
                    enum:
                    - image_url
                    x-stainless-const: true
                  image_url:
                    type: object
                    description: Contains either an image URL or a data URL for a
                      base64 encoded image.
                    properties:
                      url:
                        type: string
                        description: Either a URL of the image or the base64 encoded
                          image data.
                        format: uri
                        example: https://example.com/image.jpg
                    required:
                    - url
                required:
                - type
                - image_url
              - type: object
                description: An object describing text to classify.
                properties:
                  type:
                    description: Always `text`.
                    type: string
                    enum:
                    - text
                    x-stainless-const: true
                  text:
                    description: A string of text to classify.
                    type: string
                    example: I want to kill them
                required:
                - type
                - text
        model:
          description: 'The content moderation model you would like to use. Learn
            more in

            [the moderation guide](/docs/guides/moderation), and learn about

            available models [here](/docs/models#moderation).

            '
          nullable: false
          default: omni-moderation-latest
          example: omni-moderation-2024-09-26
          anyOf:
          - type: string
          - type: string
            enum:
            - omni-moderation-latest
            - omni-moderation-2024-09-26
            - text-moderation-latest
            - text-moderation-stable
          x-oaiTypeLabel: string
      required:
      - input
    CreateModerationResponse:
      type: object
      description: Represents if a given text input is potentially harmful.
      properties:
        id:
          type: string
          description: The unique identifier for the moderation request.
        model:
          type: string
          description: The model used to generate the moderation results.
        results:
          type: array
          description: A list of moderation objects.
          items:
            type: object
            properties:
              flagged:
                type: boolean
                description: Whether any of the below categories are flagged.
              categories:
                type: object
                description: A list of the categories, and whether they are flagged
                  or not.
                properties:
                  hate:
                    type: boolean
                    description: Content that expresses, incites, or promotes hate
                      based on race, gender, ethnicity, religion, nationality, sexual
                      orientation, disability status, or caste. Hateful content aimed
                      at non-protected groups (e.g., chess players) is harassment.
                  hate/threatening:
                    type: boolean
                    description: Hateful content that also includes violence or serious
                      harm towards the targeted group based on race, gender, ethnicity,
                      religion, nationality, sexual orientation, disability status,
                      or caste.
                  harassment:
                    type: boolean
                    description: Content that expresses, incites, or promotes harassing
                      language towards any target.
                  harassment/threatening:
                    type: boolean
                    description: Harassment content that also includes violence or
                      serious harm towards any target.
                  illicit:
                    type: boolean
                    nullable: true
                    description: Content that includes instructions or advice that
                      facilitate the planning or execution of wrongdoing, or that
                      gives advice or instruction on how to commit illicit acts. For
                      example, "how to shoplift" would fit this category.
                  illicit/violent:
                    type: boolean
                    nullable: true
                    description: Content that includes instructions or advice that
                      facilitate the planning or execution of wrongdoing that also
                      includes violence, or that gives advice or instruction on the
                      procurement of any weapon.
                  self-harm:
                    type: boolean
                    description: Content that promotes, encourages, or depicts acts
                      of self-harm, such as suicide, cutting, and eating disorders.
                  self-harm/intent:
                    type: boolean
                    description: Content where the speaker expresses that they are
                      engaging or intend to engage in acts of self-harm, such as suicide,
                      cutting, and eating disorders.
                  self-harm/instructions:
                    type: boolean
                    description: Content that encourages performing acts of self-harm,
                      such as suicide, cutting, and eating disorders, or that gives
                      instructions or advice on how to commit such acts.
                  sexual:
                    type: boolean
                    description: Content meant to arouse sexual excitement, such as
                      the description of sexual activity, or that promotes sexual
                      services (excluding sex education and wellness).
                  sexual/minors:
                    type: boolean
                    description: Sexual content that includes an individual who is
                      under 18 years old.
                  violence:
                    type: boolean
                    description: Content that depicts death, violence, or physical
                      injury.
                  violence/graphic:
                    type: boolean
                    description: Content that depicts death, violence, or physical
                      injury in graphic detail.
                required:
                - hate
                - hate/threatening
                - harassment
                - harassment/threatening
                - illicit
                - illicit/violent
                - self-harm
                - self-harm/intent
                - self-harm/instructions
                - sexual
                - sexual/minors
                - violence
                - violence/graphic
              category_scores:
                type: object
                description: A list of the categories along with their scores as predicted
                  by model.
                properties:
                  hate:
                    type: number
                    description: The score for the category 'hate'.
                  hate/threatening:
                    type: number
                    description: The score for the category 'hate/threatening'.
                  harassment:
                    type: number
                    description: The score for the category 'harassment'.
                  harassment/threatening:
                    type: number
                    description: The score for the category 'harassment/threatening'.
                  illicit:
                    type: number
                    description: The score for the category 'illicit'.
                  illicit/violent:
                    type: number
                    description: The score for the category 'illicit/violent'.
                  self-harm:
                    type: number
                    description: The score for the category 'self-harm'.
                  self-harm/intent:
                    type: number
                    description: The score for the category 'self-harm/intent'.
                  self-harm/instructions:
                    type: number
                    description: The score for the category 'self-harm/instructions'.
                  sexual:
                    type: number
                    description: The score for the category 'sexual'.
                  sexual/minors:
                    type: number
                    description: The score for the category 'sexual/minors'.
                  violence:
                    type: number
                    description: The score for the category 'violence'.
                  violence/graphic:
                    type: number
                    description: The score for the category 'violence/graphic'.
                required:
                - hate
                - hate/threatening
                - harassment
                - harassment/threatening
                - illicit
                - illicit/violent
                - self-harm
                - self-harm/intent
                - self-harm/instructions
                - sexual
                - sexual/minors
                - violence
                - violence/graphic
              category_applied_input_types:
                type: object
                description: A list of the categories along with the input type(s)
                  that the score applies to.
                properties:
                  hate:
                    type: array
                    description: The applied input type(s) for the category 'hate'.
                    items:
                      type: string
                      enum:
                      - text
                      x-stainless-const: true
                  hate/threatening:
                    type: array
                    description: The applied input type(s) for the category 'hate/threatening'.
                    items:
                      type: string
                      enum:
                      - text
                      x-stainless-const: true
                  harassment:
                    type: array
                    description: The applied input type(s) for the category 'harassment'.
                    items:
                      type: string
                      enum:
                      - text
                      x-stainless-const: true
                  harassment/threatening:
                    type: array
                    description: The applied input type(s) for the category 'harassment/threatening'.
                    items:
                      type: string
                      enum:
                      - text
                      x-stainless-const: true
                  illicit:
                    type: array
                    description: The applied input type(s) for the category 'illicit'.
                    items:
                      type: string
                      enum:
                      - text
                      x-stainless-const: true
                  illicit/violent:
                    type: array
                    description: The applied input type(s) for the category 'illicit/violent'.
                    items:
                      type: string
                      enum:
                      - text
                      x-stainless-const: true
                  self-harm:
                    type: array
                    description: The applied input type(s) for the category 'self-harm'.
                    items:
                      type: string
                      enum:
                      - text
                      - image
                  self-harm/intent:
                    type: array
                    description: The applied input type(s) for the category 'self-harm/intent'.
                    items:
                      type: string
                      enum:
                      - text
                      - image
                  self-harm/instructions:
                    type: array
                    description: The applied input type(s) for the category 'self-harm/instructions'.
                    items:
                      type: string
                      enum:
                      - text
                      - image
                  sexual:
                    type: array
                    description: The applied input type(s) for the category 'sexual'.
                    items:
                      type: string
                      enum:
                      - text
                      - image
                  sexual/minors:
                    type: array
                    description: The applied input type(s) for the category 'sexual/minors'.
                    items:
                      type: string
                      enum:
                      - text
                      x-stainless-const: true
                  violence:
                    type: array
                    description: The applied input type(s) for the category 'violence'.
                    items:
                      type: string
                      enum:
                      - text
                      - image
                  violence/graphic:
                    type: array
                    description: The applied input type(s) for the category 'violence/graphic'.
                    items:
                      type: string
                      enum:
                      - text
                      - image
                required:
                - hate
                - hate/threatening
                - harassment
                - harassment/threatening
                - illicit
                - illicit/violent
                - self-harm
                - self-harm/intent
                - self-harm/instructions
                - sexual
                - sexual/minors
                - violence
                - violence/graphic
            required:
            - flagged
            - categories
            - category_scores
            - category_applied_input_types
      required:
      - id
      - model
      - results
    CreateResponse:
      allOf:
      - $ref: '#/components/schemas/CreateModelResponseProperties'
      - $ref: '#/components/schemas/ResponseProperties'
      - type: object
        properties:
          input:
            description: 'Text, image, or file inputs to the model, used to generate
              a response.


              Learn more:

              - [Text inputs and outputs](/docs/guides/text)

              - [Image inputs](/docs/guides/images)

              - [File inputs](/docs/guides/pdf-files)

              - [Conversation state](/docs/guides/conversation-state)

              - [Function calling](/docs/guides/function-calling)

              '
            oneOf:
            - type: string
              title: Text input
              description: 'A text input to the model, equivalent to a text input
                with the

                `user` role.

                '
            - type: array
              title: Input item list
              description: 'A list of one or many input items to the model, containing

                different content types.

                '
              items:
                $ref: '#/components/schemas/InputItem'
          include:
            type: array
            description: "Specify additional output data to include in the model response.\
              \ Currently\nsupported values are:\n- `code_interpreter_call.outputs`:\
              \ Includes the outputs of python code execution\n  in code interpreter\
              \ tool call items.\n- `computer_call_output.output.image_url`: Include\
              \ image urls from the computer call output.\n- `file_search_call.results`:\
              \ Include the search results of\n  the file search tool call.\n- `message.input_image.image_url`:\
              \ Include image urls from the input message.\n- `message.output_text.logprobs`:\
              \ Include logprobs with assistant messages.\n- `reasoning.encrypted_content`:\
              \ Includes an encrypted version of reasoning\n  tokens in reasoning\
              \ item outputs. This enables reasoning items to be used in\n  multi-turn\
              \ conversations when using the Responses API statelessly (like\n  when\
              \ the `store` parameter is set to `false`, or when an organization is\n\
              \  enrolled in the zero data retention program).\n"
            items:
              $ref: '#/components/schemas/Includable'
            nullable: true
          parallel_tool_calls:
            type: boolean
            description: 'Whether to allow the model to run tool calls in parallel.

              '
            default: true
            nullable: true
          store:
            type: boolean
            description: 'Whether to store the generated model response for later
              retrieval via

              API.

              '
            default: true
            nullable: true
          instructions:
            type: string
            nullable: true
            description: 'A system (or developer) message inserted into the model''s
              context.


              When using along with `previous_response_id`, the instructions from
              a previous

              response will not be carried over to the next response. This makes it
              simple

              to swap out system (or developer) messages in new responses.

              '
          stream:
            description: 'If set to true, the model response data will be streamed
              to the client

              as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).

              See the [Streaming section below](/docs/api-reference/responses-streaming)

              for more information.

              '
            type: boolean
            nullable: true
            default: false
    CreateRunRequest:
      type: object
      additionalProperties: false
      properties:
        assistant_id:
          description: The ID of the [assistant](/docs/api-reference/assistants) to
            use to execute this run.
          type: string
        model:
          description: The ID of the [Model](/docs/api-reference/models) to be used
            to execute this run. If a value is provided here, it will override the
            model associated with the assistant. If not, the model associated with
            the assistant will be used.
          example: gpt-4o
          anyOf:
          - type: string
          - $ref: '#/components/schemas/AssistantSupportedModels'
          x-oaiTypeLabel: string
          nullable: true
        reasoning_effort:
          $ref: '#/components/schemas/ReasoningEffort'
        instructions:
          description: Overrides the [instructions](/docs/api-reference/assistants/createAssistant)
            of the assistant. This is useful for modifying the behavior on a per-run
            basis.
          type: string
          nullable: true
        additional_instructions:
          description: Appends additional instructions at the end of the instructions
            for the run. This is useful for modifying the behavior on a per-run basis
            without overriding other instructions.
          type: string
          nullable: true
        additional_messages:
          description: Adds additional messages to the thread before creating the
            run.
          type: array
          items:
            $ref: '#/components/schemas/CreateMessageRequest'
          nullable: true
        tools:
          description: Override the tools the assistant can use for this run. This
            is useful for modifying the behavior on a per-run basis.
          nullable: true
          type: array
          maxItems: 20
          items:
            oneOf:
            - $ref: '#/components/schemas/AssistantToolsCode'
            - $ref: '#/components/schemas/AssistantToolsFileSearch'
            - $ref: '#/components/schemas/AssistantToolsFunction'
        metadata:
          $ref: '#/components/schemas/Metadata'
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            '
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: 'An alternative to sampling with temperature, called nucleus
            sampling, where the model considers the results of the tokens with top_p
            probability mass. So 0.1 means only the tokens comprising the top 10%
            probability mass are considered.


            We generally recommend altering this or temperature but not both.

            '
        stream:
          type: boolean
          nullable: true
          description: 'If `true`, returns a stream of events that happen during the
            Run as server-sent events, terminating when the Run enters a terminal
            state with a `data: [DONE]` message.

            '
        max_prompt_tokens:
          type: integer
          nullable: true
          description: 'The maximum number of prompt tokens that may be used over
            the course of the run. The run will make a best effort to use only the
            number of prompt tokens specified, across multiple turns of the run. If
            the run exceeds the number of prompt tokens specified, the run will end
            with status `incomplete`. See `incomplete_details` for more info.

            '
          minimum: 256
        max_completion_tokens:
          type: integer
          nullable: true
          description: 'The maximum number of completion tokens that may be used over
            the course of the run. The run will make a best effort to use only the
            number of completion tokens specified, across multiple turns of the run.
            If the run exceeds the number of completion tokens specified, the run
            will end with status `incomplete`. See `incomplete_details` for more info.

            '
          minimum: 256
        truncation_strategy:
          allOf:
          - $ref: '#/components/schemas/TruncationObject'
          - nullable: true
        tool_choice:
          allOf:
          - $ref: '#/components/schemas/AssistantsApiToolChoiceOption'
          - nullable: true
        parallel_tool_calls:
          $ref: '#/components/schemas/ParallelToolCalls'
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
      required:
      - assistant_id
    CreateSpeechRequest:
      type: object
      additionalProperties: false
      properties:
        model:
          description: 'One of the available [TTS models](/docs/models#tts): `tts-1`,
            `tts-1-hd` or `gpt-4o-mini-tts`.

            '
          anyOf:
          - type: string
          - type: string
            enum:
            - tts-1
            - tts-1-hd
            - gpt-4o-mini-tts
          x-oaiTypeLabel: string
        input:
          type: string
          description: The text to generate audio for. The maximum length is 4096
            characters.
          maxLength: 4096
        instructions:
          type: string
          description: Control the voice of your generated audio with additional instructions.
            Does not work with `tts-1` or `tts-1-hd`.
          maxLength: 4096
        voice:
          description: The voice to use when generating the audio. Supported voices
            are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`,
            `sage`, `shimmer`, and `verse`. Previews of the voices are available in
            the [Text to speech guide](/docs/guides/text-to-speech#voice-options).
          $ref: '#/components/schemas/VoiceIdsShared'
        response_format:
          description: The format to audio in. Supported formats are `mp3`, `opus`,
            `aac`, `flac`, `wav`, and `pcm`.
          default: mp3
          type: string
          enum:
          - mp3
          - opus
          - aac
          - flac
          - wav
          - pcm
        speed:
          description: The speed of the generated audio. Select a value from `0.25`
            to `4.0`. `1.0` is the default.
          type: number
          default: 1
          minimum: 0.25
          maximum: 4
        stream_format:
          description: The format to stream the audio in. Supported formats are `sse`
            and `audio`. `sse` is not supported for `tts-1` or `tts-1-hd`.
          type: string
          default: audio
          enum:
          - sse
          - audio
      required:
      - model
      - input
      - voice
    CreateSpeechResponseStreamEvent:
      anyOf:
      - $ref: '#/components/schemas/SpeechAudioDeltaEvent'
      - $ref: '#/components/schemas/SpeechAudioDoneEvent'
      discriminator:
        propertyName: type
    CreateThreadAndRunRequest:
      type: object
      additionalProperties: false
      properties:
        assistant_id:
          description: The ID of the [assistant](/docs/api-reference/assistants) to
            use to execute this run.
          type: string
        thread:
          $ref: '#/components/schemas/CreateThreadRequest'
        model:
          description: The ID of the [Model](/docs/api-reference/models) to be used
            to execute this run. If a value is provided here, it will override the
            model associated with the assistant. If not, the model associated with
            the assistant will be used.
          example: gpt-4o
          anyOf:
          - type: string
          - type: string
            enum:
            - gpt-4.1
            - gpt-4.1-mini
            - gpt-4.1-nano
            - gpt-4.1-2025-04-14
            - gpt-4.1-mini-2025-04-14
            - gpt-4.1-nano-2025-04-14
            - gpt-4o
            - gpt-4o-2024-11-20
            - gpt-4o-2024-08-06
            - gpt-4o-2024-05-13
            - gpt-4o-mini
            - gpt-4o-mini-2024-07-18
            - gpt-4.5-preview
            - gpt-4.5-preview-2025-02-27
            - gpt-4-turbo
            - gpt-4-turbo-2024-04-09
            - gpt-4-0125-preview
            - gpt-4-turbo-preview
            - gpt-4-1106-preview
            - gpt-4-vision-preview
            - gpt-4
            - gpt-4-0314
            - gpt-4-0613
            - gpt-4-32k
            - gpt-4-32k-0314
            - gpt-4-32k-0613
            - gpt-3.5-turbo
            - gpt-3.5-turbo-16k
            - gpt-3.5-turbo-0613
            - gpt-3.5-turbo-1106
            - gpt-3.5-turbo-0125
            - gpt-3.5-turbo-16k-0613
          x-oaiTypeLabel: string
          nullable: true
        instructions:
          description: Override the default system message of the assistant. This
            is useful for modifying the behavior on a per-run basis.
          type: string
          nullable: true
        tools:
          description: Override the tools the assistant can use for this run. This
            is useful for modifying the behavior on a per-run basis.
          nullable: true
          type: array
          maxItems: 20
          items:
            oneOf:
            - $ref: '#/components/schemas/AssistantToolsCode'
            - $ref: '#/components/schemas/AssistantToolsFileSearch'
            - $ref: '#/components/schemas/AssistantToolsFunction'
        tool_resources:
          type: object
          description: 'A set of resources that are used by the assistant''s tools.
            The resources are specific to the type of tool. For example, the `code_interpreter`
            tool requires a list of file IDs, while the `file_search` tool requires
            a list of vector store IDs.

            '
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: 'A list of [file](/docs/api-reference/files) IDs made
                    available to the `code_interpreter` tool. There can be a maximum
                    of 20 files associated with the tool.

                    '
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: 'The ID of the [vector store](/docs/api-reference/vector-stores/object)
                    attached to this assistant. There can be a maximum of 1 vector
                    store attached to the assistant.

                    '
                  maxItems: 1
                  items:
                    type: string
          nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            '
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: 'An alternative to sampling with temperature, called nucleus
            sampling, where the model considers the results of the tokens with top_p
            probability mass. So 0.1 means only the tokens comprising the top 10%
            probability mass are considered.


            We generally recommend altering this or temperature but not both.

            '
        stream:
          type: boolean
          nullable: true
          description: 'If `true`, returns a stream of events that happen during the
            Run as server-sent events, terminating when the Run enters a terminal
            state with a `data: [DONE]` message.

            '
        max_prompt_tokens:
          type: integer
          nullable: true
          description: 'The maximum number of prompt tokens that may be used over
            the course of the run. The run will make a best effort to use only the
            number of prompt tokens specified, across multiple turns of the run. If
            the run exceeds the number of prompt tokens specified, the run will end
            with status `incomplete`. See `incomplete_details` for more info.

            '
          minimum: 256
        max_completion_tokens:
          type: integer
          nullable: true
          description: 'The maximum number of completion tokens that may be used over
            the course of the run. The run will make a best effort to use only the
            number of completion tokens specified, across multiple turns of the run.
            If the run exceeds the number of completion tokens specified, the run
            will end with status `incomplete`. See `incomplete_details` for more info.

            '
          minimum: 256
        truncation_strategy:
          allOf:
          - $ref: '#/components/schemas/TruncationObject'
          - nullable: true
        tool_choice:
          allOf:
          - $ref: '#/components/schemas/AssistantsApiToolChoiceOption'
          - nullable: true
        parallel_tool_calls:
          $ref: '#/components/schemas/ParallelToolCalls'
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
      required:
      - assistant_id
    CreateThreadRequest:
      type: object
      description: "Options to create a new thread. If no thread is provided when\
        \ running a \nrequest, an empty thread will be created.\n"
      additionalProperties: false
      properties:
        messages:
          description: A list of [messages](/docs/api-reference/messages) to start
            the thread with.
          type: array
          items:
            $ref: '#/components/schemas/CreateMessageRequest'
        tool_resources:
          type: object
          description: 'A set of resources that are made available to the assistant''s
            tools in this thread. The resources are specific to the type of tool.
            For example, the `code_interpreter` tool requires a list of file IDs,
            while the `file_search` tool requires a list of vector store IDs.

            '
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: 'A list of [file](/docs/api-reference/files) IDs made
                    available to the `code_interpreter` tool. There can be a maximum
                    of 20 files associated with the tool.

                    '
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: 'The [vector store](/docs/api-reference/vector-stores/object)
                    attached to this thread. There can be a maximum of 1 vector store
                    attached to the thread.

                    '
                  maxItems: 1
                  items:
                    type: string
                vector_stores:
                  type: array
                  description: 'A helper to create a [vector store](/docs/api-reference/vector-stores/object)
                    with file_ids and attach it to this thread. There can be a maximum
                    of 1 vector store attached to the thread.

                    '
                  maxItems: 1
                  items:
                    type: object
                    properties:
                      file_ids:
                        type: array
                        description: 'A list of [file](/docs/api-reference/files)
                          IDs to add to the vector store. There can be a maximum of
                          10000 files in a vector store.

                          '
                        maxItems: 10000
                        items:
                          type: string
                      chunking_strategy:
                        type: object
                        description: The chunking strategy used to chunk the file(s).
                          If not set, will use the `auto` strategy.
                        oneOf:
                        - type: object
                          title: Auto Chunking Strategy
                          description: The default strategy. This strategy currently
                            uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens`
                            of `400`.
                          additionalProperties: false
                          properties:
                            type:
                              type: string
                              description: Always `auto`.
                              enum:
                              - auto
                              x-stainless-const: true
                          required:
                          - type
                        - type: object
                          title: Static Chunking Strategy
                          additionalProperties: false
                          properties:
                            type:
                              type: string
                              description: Always `static`.
                              enum:
                              - static
                              x-stainless-const: true
                            static:
                              type: object
                              additionalProperties: false
                              properties:
                                max_chunk_size_tokens:
                                  type: integer
                                  minimum: 100
                                  maximum: 4096
                                  description: The maximum number of tokens in each
                                    chunk. The default value is `800`. The minimum
                                    value is `100` and the maximum value is `4096`.
                                chunk_overlap_tokens:
                                  type: integer
                                  description: 'The number of tokens that overlap
                                    between chunks. The default value is `400`.


                                    Note that the overlap must not exceed half of
                                    `max_chunk_size_tokens`.

                                    '
                              required:
                              - max_chunk_size_tokens
                              - chunk_overlap_tokens
                          required:
                          - type
                          - static
                      metadata:
                        $ref: '#/components/schemas/Metadata'
              oneOf:
              - required:
                - vector_store_ids
              - required:
                - vector_stores
          nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
    CreateTranscriptionRequest:
      type: object
      additionalProperties: false
      properties:
        file:
          description: 'The audio file object (not file name) to transcribe, in one
            of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.

            '
          type: string
          x-oaiTypeLabel: file
          format: binary
        model:
          description: 'ID of the model to use. The options are `gpt-4o-transcribe`,
            `gpt-4o-mini-transcribe`, and `whisper-1` (which is powered by our open
            source Whisper V2 model).

            '
          example: gpt-4o-transcribe
          anyOf:
          - type: string
          - type: string
            enum:
            - whisper-1
            - gpt-4o-transcribe
            - gpt-4o-mini-transcribe
            x-stainless-const: true
          x-oaiTypeLabel: string
        language:
          description: 'The language of the input audio. Supplying the input language
            in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
            (e.g. `en`) format will improve accuracy and latency.

            '
          type: string
        prompt:
          description: 'An optional text to guide the model''s style or continue a
            previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting)
            should match the audio language.

            '
          type: string
        response_format:
          $ref: '#/components/schemas/AudioResponseFormat'
        temperature:
          description: 'The sampling temperature, between 0 and 1. Higher values like
            0.8 will make the output more random, while lower values like 0.2 will
            make it more focused and deterministic. If set to 0, the model will use
            [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically
            increase the temperature until certain thresholds are hit.

            '
          type: number
          default: 0
        include[]:
          description: "Additional information to include in the transcription response.\
            \ \n`logprobs` will return the log probabilities of the tokens in the\
            \ \nresponse to understand the model's confidence in the transcription.\
            \ \n`logprobs` only works with response_format set to `json` and only\
            \ with \nthe models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`.\n"
          type: array
          items:
            $ref: '#/components/schemas/TranscriptionInclude'
        timestamp_granularities[]:
          description: 'The timestamp granularities to populate for this transcription.
            `response_format` must be set `verbose_json` to use timestamp granularities.
            Either or both of these options are supported: `word`, or `segment`. Note:
            There is no additional latency for segment timestamps, but generating
            word timestamps incurs additional latency.

            '
          type: array
          items:
            type: string
            enum:
            - word
            - segment
          default:
          - segment
        stream:
          description: "If set to true, the model response data will be streamed to\
            \ the client\nas it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\
            \ \nSee the [Streaming section of the Speech-to-Text guide](/docs/guides/speech-to-text?lang=curl#streaming-transcriptions)\n\
            for more information.\n\nNote: Streaming is not supported for the `whisper-1`\
            \ model and will be ignored.\n"
          type: boolean
          nullable: true
          default: false
        chunking_strategy:
          description: Controls how the audio is cut into chunks. When set to `"auto"`,
            the server first normalizes loudness and then uses voice activity detection
            (VAD) to choose boundaries. `server_vad` object can be provided to tweak
            VAD detection parameters manually. If unset, the audio is transcribed
            as a single block.
          anyOf:
          - type: string
            enum:
            - auto
            default:
            - auto
            description: 'Automatically set chunking parameters based on the audio.
              Must be set to `"auto"`.

              '
            x-stainless-const: true
          - $ref: '#/components/schemas/VadConfig'
          nullable: true
          x-oaiTypeLabel: string
      required:
      - file
      - model
    CreateTranscriptionResponseJson:
      type: object
      description: Represents a transcription response returned by model, based on
        the provided input.
      properties:
        text:
          type: string
          description: The transcribed text.
        logprobs:
          type: array
          optional: true
          description: 'The log probabilities of the tokens in the transcription.
            Only returned with the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`
            if `logprobs` is added to the `include` array.

            '
          items:
            type: object
            properties:
              token:
                type: string
                description: The token in the transcription.
              logprob:
                type: number
                description: The log probability of the token.
              bytes:
                type: array
                items:
                  type: number
                description: The bytes of the token.
        usage:
          type: object
          description: Token usage statistics for the request.
          oneOf:
          - $ref: '#/components/schemas/TranscriptTextUsageTokens'
            title: Token Usage
          - $ref: '#/components/schemas/TranscriptTextUsageDuration'
            title: Duration Usage
      required:
      - text
    CreateTranscriptionResponseStreamEvent:
      anyOf:
      - $ref: '#/components/schemas/TranscriptTextDeltaEvent'
      - $ref: '#/components/schemas/TranscriptTextDoneEvent'
      discriminator:
        propertyName: type
    CreateTranscriptionResponseVerboseJson:
      type: object
      description: Represents a verbose json transcription response returned by model,
        based on the provided input.
      properties:
        language:
          type: string
          description: The language of the input audio.
        duration:
          type: number
          description: The duration of the input audio.
        text:
          type: string
          description: The transcribed text.
        words:
          type: array
          description: Extracted words and their corresponding timestamps.
          items:
            $ref: '#/components/schemas/TranscriptionWord'
        segments:
          type: array
          description: Segments of the transcribed text and their corresponding details.
          items:
            $ref: '#/components/schemas/TranscriptionSegment'
        usage:
          $ref: '#/components/schemas/TranscriptTextUsageDuration'
      required:
      - language
      - duration
      - text
    CreateTranslationRequest:
      type: object
      additionalProperties: false
      properties:
        file:
          description: 'The audio file object (not file name) translate, in one of
            these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.

            '
          type: string
          x-oaiTypeLabel: file
          format: binary
        model:
          description: 'ID of the model to use. Only `whisper-1` (which is powered
            by our open source Whisper V2 model) is currently available.

            '
          example: whisper-1
          anyOf:
          - type: string
          - type: string
            enum:
            - whisper-1
            x-stainless-const: true
          x-oaiTypeLabel: string
        prompt:
          description: 'An optional text to guide the model''s style or continue a
            previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting)
            should be in English.

            '
          type: string
        response_format:
          description: 'The format of the output, in one of these options: `json`,
            `text`, `srt`, `verbose_json`, or `vtt`.

            '
          type: string
          enum:
          - json
          - text
          - srt
          - verbose_json
          - vtt
          default: json
        temperature:
          description: 'The sampling temperature, between 0 and 1. Higher values like
            0.8 will make the output more random, while lower values like 0.2 will
            make it more focused and deterministic. If set to 0, the model will use
            [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically
            increase the temperature until certain thresholds are hit.

            '
          type: number
          default: 0
      required:
      - file
      - model
    CreateTranslationResponseJson:
      type: object
      properties:
        text:
          type: string
      required:
      - text
    CreateTranslationResponseVerboseJson:
      type: object
      properties:
        language:
          type: string
          description: The language of the output translation (always `english`).
        duration:
          type: number
          description: The duration of the input audio.
        text:
          type: string
          description: The translated text.
        segments:
          type: array
          description: Segments of the translated text and their corresponding details.
          items:
            $ref: '#/components/schemas/TranscriptionSegment'
      required:
      - language
      - duration
      - text
    CreateUploadRequest:
      type: object
      additionalProperties: false
      properties:
        filename:
          description: 'The name of the file to upload.

            '
          type: string
        purpose:
          description: 'The intended purpose of the uploaded file.


            See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).

            '
          type: string
          enum:
          - assistants
          - batch
          - fine-tune
          - vision
        bytes:
          description: 'The number of bytes in the file you are uploading.

            '
          type: integer
        mime_type:
          description: 'The MIME type of the file.


            This must fall within the supported MIME types for your file purpose.
            See the supported MIME types for assistants and vision.

            '
          type: string
      required:
      - filename
      - purpose
      - bytes
      - mime_type
    CreateVectorStoreFileBatchRequest:
      type: object
      additionalProperties: false
      properties:
        file_ids:
          description: A list of [File](/docs/api-reference/files) IDs that the vector
            store should use. Useful for tools like `file_search` that can access
            files.
          type: array
          minItems: 1
          maxItems: 500
          items:
            type: string
        chunking_strategy:
          $ref: '#/components/schemas/ChunkingStrategyRequestParam'
        attributes:
          $ref: '#/components/schemas/VectorStoreFileAttributes'
      required:
      - file_ids
    CreateVectorStoreFileRequest:
      type: object
      additionalProperties: false
      properties:
        file_id:
          description: A [File](/docs/api-reference/files) ID that the vector store
            should use. Useful for tools like `file_search` that can access files.
          type: string
        chunking_strategy:
          $ref: '#/components/schemas/ChunkingStrategyRequestParam'
        attributes:
          $ref: '#/components/schemas/VectorStoreFileAttributes'
      required:
      - file_id
    CreateVectorStoreRequest:
      type: object
      additionalProperties: false
      properties:
        file_ids:
          description: A list of [File](/docs/api-reference/files) IDs that the vector
            store should use. Useful for tools like `file_search` that can access
            files.
          type: array
          maxItems: 500
          items:
            type: string
        name:
          description: The name of the vector store.
          type: string
        expires_after:
          $ref: '#/components/schemas/VectorStoreExpirationAfter'
        chunking_strategy:
          type: object
          description: The chunking strategy used to chunk the file(s). If not set,
            will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
          oneOf:
          - $ref: '#/components/schemas/AutoChunkingStrategyRequestParam'
          - $ref: '#/components/schemas/StaticChunkingStrategyRequestParam'
        metadata:
          $ref: '#/components/schemas/Metadata'
    DeleteAssistantResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
          - assistant.deleted
          x-stainless-const: true
      required:
      - id
      - object
      - deleted
    DeleteCertificateResponse:
      type: object
      properties:
        object:
          type: string
          description: The object type, must be `certificate.deleted`.
          enum:
          - certificate.deleted
          x-stainless-const: true
        id:
          type: string
          description: The ID of the certificate that was deleted.
      required:
      - object
      - id
    DeleteFileResponse:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
          enum:
          - file
          x-stainless-const: true
        deleted:
          type: boolean
      required:
      - id
      - object
      - deleted
    DeleteFineTuningCheckpointPermissionResponse:
      type: object
      properties:
        id:
          type: string
          description: The ID of the fine-tuned model checkpoint permission that was
            deleted.
        object:
          type: string
          description: The object type, which is always "checkpoint.permission".
          enum:
          - checkpoint.permission
          x-stainless-const: true
        deleted:
          type: boolean
          description: Whether the fine-tuned model checkpoint permission was successfully
            deleted.
      required:
      - id
      - object
      - deleted
    DeleteMessageResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
          - thread.message.deleted
          x-stainless-const: true
      required:
      - id
      - object
      - deleted
    DeleteModelResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
      required:
      - id
      - object
      - deleted
    DeleteThreadResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
          - thread.deleted
          x-stainless-const: true
      required:
      - id
      - object
      - deleted
    DeleteVectorStoreFileResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
          - vector_store.file.deleted
          x-stainless-const: true
      required:
      - id
      - object
      - deleted
    DeleteVectorStoreResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
          - vector_store.deleted
          x-stainless-const: true
      required:
      - id
      - object
      - deleted
    DoneEvent:
      type: object
      properties:
        event:
          type: string
          enum:
          - done
          x-stainless-const: true
        data:
          type: string
          enum:
          - '[DONE]'
          x-stainless-const: true
      required:
      - event
      - data
      description: Occurs when a stream ends.
    DoubleClick:
      type: object
      title: DoubleClick
      description: 'A double click action.

        '
      properties:
        type:
          type: string
          enum:
          - double_click
          default: double_click
          description: "Specifies the event type. For a double click action, this\
            \ property is \nalways set to `double_click`.\n"
          x-stainless-const: true
        x:
          type: integer
          description: 'The x-coordinate where the double click occurred.

            '
        y:
          type: integer
          description: 'The y-coordinate where the double click occurred.

            '
      required:
      - type
      - x
      - y
    Drag:
      type: object
      title: Drag
      description: 'A drag action.

        '
      properties:
        type:
          type: string
          enum:
          - drag
          default: drag
          description: "Specifies the event type. For a drag action, this property\
            \ is \nalways set to `drag`.\n"
          x-stainless-const: true
        path:
          type: array
          description: "An array of coordinates representing the path of the drag\
            \ action. Coordinates will appear as an array\nof objects, eg\n```\n[\n\
            \  { x: 100, y: 200 },\n  { x: 200, y: 300 }\n]\n```\n"
          items:
            title: Drag path coordinates
            description: 'A series of x/y coordinate pairs in the drag path.

              '
            $ref: '#/components/schemas/Coordinate'
      required:
      - type
      - path
    EasyInputMessage:
      type: object
      title: Input message
      description: 'A message input to the model with a role indicating instruction
        following

        hierarchy. Instructions given with the `developer` or `system` role take

        precedence over instructions given with the `user` role. Messages with the

        `assistant` role are presumed to have been generated by the model in previous

        interactions.

        '
      properties:
        role:
          type: string
          description: 'The role of the message input. One of `user`, `assistant`,
            `system`, or

            `developer`.

            '
          enum:
          - user
          - assistant
          - system
          - developer
        content:
          description: 'Text, image, or audio input to the model, used to generate
            a response.

            Can also contain previous assistant responses.

            '
          oneOf:
          - type: string
            title: Text input
            description: 'A text input to the model.

              '
          - $ref: '#/components/schemas/InputMessageContentList'
        type:
          type: string
          description: 'The type of the message input. Always `message`.

            '
          enum:
          - message
          x-stainless-const: true
      required:
      - role
      - content
    Embedding:
      type: object
      description: 'Represents an embedding vector returned by embedding endpoint.

        '
      properties:
        index:
          type: integer
          description: The index of the embedding in the list of embeddings.
        embedding:
          type: array
          description: 'The embedding vector, which is a list of floats. The length
            of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).

            '
          items:
            type: number
            format: float
        object:
          type: string
          description: The object type, which is always "embedding".
          enum:
          - embedding
          x-stainless-const: true
      required:
      - index
      - object
      - embedding
    Error:
      type: object
      properties:
        code:
          type: string
          nullable: true
        message:
          type: string
          nullable: false
        param:
          type: string
          nullable: true
        type:
          type: string
          nullable: false
      required:
      - type
      - message
      - param
      - code
    ErrorEvent:
      type: object
      properties:
        event:
          type: string
          enum:
          - error
          x-stainless-const: true
        data:
          $ref: '#/components/schemas/Error'
      required:
      - event
      - data
      description: Occurs when an [error](/docs/guides/error-codes#api-errors) occurs.
        This can happen due to an internal server error or a timeout.
    ErrorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
      required:
      - error
    Eval:
      type: object
      title: Eval
      description: "An Eval object with a data source config and testing criteria.\n\
        An Eval represents a task to be done for your LLM integration.\nLike:\n -\
        \ Improve the quality of my chatbot\n - See how well my chatbot handles customer\
        \ support\n - Check if o4-mini is better at my usecase than gpt-4o\n"
      properties:
        object:
          type: string
          enum:
          - eval
          default: eval
          description: The object type.
          x-stainless-const: true
        id:
          type: string
          description: Unique identifier for the evaluation.
        name:
          type: string
          description: The name of the evaluation.
          example: Chatbot effectiveness Evaluation
        data_source_config:
          type: object
          description: Configuration of data sources used in runs of the evaluation.
          oneOf:
          - $ref: '#/components/schemas/EvalCustomDataSourceConfig'
          - $ref: '#/components/schemas/EvalLogsDataSourceConfig'
          - $ref: '#/components/schemas/EvalStoredCompletionsDataSourceConfig'
        testing_criteria:
          default: eval
          description: A list of testing criteria.
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/EvalGraderLabelModel'
            - $ref: '#/components/schemas/EvalGraderStringCheck'
            - $ref: '#/components/schemas/EvalGraderTextSimilarity'
            - $ref: '#/components/schemas/EvalGraderPython'
            - $ref: '#/components/schemas/EvalGraderScoreModel'
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the eval was created.
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
      - id
      - data_source_config
      - object
      - testing_criteria
      - name
      - created_at
      - metadata
    EvalApiError:
      type: object
      title: EvalApiError
      description: 'An object representing an error response from the Eval API.

        '
      properties:
        code:
          type: string
          description: The error code.
        message:
          type: string
          description: The error message.
      required:
      - code
      - message
    EvalCustomDataSourceConfig:
      type: object
      title: CustomDataSourceConfig
      description: 'A CustomDataSourceConfig which specifies the schema of your `item`
        and optionally `sample` namespaces.

        The response schema defines the shape of the data that will be:

        - Used to define your testing criteria and

        - What data is required when creating a run

        '
      properties:
        type:
          type: string
          enum:
          - custom
          default: custom
          description: The type of data source. Always `custom`.
          x-stainless-const: true
        schema:
          type: object
          description: 'The json schema for the run data source items.

            Learn how to build JSON schemas [here](https://json-schema.org/).

            '
          additionalProperties: true
          example: "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"item\"\
            : {\n      \"type\": \"object\",\n      \"properties\": {\n        \"\
            label\": {\"type\": \"string\"},\n      },\n      \"required\": [\"label\"\
            ]\n    }\n  },\n  \"required\": [\"item\"]\n}\n"
      required:
      - type
      - schema
    EvalGraderLabelModel:
      type: object
      title: LabelModelGrader
      allOf:
      - $ref: '#/components/schemas/GraderLabelModel'
    EvalGraderPython:
      type: object
      title: PythonGrader
      allOf:
      - $ref: '#/components/schemas/GraderPython'
      - type: object
        properties:
          pass_threshold:
            type: number
            description: The threshold for the score.
    EvalGraderScoreModel:
      type: object
      title: ScoreModelGrader
      allOf:
      - $ref: '#/components/schemas/GraderScoreModel'
      - type: object
        properties:
          pass_threshold:
            type: number
            description: The threshold for the score.
    EvalGraderStringCheck:
      type: object
      title: StringCheckGrader
      allOf:
      - $ref: '#/components/schemas/GraderStringCheck'
    EvalGraderTextSimilarity:
      type: object
      title: TextSimilarityGrader
      allOf:
      - $ref: '#/components/schemas/GraderTextSimilarity'
      - type: object
        properties:
          pass_threshold:
            type: number
            description: The threshold for the score.
        required:
        - pass_threshold
    EvalItem:
      type: object
      title: Eval message object
      description: 'A message input to the model with a role indicating instruction
        following

        hierarchy. Instructions given with the `developer` or `system` role take

        precedence over instructions given with the `user` role. Messages with the

        `assistant` role are presumed to have been generated by the model in previous

        interactions.

        '
      properties:
        role:
          type: string
          description: 'The role of the message input. One of `user`, `assistant`,
            `system`, or

            `developer`.

            '
          enum:
          - user
          - assistant
          - system
          - developer
        content:
          description: 'Inputs to the model - can contain template strings.

            '
          oneOf:
          - type: string
            title: Text input
            description: 'A text input to the model.

              '
          - $ref: '#/components/schemas/InputTextContent'
          - type: object
            title: Output text
            description: 'A text output from the model.

              '
            properties:
              type:
                type: string
                description: 'The type of the output text. Always `output_text`.

                  '
                enum:
                - output_text
                x-stainless-const: true
              text:
                type: string
                description: 'The text output from the model.

                  '
            required:
            - type
            - text
          - type: object
            title: Input image
            description: 'An image input to the model.

              '
            properties:
              type:
                type: string
                description: 'The type of the image input. Always `input_image`.

                  '
                enum:
                - input_image
                x-stainless-const: true
              image_url:
                type: string
                description: 'The URL of the image input.

                  '
              detail:
                type: string
                description: 'The detail level of the image to be sent to the model.
                  One of `high`, `low`, or `auto`. Defaults to `auto`.

                  '
            required:
            - type
            - image_url
          - type: array
            title: An array of Input text and Input image
            description: 'A list of inputs, each of which may be either an input text
              or input image object.

              '
        type:
          type: string
          description: 'The type of the message input. Always `message`.

            '
          enum:
          - message
          x-stainless-const: true
      required:
      - role
      - content
    EvalJsonlFileContentSource:
      type: object
      title: EvalJsonlFileContentSource
      properties:
        type:
          type: string
          enum:
          - file_content
          default: file_content
          description: The type of jsonl source. Always `file_content`.
          x-stainless-const: true
        content:
          type: array
          items:
            type: object
            properties:
              item:
                type: object
                additionalProperties: true
              sample:
                type: object
                additionalProperties: true
            required:
            - item
          description: The content of the jsonl file.
      required:
      - type
      - content
    EvalJsonlFileIdSource:
      type: object
      title: EvalJsonlFileIdSource
      properties:
        type:
          type: string
          enum:
          - file_id
          default: file_id
          description: The type of jsonl source. Always `file_id`.
          x-stainless-const: true
        id:
          type: string
          description: The identifier of the file.
      required:
      - type
      - id
    EvalList:
      type: object
      title: EvalList
      description: 'An object representing a list of evals.

        '
      properties:
        object:
          type: string
          enum:
          - list
          default: list
          description: 'The type of this object. It is always set to "list".

            '
          x-stainless-const: true
        data:
          type: array
          description: 'An array of eval objects.

            '
          items:
            $ref: '#/components/schemas/Eval'
        first_id:
          type: string
          description: The identifier of the first eval in the data array.
        last_id:
          type: string
          description: The identifier of the last eval in the data array.
        has_more:
          type: boolean
          description: Indicates whether there are more evals available.
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    EvalLogsDataSourceConfig:
      type: object
      title: LogsDataSourceConfig
      description: 'A LogsDataSourceConfig which specifies the metadata property of
        your logs query.

        This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.

        The schema returned by this data source config is used to defined what variables
        are available in your evals.

        `item` and `sample` are both defined when using this data source config.

        '
      properties:
        type:
          type: string
          enum:
          - logs
          default: logs
          description: The type of data source. Always `logs`.
          x-stainless-const: true
        metadata:
          $ref: '#/components/schemas/Metadata'
        schema:
          type: object
          description: 'The json schema for the run data source items.

            Learn how to build JSON schemas [here](https://json-schema.org/).

            '
          additionalProperties: true
      required:
      - type
      - schema
    EvalResponsesSource:
      type: object
      title: EvalResponsesSource
      description: 'A EvalResponsesSource object describing a run data source configuration.

        '
      properties:
        type:
          type: string
          enum:
          - responses
          description: The type of run data source. Always `responses`.
        metadata:
          type: object
          nullable: true
          description: Metadata filter for the responses. This is a query parameter
            used to select responses.
        model:
          type: string
          nullable: true
          description: The name of the model to find responses for. This is a query
            parameter used to select responses.
        instructions_search:
          type: string
          nullable: true
          description: Optional string to search the 'instructions' field. This is
            a query parameter used to select responses.
        created_after:
          type: integer
          minimum: 0
          nullable: true
          description: Only include items created after this timestamp (inclusive).
            This is a query parameter used to select responses.
        created_before:
          type: integer
          minimum: 0
          nullable: true
          description: Only include items created before this timestamp (inclusive).
            This is a query parameter used to select responses.
        reasoning_effort:
          $ref: '#/components/schemas/ReasoningEffort'
          nullable: true
          description: Optional reasoning effort parameter. This is a query parameter
            used to select responses.
        temperature:
          type: number
          nullable: true
          description: Sampling temperature. This is a query parameter used to select
            responses.
        top_p:
          type: number
          nullable: true
          description: Nucleus sampling parameter. This is a query parameter used
            to select responses.
        users:
          type: array
          items:
            type: string
          nullable: true
          description: List of user identifiers. This is a query parameter used to
            select responses.
        tools:
          type: array
          items:
            type: string
          nullable: true
          description: List of tool names. This is a query parameter used to select
            responses.
      required:
      - type
    EvalRun:
      type: object
      title: EvalRun
      description: 'A schema representing an evaluation run.

        '
      properties:
        object:
          type: string
          enum:
          - eval.run
          default: eval.run
          description: The type of the object. Always "eval.run".
          x-stainless-const: true
        id:
          type: string
          description: Unique identifier for the evaluation run.
        eval_id:
          type: string
          description: The identifier of the associated evaluation.
        status:
          type: string
          description: The status of the evaluation run.
        model:
          type: string
          description: The model that is evaluated, if applicable.
        name:
          type: string
          description: The name of the evaluation run.
        created_at:
          type: integer
          description: Unix timestamp (in seconds) when the evaluation run was created.
        report_url:
          type: string
          description: The URL to the rendered evaluation run report on the UI dashboard.
        result_counts:
          type: object
          description: Counters summarizing the outcomes of the evaluation run.
          properties:
            total:
              type: integer
              description: Total number of executed output items.
            errored:
              type: integer
              description: Number of output items that resulted in an error.
            failed:
              type: integer
              description: Number of output items that failed to pass the evaluation.
            passed:
              type: integer
              description: Number of output items that passed the evaluation.
          required:
          - total
          - errored
          - failed
          - passed
        per_model_usage:
          type: array
          description: Usage statistics for each model during the evaluation run.
          items:
            type: object
            properties:
              model_name:
                type: string
                description: The name of the model.
              invocation_count:
                type: integer
                description: The number of invocations.
              prompt_tokens:
                type: integer
                description: The number of prompt tokens used.
              completion_tokens:
                type: integer
                description: The number of completion tokens generated.
              total_tokens:
                type: integer
                description: The total number of tokens used.
              cached_tokens:
                type: integer
                description: The number of tokens retrieved from cache.
            required:
            - model_name
            - invocation_count
            - prompt_tokens
            - completion_tokens
            - total_tokens
            - cached_tokens
        per_testing_criteria_results:
          type: array
          description: Results per testing criteria applied during the evaluation
            run.
          items:
            type: object
            properties:
              testing_criteria:
                type: string
                description: A description of the testing criteria.
              passed:
                type: integer
                description: Number of tests passed for this criteria.
              failed:
                type: integer
                description: Number of tests failed for this criteria.
            required:
            - testing_criteria
            - passed
            - failed
        data_source:
          type: object
          description: Information about the run's data source.
          oneOf:
          - $ref: '#/components/schemas/CreateEvalJsonlRunDataSource'
          - $ref: '#/components/schemas/CreateEvalCompletionsRunDataSource'
          - $ref: '#/components/schemas/CreateEvalResponsesRunDataSource'
        metadata:
          $ref: '#/components/schemas/Metadata'
        error:
          $ref: '#/components/schemas/EvalApiError'
      required:
      - object
      - id
      - eval_id
      - status
      - model
      - name
      - created_at
      - report_url
      - result_counts
      - per_model_usage
      - per_testing_criteria_results
      - data_source
      - metadata
      - error
    EvalRunList:
      type: object
      title: EvalRunList
      description: 'An object representing a list of runs for an evaluation.

        '
      properties:
        object:
          type: string
          enum:
          - list
          default: list
          description: 'The type of this object. It is always set to "list".

            '
          x-stainless-const: true
        data:
          type: array
          description: 'An array of eval run objects.

            '
          items:
            $ref: '#/components/schemas/EvalRun'
        first_id:
          type: string
          description: The identifier of the first eval run in the data array.
        last_id:
          type: string
          description: The identifier of the last eval run in the data array.
        has_more:
          type: boolean
          description: Indicates whether there are more evals available.
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    EvalRunOutputItem:
      type: object
      title: EvalRunOutputItem
      description: 'A schema representing an evaluation run output item.

        '
      properties:
        object:
          type: string
          enum:
          - eval.run.output_item
          default: eval.run.output_item
          description: The type of the object. Always "eval.run.output_item".
          x-stainless-const: true
        id:
          type: string
          description: Unique identifier for the evaluation run output item.
        run_id:
          type: string
          description: The identifier of the evaluation run associated with this output
            item.
        eval_id:
          type: string
          description: The identifier of the evaluation group.
        created_at:
          type: integer
          description: Unix timestamp (in seconds) when the evaluation run was created.
        status:
          type: string
          description: The status of the evaluation run.
        datasource_item_id:
          type: integer
          description: The identifier for the data source item.
        datasource_item:
          type: object
          description: Details of the input data source item.
          additionalProperties: true
        results:
          type: array
          description: A list of results from the evaluation run.
          items:
            type: object
            description: A result object.
            additionalProperties: true
        sample:
          type: object
          description: A sample containing the input and output of the evaluation
            run.
          properties:
            input:
              type: array
              description: An array of input messages.
              items:
                type: object
                description: An input message.
                properties:
                  role:
                    type: string
                    description: The role of the message sender (e.g., system, user,
                      developer).
                  content:
                    type: string
                    description: The content of the message.
                required:
                - role
                - content
            output:
              type: array
              description: An array of output messages.
              items:
                type: object
                properties:
                  role:
                    type: string
                    description: The role of the message (e.g. "system", "assistant",
                      "user").
                  content:
                    type: string
                    description: The content of the message.
            finish_reason:
              type: string
              description: The reason why the sample generation was finished.
            model:
              type: string
              description: The model used for generating the sample.
            usage:
              type: object
              description: Token usage details for the sample.
              properties:
                total_tokens:
                  type: integer
                  description: The total number of tokens used.
                completion_tokens:
                  type: integer
                  description: The number of completion tokens generated.
                prompt_tokens:
                  type: integer
                  description: The number of prompt tokens used.
                cached_tokens:
                  type: integer
                  description: The number of tokens retrieved from cache.
              required:
              - total_tokens
              - completion_tokens
              - prompt_tokens
              - cached_tokens
            error:
              $ref: '#/components/schemas/EvalApiError'
            temperature:
              type: number
              description: The sampling temperature used.
            max_completion_tokens:
              type: integer
              description: The maximum number of tokens allowed for completion.
            top_p:
              type: number
              description: The top_p value used for sampling.
            seed:
              type: integer
              description: The seed used for generating the sample.
          required:
          - input
          - output
          - finish_reason
          - model
          - usage
          - error
          - temperature
          - max_completion_tokens
          - top_p
          - seed
      required:
      - object
      - id
      - run_id
      - eval_id
      - created_at
      - status
      - datasource_item_id
      - datasource_item
      - results
      - sample
    EvalRunOutputItemList:
      type: object
      title: EvalRunOutputItemList
      description: 'An object representing a list of output items for an evaluation
        run.

        '
      properties:
        object:
          type: string
          enum:
          - list
          default: list
          description: 'The type of this object. It is always set to "list".

            '
          x-stainless-const: true
        data:
          type: array
          description: 'An array of eval run output item objects.

            '
          items:
            $ref: '#/components/schemas/EvalRunOutputItem'
        first_id:
          type: string
          description: The identifier of the first eval run output item in the data
            array.
        last_id:
          type: string
          description: The identifier of the last eval run output item in the data
            array.
        has_more:
          type: boolean
          description: Indicates whether there are more eval run output items available.
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    EvalStoredCompletionsDataSourceConfig:
      type: object
      title: StoredCompletionsDataSourceConfig
      description: 'Deprecated in favor of LogsDataSourceConfig.

        '
      properties:
        type:
          type: string
          enum:
          - stored_completions
          default: stored_completions
          description: The type of data source. Always `stored_completions`.
          x-stainless-const: true
        metadata:
          $ref: '#/components/schemas/Metadata'
        schema:
          type: object
          description: 'The json schema for the run data source items.

            Learn how to build JSON schemas [here](https://json-schema.org/).

            '
          additionalProperties: true
      required:
      - type
      - schema
      deprecated: true
    EvalStoredCompletionsSource:
      type: object
      title: StoredCompletionsRunDataSource
      description: 'A StoredCompletionsRunDataSource configuration describing a set
        of filters

        '
      properties:
        type:
          type: string
          enum:
          - stored_completions
          default: stored_completions
          description: The type of source. Always `stored_completions`.
          x-stainless-const: true
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          type: string
          nullable: true
          description: An optional model to filter by (e.g., 'gpt-4o').
        created_after:
          type: integer
          nullable: true
          description: An optional Unix timestamp to filter items created after this
            time.
        created_before:
          type: integer
          nullable: true
          description: An optional Unix timestamp to filter items created before this
            time.
        limit:
          type: integer
          nullable: true
          description: An optional maximum number of items to return.
      required:
      - type
    FilePath:
      type: object
      title: File path
      description: 'A path to a file.

        '
      properties:
        type:
          type: string
          description: 'The type of the file path. Always `file_path`.

            '
          enum:
          - file_path
          x-stainless-const: true
        file_id:
          type: string
          description: 'The ID of the file.

            '
        index:
          type: integer
          description: 'The index of the file in the list of files.

            '
      required:
      - type
      - file_id
      - index
    FileSearchRanker:
      type: string
      description: The ranker to use for the file search. If not specified will use
        the `auto` ranker.
      enum:
      - auto
      - default_2024_08_21
    FileSearchRankingOptions:
      title: File search tool call ranking options
      type: object
      description: 'The ranking options for the file search. If not specified, the
        file search tool will use the `auto` ranker and a score_threshold of 0.


        See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings)
        for more information.

        '
      properties:
        ranker:
          $ref: '#/components/schemas/FileSearchRanker'
        score_threshold:
          type: number
          description: The score threshold for the file search. All values must be
            a floating point number between 0 and 1.
          minimum: 0
          maximum: 1
      required:
      - score_threshold
    FileSearchToolCall:
      type: object
      title: File search tool call
      description: "The results of a file search tool call. See the \n[file search\
        \ guide](/docs/guides/tools-file-search) for more information.\n"
      properties:
        id:
          type: string
          description: 'The unique ID of the file search tool call.

            '
        type:
          type: string
          enum:
          - file_search_call
          description: 'The type of the file search tool call. Always `file_search_call`.

            '
          x-stainless-const: true
        status:
          type: string
          description: "The status of the file search tool call. One of `in_progress`,\
            \ \n`searching`, `incomplete` or `failed`,\n"
          enum:
          - in_progress
          - searching
          - completed
          - incomplete
          - failed
        queries:
          type: array
          items:
            type: string
          description: 'The queries used to search for files.

            '
        results:
          type: array
          description: 'The results of the file search tool call.

            '
          items:
            type: object
            properties:
              file_id:
                type: string
                description: 'The unique ID of the file.

                  '
              text:
                type: string
                description: 'The text that was retrieved from the file.

                  '
              filename:
                type: string
                description: 'The name of the file.

                  '
              attributes:
                $ref: '#/components/schemas/VectorStoreFileAttributes'
              score:
                type: number
                format: float
                description: 'The relevance score of the file - a value between 0
                  and 1.

                  '
          nullable: true
      required:
      - id
      - type
      - status
      - queries
    FineTuneChatCompletionRequestAssistantMessage:
      allOf:
      - type: object
        title: Assistant message
        deprecated: false
        properties:
          weight:
            type: integer
            enum:
            - 0
            - 1
            description: Controls whether the assistant message is trained against
              (0 or 1)
      - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
      required:
      - role
    FineTuneChatRequestInput:
      type: object
      description: 'The per-line training example of a fine-tuning input file for
        chat models using the supervised method.

        Input messages may contain text or image content only. Audio and file input
        messages

        are not currently supported for fine-tuning.

        '
      properties:
        messages:
          type: array
          minItems: 1
          items:
            oneOf:
            - $ref: '#/components/schemas/ChatCompletionRequestSystemMessage'
            - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
            - $ref: '#/components/schemas/FineTuneChatCompletionRequestAssistantMessage'
            - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
            - $ref: '#/components/schemas/ChatCompletionRequestFunctionMessage'
        tools:
          type: array
          description: A list of tools the model may generate JSON inputs for.
          items:
            $ref: '#/components/schemas/ChatCompletionTool'
        parallel_tool_calls:
          $ref: '#/components/schemas/ParallelToolCalls'
        functions:
          deprecated: true
          description: A list of functions the model may generate JSON inputs for.
          type: array
          minItems: 1
          maxItems: 128
          items:
            $ref: '#/components/schemas/ChatCompletionFunctions'
    FineTuneDPOHyperparameters:
      type: object
      description: The hyperparameters used for the DPO fine-tuning job.
      properties:
        beta:
          description: 'The beta value for the DPO method. A higher beta value will
            increase the weight of the penalty between the policy and reference model.

            '
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - type: number
            minimum: 0
            maximum: 2
            exclusiveMinimum: true
          default: auto
        batch_size:
          description: 'Number of examples in each batch. A larger batch size means
            that model parameters are updated less frequently, but with lower variance.

            '
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - type: integer
            minimum: 1
            maximum: 256
          default: auto
        learning_rate_multiplier:
          description: 'Scaling factor for the learning rate. A smaller learning rate
            may be useful to avoid overfitting.

            '
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - type: number
            minimum: 0
            exclusiveMinimum: true
          default: auto
        n_epochs:
          description: 'The number of epochs to train the model for. An epoch refers
            to one full cycle through the training dataset.

            '
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - type: integer
            minimum: 1
            maximum: 50
          default: auto
    FineTuneDPOMethod:
      type: object
      description: Configuration for the DPO fine-tuning method.
      properties:
        hyperparameters:
          $ref: '#/components/schemas/FineTuneDPOHyperparameters'
    FineTuneMethod:
      type: object
      description: The method used for fine-tuning.
      properties:
        type:
          type: string
          description: The type of method. Is either `supervised`, `dpo`, or `reinforcement`.
          enum:
          - supervised
          - dpo
          - reinforcement
        supervised:
          $ref: '#/components/schemas/FineTuneSupervisedMethod'
        dpo:
          $ref: '#/components/schemas/FineTuneDPOMethod'
        reinforcement:
          $ref: '#/components/schemas/FineTuneReinforcementMethod'
      required:
      - type
    FineTunePreferenceRequestInput:
      type: object
      description: 'The per-line training example of a fine-tuning input file for
        chat models using the dpo method.

        Input messages may contain text or image content only. Audio and file input
        messages

        are not currently supported for fine-tuning.

        '
      properties:
        input:
          type: object
          properties:
            messages:
              type: array
              minItems: 1
              items:
                oneOf:
                - $ref: '#/components/schemas/ChatCompletionRequestSystemMessage'
                - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
                - $ref: '#/components/schemas/FineTuneChatCompletionRequestAssistantMessage'
                - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
                - $ref: '#/components/schemas/ChatCompletionRequestFunctionMessage'
            tools:
              type: array
              description: A list of tools the model may generate JSON inputs for.
              items:
                $ref: '#/components/schemas/ChatCompletionTool'
            parallel_tool_calls:
              $ref: '#/components/schemas/ParallelToolCalls'
        preferred_output:
          type: array
          description: The preferred completion message for the output.
          maxItems: 1
          items:
            oneOf:
            - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
        non_preferred_output:
          type: array
          description: The non-preferred completion message for the output.
          maxItems: 1
          items:
            oneOf:
            - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
    FineTuneReinforcementHyperparameters:
      type: object
      description: The hyperparameters used for the reinforcement fine-tuning job.
      properties:
        batch_size:
          description: 'Number of examples in each batch. A larger batch size means
            that model parameters are updated less frequently, but with lower variance.

            '
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - type: integer
            minimum: 1
            maximum: 256
          default: auto
        learning_rate_multiplier:
          description: 'Scaling factor for the learning rate. A smaller learning rate
            may be useful to avoid overfitting.

            '
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - type: number
            minimum: 0
            exclusiveMinimum: true
          default: auto
        n_epochs:
          description: 'The number of epochs to train the model for. An epoch refers
            to one full cycle through the training dataset.

            '
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - type: integer
            minimum: 1
            maximum: 50
          default: auto
        reasoning_effort:
          description: 'Level of reasoning effort.

            '
          type: string
          enum:
          - default
          - low
          - medium
          - high
          default: default
        compute_multiplier:
          description: 'Multiplier on amount of compute used for exploring search
            space during training.

            '
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - type: number
            minimum: 1.0e-05
            maximum: 10
            exclusiveMinimum: true
          default: auto
        eval_interval:
          description: 'The number of training steps between evaluation runs.

            '
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - type: integer
            minimum: 1
          default: auto
        eval_samples:
          description: 'Number of evaluation samples to generate per training step.

            '
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - type: integer
            minimum: 1
          default: auto
    FineTuneReinforcementMethod:
      type: object
      description: Configuration for the reinforcement fine-tuning method.
      properties:
        grader:
          type: object
          description: The grader used for the fine-tuning job.
          oneOf:
          - $ref: '#/components/schemas/GraderStringCheck'
          - $ref: '#/components/schemas/GraderTextSimilarity'
          - $ref: '#/components/schemas/GraderPython'
          - $ref: '#/components/schemas/GraderScoreModel'
          - $ref: '#/components/schemas/GraderMulti'
        hyperparameters:
          $ref: '#/components/schemas/FineTuneReinforcementHyperparameters'
      required:
      - grader
    FineTuneReinforcementRequestInput:
      type: object
      unevaluatedProperties: true
      description: 'Per-line training example for reinforcement fine-tuning. Note
        that `messages` and `tools` are the only reserved keywords.

        Any other arbitrary key-value data can be included on training datapoints
        and will be available to reference during grading under the `{{ item.XXX }}`
        template variable.

        Input messages may contain text or image content only. Audio and file input
        messages

        are not currently supported for fine-tuning.

        '
      required:
      - messages
      properties:
        messages:
          type: array
          minItems: 1
          items:
            oneOf:
            - $ref: '#/components/schemas/ChatCompletionRequestDeveloperMessage'
            - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
            - $ref: '#/components/schemas/FineTuneChatCompletionRequestAssistantMessage'
            - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
        tools:
          type: array
          description: A list of tools the model may generate JSON inputs for.
          items:
            $ref: '#/components/schemas/ChatCompletionTool'
    FineTuneSupervisedHyperparameters:
      type: object
      description: The hyperparameters used for the fine-tuning job.
      properties:
        batch_size:
          description: 'Number of examples in each batch. A larger batch size means
            that model parameters are updated less frequently, but with lower variance.

            '
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - type: integer
            minimum: 1
            maximum: 256
          default: auto
        learning_rate_multiplier:
          description: 'Scaling factor for the learning rate. A smaller learning rate
            may be useful to avoid overfitting.

            '
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - type: number
            minimum: 0
            exclusiveMinimum: true
          default: auto
        n_epochs:
          description: 'The number of epochs to train the model for. An epoch refers
            to one full cycle through the training dataset.

            '
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - type: integer
            minimum: 1
            maximum: 50
          default: auto
    FineTuneSupervisedMethod:
      type: object
      description: Configuration for the supervised fine-tuning method.
      properties:
        hyperparameters:
          $ref: '#/components/schemas/FineTuneSupervisedHyperparameters'
    FineTuningCheckpointPermission:
      type: object
      title: FineTuningCheckpointPermission
      description: 'The `checkpoint.permission` object represents a permission for
        a fine-tuned model checkpoint.

        '
      properties:
        id:
          type: string
          description: The permission identifier, which can be referenced in the API
            endpoints.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the permission was
            created.
        project_id:
          type: string
          description: The project identifier that the permission is for.
        object:
          type: string
          description: The object type, which is always "checkpoint.permission".
          enum:
          - checkpoint.permission
          x-stainless-const: true
      required:
      - created_at
      - id
      - object
      - project_id
    FineTuningIntegration:
      type: object
      title: Fine-Tuning Job Integration
      required:
      - type
      - wandb
      properties:
        type:
          type: string
          description: The type of the integration being enabled for the fine-tuning
            job
          enum:
          - wandb
          x-stainless-const: true
        wandb:
          type: object
          description: 'The settings for your integration with Weights and Biases.
            This payload specifies the project that

            metrics will be sent to. Optionally, you can set an explicit display name
            for your run, add tags

            to your run, and set a default entity (team, username, etc) to be associated
            with your run.

            '
          required:
          - project
          properties:
            project:
              description: 'The name of the project that the new run will be created
                under.

                '
              type: string
              example: my-wandb-project
            name:
              description: 'A display name to set for the run. If not set, we will
                use the Job ID as the name.

                '
              nullable: true
              type: string
            entity:
              description: 'The entity to use for the run. This allows you to set
                the team or username of the WandB user that you would

                like associated with the run. If not set, the default entity for the
                registered WandB API key is used.

                '
              nullable: true
              type: string
            tags:
              description: 'A list of tags to be attached to the newly created run.
                These tags are passed through directly to WandB. Some

                default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}",
                "openai/{ftjob-abcdef}".

                '
              type: array
              items:
                type: string
                example: custom-tag
    FineTuningJob:
      type: object
      title: FineTuningJob
      description: 'The `fine_tuning.job` object represents a fine-tuning job that
        has been created through the API.

        '
      properties:
        id:
          type: string
          description: The object identifier, which can be referenced in the API endpoints.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the fine-tuning job
            was created.
        error:
          type: object
          nullable: true
          description: For fine-tuning jobs that have `failed`, this will contain
            more information on the cause of the failure.
          properties:
            code:
              type: string
              description: A machine-readable error code.
            message:
              type: string
              description: A human-readable error message.
            param:
              type: string
              description: The parameter that was invalid, usually `training_file`
                or `validation_file`. This field will be null if the failure was not
                parameter-specific.
              nullable: true
          required:
          - code
          - message
          - param
        fine_tuned_model:
          type: string
          nullable: true
          description: The name of the fine-tuned model that is being created. The
            value will be null if the fine-tuning job is still running.
        finished_at:
          type: integer
          nullable: true
          description: The Unix timestamp (in seconds) for when the fine-tuning job
            was finished. The value will be null if the fine-tuning job is still running.
        hyperparameters:
          type: object
          description: The hyperparameters used for the fine-tuning job. This value
            will only be returned when running `supervised` jobs.
          properties:
            batch_size:
              nullable: true
              description: 'Number of examples in each batch. A larger batch size
                means that model parameters

                are updated less frequently, but with lower variance.

                '
              oneOf:
              - type: string
                enum:
                - auto
                x-stainless-const: true
              - type: integer
                minimum: 1
                maximum: 256
              default: auto
            learning_rate_multiplier:
              description: 'Scaling factor for the learning rate. A smaller learning
                rate may be useful to avoid

                overfitting.

                '
              oneOf:
              - type: string
                enum:
                - auto
                x-stainless-const: true
              - type: number
                minimum: 0
                exclusiveMinimum: true
              default: auto
            n_epochs:
              description: 'The number of epochs to train the model for. An epoch
                refers to one full cycle

                through the training dataset.

                '
              oneOf:
              - type: string
                enum:
                - auto
                x-stainless-const: true
              - type: integer
                minimum: 1
                maximum: 50
              default: auto
        model:
          type: string
          description: The base model that is being fine-tuned.
        object:
          type: string
          description: The object type, which is always "fine_tuning.job".
          enum:
          - fine_tuning.job
          x-stainless-const: true
        organization_id:
          type: string
          description: The organization that owns the fine-tuning job.
        result_files:
          type: array
          description: The compiled results file ID(s) for the fine-tuning job. You
            can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
          items:
            type: string
            example: file-abc123
        status:
          type: string
          description: The current status of the fine-tuning job, which can be either
            `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
          enum:
          - validating_files
          - queued
          - running
          - succeeded
          - failed
          - cancelled
        trained_tokens:
          type: integer
          nullable: true
          description: The total number of billable tokens processed by this fine-tuning
            job. The value will be null if the fine-tuning job is still running.
        training_file:
          type: string
          description: The file ID used for training. You can retrieve the training
            data with the [Files API](/docs/api-reference/files/retrieve-contents).
        validation_file:
          type: string
          nullable: true
          description: The file ID used for validation. You can retrieve the validation
            results with the [Files API](/docs/api-reference/files/retrieve-contents).
        integrations:
          type: array
          nullable: true
          description: A list of integrations to enable for this fine-tuning job.
          maxItems: 5
          items:
            oneOf:
            - $ref: '#/components/schemas/FineTuningIntegration'
        seed:
          type: integer
          description: The seed used for the fine-tuning job.
        estimated_finish:
          type: integer
          nullable: true
          description: The Unix timestamp (in seconds) for when the fine-tuning job
            is estimated to finish. The value will be null if the fine-tuning job
            is not running.
        method:
          $ref: '#/components/schemas/FineTuneMethod'
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
      - created_at
      - error
      - finished_at
      - fine_tuned_model
      - hyperparameters
      - id
      - model
      - object
      - organization_id
      - result_files
      - status
      - trained_tokens
      - training_file
      - validation_file
      - seed
    FineTuningJobCheckpoint:
      type: object
      title: FineTuningJobCheckpoint
      description: 'The `fine_tuning.job.checkpoint` object represents a model checkpoint
        for a fine-tuning job that is ready to use.

        '
      properties:
        id:
          type: string
          description: The checkpoint identifier, which can be referenced in the API
            endpoints.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the checkpoint was
            created.
        fine_tuned_model_checkpoint:
          type: string
          description: The name of the fine-tuned checkpoint model that is created.
        step_number:
          type: integer
          description: The step number that the checkpoint was created at.
        metrics:
          type: object
          description: Metrics at the step number during the fine-tuning job.
          properties:
            step:
              type: number
            train_loss:
              type: number
            train_mean_token_accuracy:
              type: number
            valid_loss:
              type: number
            valid_mean_token_accuracy:
              type: number
            full_valid_loss:
              type: number
            full_valid_mean_token_accuracy:
              type: number
        fine_tuning_job_id:
          type: string
          description: The name of the fine-tuning job that this checkpoint was created
            from.
        object:
          type: string
          description: The object type, which is always "fine_tuning.job.checkpoint".
          enum:
          - fine_tuning.job.checkpoint
          x-stainless-const: true
      required:
      - created_at
      - fine_tuning_job_id
      - fine_tuned_model_checkpoint
      - id
      - metrics
      - object
      - step_number
    FineTuningJobEvent:
      type: object
      description: Fine-tuning job event object
      properties:
        object:
          type: string
          description: The object type, which is always "fine_tuning.job.event".
          enum:
          - fine_tuning.job.event
          x-stainless-const: true
        id:
          type: string
          description: The object identifier.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the fine-tuning job
            was created.
        level:
          type: string
          description: The log level of the event.
          enum:
          - info
          - warn
          - error
        message:
          type: string
          description: The message of the event.
        type:
          type: string
          description: The type of event.
          enum:
          - message
          - metrics
        data:
          type: object
          description: The data associated with the event.
      required:
      - id
      - object
      - created_at
      - level
      - message
    FunctionObject:
      type: object
      properties:
        description:
          type: string
          description: A description of what the function does, used by the model
            to choose when and how to call the function.
        name:
          type: string
          description: The name of the function to be called. Must be a-z, A-Z, 0-9,
            or contain underscores and dashes, with a maximum length of 64.
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
        strict:
          type: boolean
          nullable: true
          default: false
          description: Whether to enable strict schema adherence when generating the
            function call. If set to true, the model will follow the exact schema
            defined in the `parameters` field. Only a subset of JSON Schema is supported
            when `strict` is `true`. Learn more about Structured Outputs in the [function
            calling guide](/docs/guides/function-calling).
      required:
      - name
    FunctionParameters:
      type: object
      description: "The parameters the functions accepts, described as a JSON Schema\
        \ object. See the [guide](/docs/guides/function-calling) for examples, and\
        \ the [JSON Schema reference](https://json-schema.org/understanding-json-schema/)\
        \ for documentation about the format. \n\nOmitting `parameters` defines a\
        \ function with an empty parameter list."
      additionalProperties: true
    FunctionToolCall:
      type: object
      title: Function tool call
      description: "A tool call to run a function. See the \n[function calling guide](/docs/guides/function-calling)\
        \ for more information.\n"
      properties:
        id:
          type: string
          description: 'The unique ID of the function tool call.

            '
        type:
          type: string
          enum:
          - function_call
          description: 'The type of the function tool call. Always `function_call`.

            '
          x-stainless-const: true
        call_id:
          type: string
          description: 'The unique ID of the function tool call generated by the model.

            '
        name:
          type: string
          description: 'The name of the function to run.

            '
        arguments:
          type: string
          description: 'A JSON string of the arguments to pass to the function.

            '
        status:
          type: string
          description: 'The status of the item. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
      required:
      - type
      - call_id
      - name
      - arguments
    FunctionToolCallOutput:
      type: object
      title: Function tool call output
      description: 'The output of a function tool call.

        '
      properties:
        id:
          type: string
          description: 'The unique ID of the function tool call output. Populated
            when this item

            is returned via API.

            '
        type:
          type: string
          enum:
          - function_call_output
          description: 'The type of the function tool call output. Always `function_call_output`.

            '
          x-stainless-const: true
        call_id:
          type: string
          description: 'The unique ID of the function tool call generated by the model.

            '
        output:
          type: string
          description: 'A JSON string of the output of the function tool call.

            '
        status:
          type: string
          description: 'The status of the item. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
      required:
      - type
      - call_id
      - output
    FunctionToolCallOutputResource:
      allOf:
      - $ref: '#/components/schemas/FunctionToolCallOutput'
      - type: object
        properties:
          id:
            type: string
            description: 'The unique ID of the function call tool output.

              '
        required:
        - id
    FunctionToolCallResource:
      allOf:
      - $ref: '#/components/schemas/FunctionToolCall'
      - type: object
        properties:
          id:
            type: string
            description: 'The unique ID of the function tool call.

              '
        required:
        - id
    GraderLabelModel:
      type: object
      title: LabelModelGrader
      description: 'A LabelModelGrader object which uses a model to assign labels
        to each item

        in the evaluation.

        '
      properties:
        type:
          description: The object type, which is always `label_model`.
          type: string
          enum:
          - label_model
          x-stainless-const: true
        name:
          type: string
          description: The name of the grader.
        model:
          type: string
          description: The model to use for the evaluation. Must support structured
            outputs.
        input:
          type: array
          items:
            $ref: '#/components/schemas/EvalItem'
        labels:
          type: array
          items:
            type: string
          description: The labels to assign to each item in the evaluation.
        passing_labels:
          type: array
          items:
            type: string
          description: The labels that indicate a passing result. Must be a subset
            of labels.
      required:
      - type
      - model
      - input
      - passing_labels
      - labels
      - name
    GraderMulti:
      type: object
      title: MultiGrader
      description: A MultiGrader object combines the output of multiple graders to
        produce a single score.
      properties:
        type:
          type: string
          enum:
          - multi
          default: multi
          description: The object type, which is always `multi`.
          x-stainless-const: true
        name:
          type: string
          description: The name of the grader.
        graders:
          oneOf:
          - $ref: '#/components/schemas/GraderStringCheck'
          - $ref: '#/components/schemas/GraderTextSimilarity'
          - $ref: '#/components/schemas/GraderPython'
          - $ref: '#/components/schemas/GraderScoreModel'
          - $ref: '#/components/schemas/GraderLabelModel'
        calculate_output:
          type: string
          description: A formula to calculate the output based on grader results.
      required:
      - name
      - type
      - graders
      - calculate_output
    GraderPython:
      type: object
      title: PythonGrader
      description: 'A PythonGrader object that runs a python script on the input.

        '
      properties:
        type:
          type: string
          enum:
          - python
          description: The object type, which is always `python`.
          x-stainless-const: true
        name:
          type: string
          description: The name of the grader.
        source:
          type: string
          description: The source code of the python script.
        image_tag:
          type: string
          description: The image tag to use for the python script.
      required:
      - type
      - name
      - source
    GraderScoreModel:
      type: object
      title: ScoreModelGrader
      description: 'A ScoreModelGrader object that uses a model to assign a score
        to the input.

        '
      properties:
        type:
          type: string
          enum:
          - score_model
          description: The object type, which is always `score_model`.
          x-stainless-const: true
        name:
          type: string
          description: The name of the grader.
        model:
          type: string
          description: The model to use for the evaluation.
        sampling_params:
          type: object
          description: The sampling parameters for the model.
        input:
          type: array
          items:
            $ref: '#/components/schemas/EvalItem'
          description: The input text. This may include template strings.
        range:
          type: array
          items:
            type: number
            min_items: 2
            max_items: 2
          description: The range of the score. Defaults to `[0, 1]`.
      required:
      - type
      - name
      - input
      - model
    GraderStringCheck:
      type: object
      title: StringCheckGrader
      description: 'A StringCheckGrader object that performs a string comparison between
        input and reference using a specified operation.

        '
      properties:
        type:
          type: string
          enum:
          - string_check
          description: The object type, which is always `string_check`.
          x-stainless-const: true
        name:
          type: string
          description: The name of the grader.
        input:
          type: string
          description: The input text. This may include template strings.
        reference:
          type: string
          description: The reference text. This may include template strings.
        operation:
          type: string
          enum:
          - eq
          - ne
          - like
          - ilike
          description: The string check operation to perform. One of `eq`, `ne`, `like`,
            or `ilike`.
      required:
      - type
      - name
      - input
      - reference
      - operation
    GraderTextSimilarity:
      type: object
      title: TextSimilarityGrader
      description: 'A TextSimilarityGrader object which grades text based on similarity
        metrics.

        '
      properties:
        type:
          type: string
          enum:
          - text_similarity
          default: text_similarity
          description: The type of grader.
          x-stainless-const: true
        name:
          type: string
          description: The name of the grader.
        input:
          type: string
          description: The text being graded.
        reference:
          type: string
          description: The text being graded against.
        evaluation_metric:
          type: string
          enum:
          - fuzzy_match
          - bleu
          - gleu
          - meteor
          - rouge_1
          - rouge_2
          - rouge_3
          - rouge_4
          - rouge_5
          - rouge_l
          description: The evaluation metric to use. One of `fuzzy_match`, `bleu`,
            `gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`,
            or `rouge_l`.
      required:
      - type
      - name
      - input
      - reference
      - evaluation_metric
    Image:
      type: object
      description: Represents the content or the URL of an image generated by the
        OpenAI API.
      properties:
        b64_json:
          type: string
          description: The base64-encoded JSON of the generated image. Default value
            for `gpt-image-1`, and only present if `response_format` is set to `b64_json`
            for `dall-e-2` and `dall-e-3`.
        url:
          type: string
          description: When using `dall-e-2` or `dall-e-3`, the URL of the generated
            image if `response_format` is set to `url` (default value). Unsupported
            for `gpt-image-1`.
        revised_prompt:
          type: string
          description: For `dall-e-3` only, the revised prompt that was used to generate
            the image.
    ImageEditCompletedEvent:
      type: object
      description: 'Emitted when image editing has completed and the final image is
        available.

        '
      properties:
        type:
          type: string
          description: 'The type of the event. Always `image_edit.completed`.

            '
          enum:
          - image_edit.completed
          x-stainless-const: true
        b64_json:
          type: string
          description: 'Base64-encoded final edited image data, suitable for rendering
            as an image.

            '
        created_at:
          type: integer
          description: 'The Unix timestamp when the event was created.

            '
        size:
          type: string
          description: 'The size of the edited image.

            '
          enum:
          - 1024x1024
          - 1024x1536
          - 1536x1024
          - auto
        quality:
          type: string
          description: 'The quality setting for the edited image.

            '
          enum:
          - low
          - medium
          - high
          - auto
        background:
          type: string
          description: 'The background setting for the edited image.

            '
          enum:
          - transparent
          - opaque
          - auto
        output_format:
          type: string
          description: 'The output format for the edited image.

            '
          enum:
          - png
          - webp
          - jpeg
        usage:
          $ref: '#/components/schemas/ImagesUsage'
      required:
      - type
      - b64_json
      - created_at
      - size
      - quality
      - background
      - output_format
      - usage
    ImageEditPartialImageEvent:
      type: object
      description: 'Emitted when a partial image is available during image editing
        streaming.

        '
      properties:
        type:
          type: string
          description: 'The type of the event. Always `image_edit.partial_image`.

            '
          enum:
          - image_edit.partial_image
          x-stainless-const: true
        b64_json:
          type: string
          description: 'Base64-encoded partial image data, suitable for rendering
            as an image.

            '
        created_at:
          type: integer
          description: 'The Unix timestamp when the event was created.

            '
        size:
          type: string
          description: 'The size of the requested edited image.

            '
          enum:
          - 1024x1024
          - 1024x1536
          - 1536x1024
          - auto
        quality:
          type: string
          description: 'The quality setting for the requested edited image.

            '
          enum:
          - low
          - medium
          - high
          - auto
        background:
          type: string
          description: 'The background setting for the requested edited image.

            '
          enum:
          - transparent
          - opaque
          - auto
        output_format:
          type: string
          description: 'The output format for the requested edited image.

            '
          enum:
          - png
          - webp
          - jpeg
        partial_image_index:
          type: integer
          description: '0-based index for the partial image (streaming).

            '
      required:
      - type
      - b64_json
      - created_at
      - size
      - quality
      - background
      - output_format
      - partial_image_index
    ImageEditStreamEvent:
      anyOf:
      - $ref: '#/components/schemas/ImageEditPartialImageEvent'
      - $ref: '#/components/schemas/ImageEditCompletedEvent'
      discriminator:
        propertyName: type
    ImageGenCompletedEvent:
      type: object
      description: 'Emitted when image generation has completed and the final image
        is available.

        '
      properties:
        type:
          type: string
          description: 'The type of the event. Always `image_generation.completed`.

            '
          enum:
          - image_generation.completed
          x-stainless-const: true
        b64_json:
          type: string
          description: 'Base64-encoded image data, suitable for rendering as an image.

            '
        created_at:
          type: integer
          description: 'The Unix timestamp when the event was created.

            '
        size:
          type: string
          description: 'The size of the generated image.

            '
          enum:
          - 1024x1024
          - 1024x1536
          - 1536x1024
          - auto
        quality:
          type: string
          description: 'The quality setting for the generated image.

            '
          enum:
          - low
          - medium
          - high
          - auto
        background:
          type: string
          description: 'The background setting for the generated image.

            '
          enum:
          - transparent
          - opaque
          - auto
        output_format:
          type: string
          description: 'The output format for the generated image.

            '
          enum:
          - png
          - webp
          - jpeg
        usage:
          $ref: '#/components/schemas/ImagesUsage'
      required:
      - type
      - b64_json
      - created_at
      - size
      - quality
      - background
      - output_format
      - usage
    ImageGenPartialImageEvent:
      type: object
      description: 'Emitted when a partial image is available during image generation
        streaming.

        '
      properties:
        type:
          type: string
          description: 'The type of the event. Always `image_generation.partial_image`.

            '
          enum:
          - image_generation.partial_image
          x-stainless-const: true
        b64_json:
          type: string
          description: 'Base64-encoded partial image data, suitable for rendering
            as an image.

            '
        created_at:
          type: integer
          description: 'The Unix timestamp when the event was created.

            '
        size:
          type: string
          description: 'The size of the requested image.

            '
          enum:
          - 1024x1024
          - 1024x1536
          - 1536x1024
          - auto
        quality:
          type: string
          description: 'The quality setting for the requested image.

            '
          enum:
          - low
          - medium
          - high
          - auto
        background:
          type: string
          description: 'The background setting for the requested image.

            '
          enum:
          - transparent
          - opaque
          - auto
        output_format:
          type: string
          description: 'The output format for the requested image.

            '
          enum:
          - png
          - webp
          - jpeg
        partial_image_index:
          type: integer
          description: '0-based index for the partial image (streaming).

            '
      required:
      - type
      - b64_json
      - created_at
      - size
      - quality
      - background
      - output_format
      - partial_image_index
    ImageGenStreamEvent:
      anyOf:
      - $ref: '#/components/schemas/ImageGenPartialImageEvent'
      - $ref: '#/components/schemas/ImageGenCompletedEvent'
      discriminator:
        propertyName: type
    ImageGenTool:
      type: object
      title: Image generation tool
      description: 'A tool that generates images using a model like `gpt-image-1`.

        '
      properties:
        type:
          type: string
          enum:
          - image_generation
          description: 'The type of the image generation tool. Always `image_generation`.

            '
          x-stainless-const: true
        model:
          type: string
          enum:
          - gpt-image-1
          description: 'The image generation model to use. Default: `gpt-image-1`.

            '
          default: gpt-image-1
        quality:
          type: string
          enum:
          - low
          - medium
          - high
          - auto
          description: "The quality of the generated image. One of `low`, `medium`,\
            \ `high`, \nor `auto`. Default: `auto`.\n"
          default: auto
        size:
          type: string
          enum:
          - 1024x1024
          - 1024x1536
          - 1536x1024
          - auto
          description: "The size of the generated image. One of `1024x1024`, `1024x1536`,\
            \ \n`1536x1024`, or `auto`. Default: `auto`.\n"
          default: auto
        output_format:
          type: string
          enum:
          - png
          - webp
          - jpeg
          description: "The output format of the generated image. One of `png`, `webp`,\
            \ or \n`jpeg`. Default: `png`.\n"
          default: png
        output_compression:
          type: integer
          minimum: 0
          maximum: 100
          description: 'Compression level for the output image. Default: 100.

            '
          default: 100
        moderation:
          type: string
          enum:
          - auto
          - low
          description: 'Moderation level for the generated image. Default: `auto`.

            '
          default: auto
        background:
          type: string
          enum:
          - transparent
          - opaque
          - auto
          description: "Background type for the generated image. One of `transparent`,\
            \ \n`opaque`, or `auto`. Default: `auto`.\n"
          default: auto
        input_fidelity:
          $ref: '#/components/schemas/ImageInputFidelity'
        input_image_mask:
          type: object
          description: "Optional mask for inpainting. Contains `image_url` \n(string,\
            \ optional) and `file_id` (string, optional).\n"
          properties:
            image_url:
              type: string
              description: 'Base64-encoded mask image.

                '
            file_id:
              type: string
              description: 'File ID for the mask image.

                '
          required: []
          additionalProperties: false
        partial_images:
          type: integer
          minimum: 0
          maximum: 3
          description: 'Number of partial images to generate in streaming mode, from
            0 (default value) to 3.

            '
          default: 0
      required:
      - type
    ImageGenToolCall:
      type: object
      title: Image generation call
      description: 'An image generation request made by the model.

        '
      properties:
        type:
          type: string
          enum:
          - image_generation_call
          description: 'The type of the image generation call. Always `image_generation_call`.

            '
          x-stainless-const: true
        id:
          type: string
          description: 'The unique ID of the image generation call.

            '
        status:
          type: string
          enum:
          - in_progress
          - completed
          - generating
          - failed
          description: 'The status of the image generation call.

            '
        result:
          type: string
          description: 'The generated image encoded in base64.

            '
          nullable: true
      required:
      - type
      - id
      - status
      - result
    ImageInputFidelity:
      type: string
      enum:
      - high
      - low
      default: low
      nullable: true
      description: 'Control how much effort the model will exert to match the style
        and features,

        especially facial features, of input images. This parameter is only supported

        for `gpt-image-1`. Supports `high` and `low`. Defaults to `low`.

        '
    ImagesResponse:
      type: object
      title: Image generation response
      description: The response from the image generation endpoint.
      properties:
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the image was created.
        data:
          type: array
          description: The list of generated images.
          items:
            $ref: '#/components/schemas/Image'
        background:
          type: string
          description: The background parameter used for the image generation. Either
            `transparent` or `opaque`.
          enum:
          - transparent
          - opaque
        output_format:
          type: string
          description: The output format of the image generation. Either `png`, `webp`,
            or `jpeg`.
          enum:
          - png
          - webp
          - jpeg
        size:
          type: string
          description: The size of the image generated. Either `1024x1024`, `1024x1536`,
            or `1536x1024`.
          enum:
          - 1024x1024
          - 1024x1536
          - 1536x1024
        quality:
          type: string
          description: The quality of the image generated. Either `low`, `medium`,
            or `high`.
          enum:
          - low
          - medium
          - high
        usage:
          $ref: '#/components/schemas/ImageGenUsage'
      required:
      - created
    ImagesUsage:
      type: object
      description: 'For `gpt-image-1` only, the token usage information for the image
        generation.

        '
      required:
      - total_tokens
      - input_tokens
      - output_tokens
      - input_tokens_details
      properties:
        total_tokens:
          type: integer
          description: 'The total number of tokens (images and text) used for the
            image generation.

            '
        input_tokens:
          type: integer
          description: The number of tokens (images and text) in the input prompt.
        output_tokens:
          type: integer
          description: The number of image tokens in the output image.
        input_tokens_details:
          type: object
          description: The input tokens detailed information for the image generation.
          required:
          - text_tokens
          - image_tokens
          properties:
            text_tokens:
              type: integer
              description: The number of text tokens in the input prompt.
            image_tokens:
              type: integer
              description: The number of image tokens in the input prompt.
    Includable:
      type: string
      description: "Specify additional output data to include in the model response.\
        \ Currently\nsupported values are:\n- `code_interpreter_call.outputs`: Includes\
        \ the outputs of python code execution\n  in code interpreter tool call items.\n\
        - `computer_call_output.output.image_url`: Include image urls from the computer\
        \ call output.\n- `file_search_call.results`: Include the search results of\n\
        \  the file search tool call.\n- `message.input_image.image_url`: Include\
        \ image urls from the input message.\n- `message.output_text.logprobs`: Include\
        \ logprobs with assistant messages.\n- `reasoning.encrypted_content`: Includes\
        \ an encrypted version of reasoning\n  tokens in reasoning item outputs. This\
        \ enables reasoning items to be used in\n  multi-turn conversations when using\
        \ the Responses API statelessly (like\n  when the `store` parameter is set\
        \ to `false`, or when an organization is\n  enrolled in the zero data retention\
        \ program).\n"
      enum:
      - code_interpreter_call.outputs
      - computer_call_output.output.image_url
      - file_search_call.results
      - message.input_image.image_url
      - message.output_text.logprobs
      - reasoning.encrypted_content
    InputAudio:
      type: object
      title: Audio input
      description: 'An audio input to the model.

        '
      properties:
        type:
          type: string
          description: 'The type of the input item. Always `input_audio`.

            '
          enum:
          - input_audio
          x-stainless-const: true
        data:
          type: string
          description: 'Base64-encoded audio data.

            '
        format:
          type: string
          description: 'The format of the audio data. Currently supported formats
            are `mp3` and

            `wav`.

            '
          enum:
          - mp3
          - wav
      required:
      - type
      - data
      - format
    InputContent:
      oneOf:
      - $ref: '#/components/schemas/InputTextContent'
      - $ref: '#/components/schemas/InputImageContent'
      - $ref: '#/components/schemas/InputFileContent'
    InputItem:
      oneOf:
      - $ref: '#/components/schemas/EasyInputMessage'
      - type: object
        title: Item
        description: "An item representing part of the context for the response to\
          \ be \ngenerated by the model. Can contain text, images, and audio inputs,\n\
          as well as previous assistant responses and tool call outputs.\n"
        $ref: '#/components/schemas/Item'
      - $ref: '#/components/schemas/ItemReferenceParam'
      discriminator:
        propertyName: type
    InputMessage:
      type: object
      title: Input message
      description: 'A message input to the model with a role indicating instruction
        following

        hierarchy. Instructions given with the `developer` or `system` role take

        precedence over instructions given with the `user` role.

        '
      properties:
        type:
          type: string
          description: 'The type of the message input. Always set to `message`.

            '
          enum:
          - message
          x-stainless-const: true
        role:
          type: string
          description: 'The role of the message input. One of `user`, `system`, or
            `developer`.

            '
          enum:
          - user
          - system
          - developer
        status:
          type: string
          description: 'The status of item. One of `in_progress`, `completed`, or

            `incomplete`. Populated when items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
        content:
          $ref: '#/components/schemas/InputMessageContentList'
      required:
      - role
      - content
    InputMessageContentList:
      type: array
      title: Input item content list
      description: "A list of one or many input items to the model, containing different\
        \ content \ntypes.\n"
      items:
        $ref: '#/components/schemas/InputContent'
    InputMessageResource:
      allOf:
      - $ref: '#/components/schemas/InputMessage'
      - type: object
        properties:
          id:
            type: string
            description: 'The unique ID of the message input.

              '
        required:
        - id
    Invite:
      type: object
      description: Represents an individual `invite` to the organization.
      properties:
        object:
          type: string
          enum:
          - organization.invite
          description: The object type, which is always `organization.invite`
          x-stainless-const: true
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints
        email:
          type: string
          description: The email address of the individual to whom the invite was
            sent
        role:
          type: string
          enum:
          - owner
          - reader
          description: '`owner` or `reader`'
        status:
          type: string
          enum:
          - accepted
          - expired
          - pending
          description: '`accepted`,`expired`, or `pending`'
        invited_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the invite was sent.
        expires_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the invite expires.
        accepted_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the invite was accepted.
        projects:
          type: array
          description: The projects that were granted membership upon acceptance of
            the invite.
          items:
            type: object
            properties:
              id:
                type: string
                description: Project's public ID
              role:
                type: string
                enum:
                - member
                - owner
                description: Project membership role
      required:
      - object
      - id
      - email
      - role
      - status
      - invited_at
      - expires_at
    InviteDeleteResponse:
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.invite.deleted
          description: The object type, which is always `organization.invite.deleted`
          x-stainless-const: true
        id:
          type: string
        deleted:
          type: boolean
      required:
      - object
      - id
      - deleted
    InviteListResponse:
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          description: The object type, which is always `list`
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Invite'
        first_id:
          type: string
          description: The first `invite_id` in the retrieved `list`
        last_id:
          type: string
          description: The last `invite_id` in the retrieved `list`
        has_more:
          type: boolean
          description: The `has_more` property is used for pagination to indicate
            there are additional results.
      required:
      - object
      - data
    InviteRequest:
      type: object
      properties:
        email:
          type: string
          description: Send an email to this address
        role:
          type: string
          enum:
          - reader
          - owner
          description: '`owner` or `reader`'
        projects:
          type: array
          description: An array of projects to which membership is granted at the
            same time the org invite is accepted. If omitted, the user will be invited
            to the default project for compatibility with legacy behavior.
          items:
            type: object
            properties:
              id:
                type: string
                description: Project's public ID
              role:
                type: string
                enum:
                - member
                - owner
                description: Project membership role
            required:
            - id
            - role
      required:
      - email
      - role
    Item:
      type: object
      description: 'Content item used to generate a response.

        '
      oneOf:
      - $ref: '#/components/schemas/InputMessage'
      - $ref: '#/components/schemas/OutputMessage'
      - $ref: '#/components/schemas/FileSearchToolCall'
      - $ref: '#/components/schemas/ComputerToolCall'
      - $ref: '#/components/schemas/ComputerCallOutputItemParam'
      - $ref: '#/components/schemas/WebSearchToolCall'
      - $ref: '#/components/schemas/FunctionToolCall'
      - $ref: '#/components/schemas/FunctionCallOutputItemParam'
      - $ref: '#/components/schemas/ReasoningItem'
      - $ref: '#/components/schemas/ImageGenToolCall'
      - $ref: '#/components/schemas/CodeInterpreterToolCall'
      - $ref: '#/components/schemas/LocalShellToolCall'
      - $ref: '#/components/schemas/LocalShellToolCallOutput'
      - $ref: '#/components/schemas/MCPListTools'
      - $ref: '#/components/schemas/MCPApprovalRequest'
      - $ref: '#/components/schemas/MCPApprovalResponse'
      - $ref: '#/components/schemas/MCPToolCall'
      discriminator:
        propertyName: type
    ItemResource:
      description: 'Content item used to generate a response.

        '
      oneOf:
      - $ref: '#/components/schemas/InputMessageResource'
      - $ref: '#/components/schemas/OutputMessage'
      - $ref: '#/components/schemas/FileSearchToolCall'
      - $ref: '#/components/schemas/ComputerToolCall'
      - $ref: '#/components/schemas/ComputerToolCallOutputResource'
      - $ref: '#/components/schemas/WebSearchToolCall'
      - $ref: '#/components/schemas/FunctionToolCallResource'
      - $ref: '#/components/schemas/FunctionToolCallOutputResource'
      - $ref: '#/components/schemas/ImageGenToolCall'
      - $ref: '#/components/schemas/CodeInterpreterToolCall'
      - $ref: '#/components/schemas/LocalShellToolCall'
      - $ref: '#/components/schemas/LocalShellToolCallOutput'
      - $ref: '#/components/schemas/MCPListTools'
      - $ref: '#/components/schemas/MCPApprovalRequest'
      - $ref: '#/components/schemas/MCPApprovalResponseResource'
      - $ref: '#/components/schemas/MCPToolCall'
      discriminator:
        propertyName: type
    KeyPress:
      type: object
      title: KeyPress
      description: 'A collection of keypresses the model would like to perform.

        '
      properties:
        type:
          type: string
          enum:
          - keypress
          default: keypress
          description: "Specifies the event type. For a keypress action, this property\
            \ is \nalways set to `keypress`.\n"
          x-stainless-const: true
        keys:
          type: array
          items:
            type: string
            description: 'One of the keys the model is requesting to be pressed.

              '
          description: 'The combination of keys the model is requesting to be pressed.
            This is an

            array of strings, each representing a key.

            '
      required:
      - type
      - keys
    ListAssistantsResponse:
      type: object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/AssistantObject'
        first_id:
          type: string
          example: asst_abc123
        last_id:
          type: string
          example: asst_abc456
        has_more:
          type: boolean
          example: false
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ListAuditLogsResponse:
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/AuditLog'
        first_id:
          type: string
          example: audit_log-defb456h8dks
        last_id:
          type: string
          example: audit_log-hnbkd8s93s
        has_more:
          type: boolean
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ListBatchesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Batch'
        first_id:
          type: string
          example: batch_abc123
        last_id:
          type: string
          example: batch_abc456
        has_more:
          type: boolean
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
      required:
      - object
      - data
      - has_more
    ListCertificatesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Certificate'
        first_id:
          type: string
          example: cert_abc
        last_id:
          type: string
          example: cert_abc
        has_more:
          type: boolean
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
      required:
      - object
      - data
      - has_more
    ListFilesResponse:
      type: object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/OpenAIFile'
        first_id:
          type: string
          example: file-abc123
        last_id:
          type: string
          example: file-abc456
        has_more:
          type: boolean
          example: false
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ListFineTuningCheckpointPermissionResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FineTuningCheckpointPermission'
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        first_id:
          type: string
          nullable: true
        last_id:
          type: string
          nullable: true
        has_more:
          type: boolean
      required:
      - object
      - data
      - has_more
    ListFineTuningJobCheckpointsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FineTuningJobCheckpoint'
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        first_id:
          type: string
          nullable: true
        last_id:
          type: string
          nullable: true
        has_more:
          type: boolean
      required:
      - object
      - data
      - has_more
    ListFineTuningJobEventsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FineTuningJobEvent'
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        has_more:
          type: boolean
      required:
      - object
      - data
      - has_more
    ListMessagesResponse:
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/MessageObject'
        first_id:
          type: string
          example: msg_abc123
        last_id:
          type: string
          example: msg_abc123
        has_more:
          type: boolean
          example: false
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ListModelsResponse:
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Model'
      required:
      - object
      - data
    ListPaginatedFineTuningJobsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FineTuningJob'
        has_more:
          type: boolean
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
      required:
      - object
      - data
      - has_more
    ListRunStepsResponse:
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/RunStepObject'
        first_id:
          type: string
          example: step_abc123
        last_id:
          type: string
          example: step_abc456
        has_more:
          type: boolean
          example: false
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ListRunsResponse:
      type: object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/RunObject'
        first_id:
          type: string
          example: run_abc123
        last_id:
          type: string
          example: run_abc456
        has_more:
          type: boolean
          example: false
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ListVectorStoreFilesResponse:
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/VectorStoreFileObject'
        first_id:
          type: string
          example: file-abc123
        last_id:
          type: string
          example: file-abc456
        has_more:
          type: boolean
          example: false
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ListVectorStoresResponse:
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/VectorStoreObject'
        first_id:
          type: string
          example: vs_abc123
        last_id:
          type: string
          example: vs_abc456
        has_more:
          type: boolean
          example: false
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    LocalShellExecAction:
      type: object
      title: Local shell exec action
      description: 'Execute a shell command on the server.

        '
      properties:
        type:
          type: string
          enum:
          - exec
          description: 'The type of the local shell action. Always `exec`.

            '
          x-stainless-const: true
        command:
          type: array
          items:
            type: string
          description: 'The command to run.

            '
        timeout_ms:
          type: integer
          description: 'Optional timeout in milliseconds for the command.

            '
          nullable: true
        working_directory:
          type: string
          description: 'Optional working directory to run the command in.

            '
          nullable: true
        env:
          type: object
          additionalProperties:
            type: string
          description: 'Environment variables to set for the command.

            '
        user:
          type: string
          description: 'Optional user to run the command as.

            '
          nullable: true
      required:
      - type
      - command
      - env
    LocalShellTool:
      type: object
      title: Local shell tool
      description: 'A tool that allows the model to execute shell commands in a local
        environment.

        '
      properties:
        type:
          type: string
          enum:
          - local_shell
          description: The type of the local shell tool. Always `local_shell`.
          x-stainless-const: true
      required:
      - type
    LocalShellToolCall:
      type: object
      title: Local shell call
      description: 'A tool call to run a command on the local shell.

        '
      properties:
        type:
          type: string
          enum:
          - local_shell_call
          description: 'The type of the local shell call. Always `local_shell_call`.

            '
          x-stainless-const: true
        id:
          type: string
          description: 'The unique ID of the local shell call.

            '
        call_id:
          type: string
          description: 'The unique ID of the local shell tool call generated by the
            model.

            '
        action:
          $ref: '#/components/schemas/LocalShellExecAction'
        status:
          type: string
          enum:
          - in_progress
          - completed
          - incomplete
          description: 'The status of the local shell call.

            '
      required:
      - type
      - id
      - call_id
      - action
      - status
    LocalShellToolCallOutput:
      type: object
      title: Local shell call output
      description: 'The output of a local shell tool call.

        '
      properties:
        type:
          type: string
          enum:
          - local_shell_call_output
          description: 'The type of the local shell tool call output. Always `local_shell_call_output`.

            '
          x-stainless-const: true
        id:
          type: string
          description: 'The unique ID of the local shell tool call generated by the
            model.

            '
        output:
          type: string
          description: 'A JSON string of the output of the local shell tool call.

            '
        status:
          type: string
          enum:
          - in_progress
          - completed
          - incomplete
          description: 'The status of the item. One of `in_progress`, `completed`,
            or `incomplete`.

            '
          nullable: true
      required:
      - id
      - type
      - call_id
      - output
    LogProbProperties:
      type: object
      description: 'A log probability object.

        '
      properties:
        token:
          type: string
          description: 'The token that was used to generate the log probability.

            '
        logprob:
          type: number
          description: 'The log probability of the token.

            '
        bytes:
          type: array
          items:
            type: integer
          description: 'The bytes that were used to generate the log probability.

            '
      required:
      - token
      - logprob
      - bytes
    MCPApprovalRequest:
      type: object
      title: MCP approval request
      description: 'A request for human approval of a tool invocation.

        '
      properties:
        type:
          type: string
          enum:
          - mcp_approval_request
          description: 'The type of the item. Always `mcp_approval_request`.

            '
          x-stainless-const: true
        id:
          type: string
          description: 'The unique ID of the approval request.

            '
        server_label:
          type: string
          description: 'The label of the MCP server making the request.

            '
        name:
          type: string
          description: 'The name of the tool to run.

            '
        arguments:
          type: string
          description: 'A JSON string of arguments for the tool.

            '
      required:
      - type
      - id
      - server_label
      - name
      - arguments
    MCPApprovalResponse:
      type: object
      title: MCP approval response
      description: 'A response to an MCP approval request.

        '
      properties:
        type:
          type: string
          enum:
          - mcp_approval_response
          description: 'The type of the item. Always `mcp_approval_response`.

            '
          x-stainless-const: true
        id:
          type: string
          description: 'The unique ID of the approval response

            '
          nullable: true
        approval_request_id:
          type: string
          description: 'The ID of the approval request being answered.

            '
        approve:
          type: boolean
          description: 'Whether the request was approved.

            '
        reason:
          type: string
          description: 'Optional reason for the decision.

            '
          nullable: true
      required:
      - type
      - request_id
      - approve
      - approval_request_id
    MCPApprovalResponseResource:
      type: object
      title: MCP approval response
      description: 'A response to an MCP approval request.

        '
      properties:
        type:
          type: string
          enum:
          - mcp_approval_response
          description: 'The type of the item. Always `mcp_approval_response`.

            '
          x-stainless-const: true
        id:
          type: string
          description: 'The unique ID of the approval response

            '
        approval_request_id:
          type: string
          description: 'The ID of the approval request being answered.

            '
        approve:
          type: boolean
          description: 'Whether the request was approved.

            '
        reason:
          type: string
          description: 'Optional reason for the decision.

            '
          nullable: true
      required:
      - type
      - id
      - request_id
      - approve
      - approval_request_id
    MCPListTools:
      type: object
      title: MCP list tools
      description: 'A list of tools available on an MCP server.

        '
      properties:
        type:
          type: string
          enum:
          - mcp_list_tools
          description: 'The type of the item. Always `mcp_list_tools`.

            '
          x-stainless-const: true
        id:
          type: string
          description: 'The unique ID of the list.

            '
        server_label:
          type: string
          description: 'The label of the MCP server.

            '
        tools:
          type: array
          items:
            $ref: '#/components/schemas/MCPListToolsTool'
          description: 'The tools available on the server.

            '
        error:
          type: string
          description: 'Error message if the server could not list tools.

            '
          nullable: true
      required:
      - type
      - id
      - server_label
      - tools
    MCPListToolsTool:
      type: object
      title: MCP list tools tool
      description: 'A tool available on an MCP server.

        '
      properties:
        name:
          type: string
          description: 'The name of the tool.

            '
        description:
          type: string
          description: 'The description of the tool.

            '
          nullable: true
        input_schema:
          type: object
          description: 'The JSON schema describing the tool''s input.

            '
        annotations:
          type: object
          description: 'Additional annotations about the tool.

            '
          nullable: true
      required:
      - name
      - input_schema
    MCPTool:
      type: object
      title: MCP tool
      description: "Give the model access to additional tools via remote Model Context\
        \ Protocol \n(MCP) servers. [Learn more about MCP](/docs/guides/tools-remote-mcp).\n"
      properties:
        type:
          type: string
          enum:
          - mcp
          description: The type of the MCP tool. Always `mcp`.
          x-stainless-const: true
        server_label:
          type: string
          description: 'A label for this MCP server, used to identify it in tool calls.

            '
        server_url:
          type: string
          description: 'The URL for the MCP server.

            '
        server_description:
          type: string
          description: 'Optional description of the MCP server, used to provide more
            context.

            '
        headers:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: 'Optional HTTP headers to send to the MCP server. Use for authentication

            or other purposes.

            '
        allowed_tools:
          description: 'List of allowed tool names or a filter object.

            '
          oneOf:
          - type: array
            title: MCP allowed tools
            description: A string array of allowed tool names
            items:
              type: string
          - type: object
            title: MCP allowed tools filter
            description: 'A filter object to specify which tools are allowed.

              '
            properties:
              tool_names:
                type: array
                title: MCP allowed tools
                items:
                  type: string
                description: List of allowed tool names.
            required: []
            additionalProperties: false
          nullable: true
        require_approval:
          description: Specify which of the MCP server's tools require approval.
          oneOf:
          - type: object
            title: MCP tool approval filter
            properties:
              always:
                type: object
                description: 'A list of tools that always require approval.

                  '
                properties:
                  tool_names:
                    type: array
                    items:
                      type: string
                    description: List of tools that require approval.
              never:
                type: object
                description: 'A list of tools that never require approval.

                  '
                properties:
                  tool_names:
                    type: array
                    items:
                      type: string
                    description: List of tools that do not require approval.
            additionalProperties: false
          - type: string
            title: MCP tool approval setting
            description: "Specify a single approval policy for all tools. One of `always`\
              \ or \n`never`. When set to `always`, all tools will require approval.\
              \ When \nset to `never`, all tools will not require approval.\n"
            enum:
            - always
            - never
          default: always
          nullable: true
      required:
      - type
      - server_label
      - server_url
    MCPToolCall:
      type: object
      title: MCP tool call
      description: 'An invocation of a tool on an MCP server.

        '
      properties:
        type:
          type: string
          enum:
          - mcp_call
          description: 'The type of the item. Always `mcp_call`.

            '
          x-stainless-const: true
        id:
          type: string
          description: 'The unique ID of the tool call.

            '
        server_label:
          type: string
          description: 'The label of the MCP server running the tool.

            '
        name:
          type: string
          description: 'The name of the tool that was run.

            '
        arguments:
          type: string
          description: 'A JSON string of the arguments passed to the tool.

            '
        output:
          type: string
          description: 'The output from the tool call.

            '
          nullable: true
        error:
          type: string
          description: 'The error from the tool call, if any.

            '
          nullable: true
      required:
      - type
      - id
      - server_label
      - name
      - arguments
    MessageContentImageFileObject:
      title: Image file
      type: object
      description: References an image [File](/docs/api-reference/files) in the content
        of a message.
      properties:
        type:
          description: Always `image_file`.
          type: string
          enum:
          - image_file
          x-stainless-const: true
        image_file:
          type: object
          properties:
            file_id:
              description: The [File](/docs/api-reference/files) ID of the image in
                the message content. Set `purpose="vision"` when uploading the File
                if you need to later display the file content.
              type: string
            detail:
              type: string
              description: Specifies the detail level of the image if specified by
                the user. `low` uses fewer tokens, you can opt in to high resolution
                using `high`.
              enum:
              - auto
              - low
              - high
              default: auto
          required:
          - file_id
      required:
      - type
      - image_file
    MessageContentImageUrlObject:
      title: Image URL
      type: object
      description: References an image URL in the content of a message.
      properties:
        type:
          type: string
          enum:
          - image_url
          description: The type of the content part.
          x-stainless-const: true
        image_url:
          type: object
          properties:
            url:
              type: string
              description: 'The external URL of the image, must be a supported image
                types: jpeg, jpg, png, gif, webp.'
              format: uri
            detail:
              type: string
              description: Specifies the detail level of the image. `low` uses fewer
                tokens, you can opt in to high resolution using `high`. Default value
                is `auto`
              enum:
              - auto
              - low
              - high
              default: auto
          required:
          - url
      required:
      - type
      - image_url
    MessageContentRefusalObject:
      title: Refusal
      type: object
      description: The refusal content generated by the assistant.
      properties:
        type:
          description: Always `refusal`.
          type: string
          enum:
          - refusal
          x-stainless-const: true
        refusal:
          type: string
          nullable: false
      required:
      - type
      - refusal
    MessageContentTextAnnotationsFileCitationObject:
      title: File citation
      type: object
      description: A citation within the message that points to a specific quote from
        a specific File associated with the assistant or the message. Generated when
        the assistant uses the "file_search" tool to search files.
      properties:
        type:
          description: Always `file_citation`.
          type: string
          enum:
          - file_citation
          x-stainless-const: true
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        file_citation:
          type: object
          properties:
            file_id:
              description: The ID of the specific File the citation is from.
              type: string
          required:
          - file_id
        start_index:
          type: integer
          minimum: 0
        end_index:
          type: integer
          minimum: 0
      required:
      - type
      - text
      - file_citation
      - start_index
      - end_index
    MessageContentTextAnnotationsFilePathObject:
      title: File path
      type: object
      description: A URL for the file that's generated when the assistant used the
        `code_interpreter` tool to generate a file.
      properties:
        type:
          description: Always `file_path`.
          type: string
          enum:
          - file_path
          x-stainless-const: true
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        file_path:
          type: object
          properties:
            file_id:
              description: The ID of the file that was generated.
              type: string
          required:
          - file_id
        start_index:
          type: integer
          minimum: 0
        end_index:
          type: integer
          minimum: 0
      required:
      - type
      - text
      - file_path
      - start_index
      - end_index
    MessageContentTextObject:
      title: Text
      type: object
      description: The text content that is part of a message.
      properties:
        type:
          description: Always `text`.
          type: string
          enum:
          - text
          x-stainless-const: true
        text:
          type: object
          properties:
            value:
              description: The data that makes up the text.
              type: string
            annotations:
              type: array
              items:
                oneOf:
                - $ref: '#/components/schemas/MessageContentTextAnnotationsFileCitationObject'
                - $ref: '#/components/schemas/MessageContentTextAnnotationsFilePathObject'
          required:
          - value
          - annotations
      required:
      - type
      - text
    MessageDeltaContentImageFileObject:
      title: Image file
      type: object
      description: References an image [File](/docs/api-reference/files) in the content
        of a message.
      properties:
        index:
          type: integer
          description: The index of the content part in the message.
        type:
          description: Always `image_file`.
          type: string
          enum:
          - image_file
          x-stainless-const: true
        image_file:
          type: object
          properties:
            file_id:
              description: The [File](/docs/api-reference/files) ID of the image in
                the message content. Set `purpose="vision"` when uploading the File
                if you need to later display the file content.
              type: string
            detail:
              type: string
              description: Specifies the detail level of the image if specified by
                the user. `low` uses fewer tokens, you can opt in to high resolution
                using `high`.
              enum:
              - auto
              - low
              - high
              default: auto
      required:
      - index
      - type
    MessageDeltaContentImageUrlObject:
      title: Image URL
      type: object
      description: References an image URL in the content of a message.
      properties:
        index:
          type: integer
          description: The index of the content part in the message.
        type:
          description: Always `image_url`.
          type: string
          enum:
          - image_url
          x-stainless-const: true
        image_url:
          type: object
          properties:
            url:
              description: 'The URL of the image, must be a supported image types:
                jpeg, jpg, png, gif, webp.'
              type: string
            detail:
              type: string
              description: Specifies the detail level of the image. `low` uses fewer
                tokens, you can opt in to high resolution using `high`.
              enum:
              - auto
              - low
              - high
              default: auto
      required:
      - index
      - type
    MessageDeltaContentRefusalObject:
      title: Refusal
      type: object
      description: The refusal content that is part of a message.
      properties:
        index:
          type: integer
          description: The index of the refusal part in the message.
        type:
          description: Always `refusal`.
          type: string
          enum:
          - refusal
          x-stainless-const: true
        refusal:
          type: string
      required:
      - index
      - type
    MessageDeltaContentTextAnnotationsFileCitationObject:
      title: File citation
      type: object
      description: A citation within the message that points to a specific quote from
        a specific File associated with the assistant or the message. Generated when
        the assistant uses the "file_search" tool to search files.
      properties:
        index:
          type: integer
          description: The index of the annotation in the text content part.
        type:
          description: Always `file_citation`.
          type: string
          enum:
          - file_citation
          x-stainless-const: true
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        file_citation:
          type: object
          properties:
            file_id:
              description: The ID of the specific File the citation is from.
              type: string
            quote:
              description: The specific quote in the file.
              type: string
        start_index:
          type: integer
          minimum: 0
        end_index:
          type: integer
          minimum: 0
      required:
      - index
      - type
    MessageDeltaContentTextAnnotationsFilePathObject:
      title: File path
      type: object
      description: A URL for the file that's generated when the assistant used the
        `code_interpreter` tool to generate a file.
      properties:
        index:
          type: integer
          description: The index of the annotation in the text content part.
        type:
          description: Always `file_path`.
          type: string
          enum:
          - file_path
          x-stainless-const: true
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        file_path:
          type: object
          properties:
            file_id:
              description: The ID of the file that was generated.
              type: string
        start_index:
          type: integer
          minimum: 0
        end_index:
          type: integer
          minimum: 0
      required:
      - index
      - type
    MessageDeltaContentTextObject:
      title: Text
      type: object
      description: The text content that is part of a message.
      properties:
        index:
          type: integer
          description: The index of the content part in the message.
        type:
          description: Always `text`.
          type: string
          enum:
          - text
          x-stainless-const: true
        text:
          type: object
          properties:
            value:
              description: The data that makes up the text.
              type: string
            annotations:
              type: array
              items:
                oneOf:
                - $ref: '#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject'
                - $ref: '#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject'
      required:
      - index
      - type
    MessageDeltaObject:
      type: object
      title: Message delta object
      description: 'Represents a message delta i.e. any changed fields on a message
        during streaming.

        '
      properties:
        id:
          description: The identifier of the message, which can be referenced in API
            endpoints.
          type: string
        object:
          description: The object type, which is always `thread.message.delta`.
          type: string
          enum:
          - thread.message.delta
          x-stainless-const: true
        delta:
          description: The delta containing the fields that have changed on the Message.
          type: object
          properties:
            role:
              description: The entity that produced the message. One of `user` or
                `assistant`.
              type: string
              enum:
              - user
              - assistant
            content:
              description: The content of the message in array of text and/or images.
              type: array
              items:
                oneOf:
                - $ref: '#/components/schemas/MessageDeltaContentImageFileObject'
                - $ref: '#/components/schemas/MessageDeltaContentTextObject'
                - $ref: '#/components/schemas/MessageDeltaContentRefusalObject'
                - $ref: '#/components/schemas/MessageDeltaContentImageUrlObject'
      required:
      - id
      - object
      - delta
    MessageObject:
      type: object
      title: The message object
      description: Represents a message within a [thread](/docs/api-reference/threads).
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `thread.message`.
          type: string
          enum:
          - thread.message
          x-stainless-const: true
        created_at:
          description: The Unix timestamp (in seconds) for when the message was created.
          type: integer
        thread_id:
          description: The [thread](/docs/api-reference/threads) ID that this message
            belongs to.
          type: string
        status:
          description: The status of the message, which can be either `in_progress`,
            `incomplete`, or `completed`.
          type: string
          enum:
          - in_progress
          - incomplete
          - completed
        incomplete_details:
          description: On an incomplete message, details about why the message is
            incomplete.
          type: object
          properties:
            reason:
              type: string
              description: The reason the message is incomplete.
              enum:
              - content_filter
              - max_tokens
              - run_cancelled
              - run_expired
              - run_failed
          nullable: true
          required:
          - reason
        completed_at:
          description: The Unix timestamp (in seconds) for when the message was completed.
          type: integer
          nullable: true
        incomplete_at:
          description: The Unix timestamp (in seconds) for when the message was marked
            as incomplete.
          type: integer
          nullable: true
        role:
          description: The entity that produced the message. One of `user` or `assistant`.
          type: string
          enum:
          - user
          - assistant
        content:
          description: The content of the message in array of text and/or images.
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/MessageContentImageFileObject'
            - $ref: '#/components/schemas/MessageContentImageUrlObject'
            - $ref: '#/components/schemas/MessageContentTextObject'
            - $ref: '#/components/schemas/MessageContentRefusalObject'
        assistant_id:
          description: If applicable, the ID of the [assistant](/docs/api-reference/assistants)
            that authored this message.
          type: string
          nullable: true
        run_id:
          description: The ID of the [run](/docs/api-reference/runs) associated with
            the creation of this message. Value is `null` when messages are created
            manually using the create message or create thread endpoints.
          type: string
          nullable: true
        attachments:
          type: array
          items:
            type: object
            properties:
              file_id:
                type: string
                description: The ID of the file to attach to the message.
              tools:
                description: The tools to add this file to.
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/AssistantToolsCode'
                  - $ref: '#/components/schemas/AssistantToolsFileSearchTypeOnly'
          description: A list of files attached to the message, and the tools they
            were added to.
          nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
      - id
      - object
      - created_at
      - thread_id
      - status
      - incomplete_details
      - completed_at
      - incomplete_at
      - role
      - content
      - assistant_id
      - run_id
      - attachments
      - metadata
    MessageRequestContentTextObject:
      title: Text
      type: object
      description: The text content that is part of a message.
      properties:
        type:
          description: Always `text`.
          type: string
          enum:
          - text
          x-stainless-const: true
        text:
          type: string
          description: Text content to be sent to the model
      required:
      - type
      - text
    MessageStreamEvent:
      oneOf:
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.message.created
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/MessageObject'
        required:
        - event
        - data
        description: Occurs when a [message](/docs/api-reference/messages/object)
          is created.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.message.in_progress
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/MessageObject'
        required:
        - event
        - data
        description: Occurs when a [message](/docs/api-reference/messages/object)
          moves to an `in_progress` state.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.message.delta
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/MessageDeltaObject'
        required:
        - event
        - data
        description: Occurs when parts of a [Message](/docs/api-reference/messages/object)
          are being streamed.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.message.completed
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/MessageObject'
        required:
        - event
        - data
        description: Occurs when a [message](/docs/api-reference/messages/object)
          is completed.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.message.incomplete
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/MessageObject'
        required:
        - event
        - data
        description: Occurs when a [message](/docs/api-reference/messages/object)
          ends before it is completed.
    Metadata:
      type: object
      description: "Set of 16 key-value pairs that can be attached to an object. This\
        \ can be\nuseful for storing additional information about the object in a\
        \ structured\nformat, and querying for objects via API or the dashboard. \n\
        \nKeys are strings with a maximum length of 64 characters. Values are strings\n\
        with a maximum length of 512 characters.\n"
      additionalProperties:
        type: string
      x-oaiTypeLabel: map
      nullable: true
    Model:
      title: Model
      description: Describes an OpenAI model offering that can be used with the API.
      properties:
        id:
          type: string
          description: The model identifier, which can be referenced in the API endpoints.
        created:
          type: integer
          description: The Unix timestamp (in seconds) when the model was created.
        object:
          type: string
          description: The object type, which is always "model".
          enum:
          - model
          x-stainless-const: true
        owned_by:
          type: string
          description: The organization that owns the model.
      required:
      - id
      - object
      - created
      - owned_by
    ModelIds:
      anyOf:
      - $ref: '#/components/schemas/ModelIdsShared'
      - $ref: '#/components/schemas/ModelIdsResponses'
    ModelIdsResponses:
      example: gpt-4o
      anyOf:
      - $ref: '#/components/schemas/ModelIdsShared'
      - type: string
        title: ResponsesOnlyModel
        enum:
        - o1-pro
        - o1-pro-2025-03-19
        - o3-pro
        - o3-pro-2025-06-10
        - o3-deep-research
        - o3-deep-research-2025-06-26
        - o4-mini-deep-research
        - o4-mini-deep-research-2025-06-26
        - computer-use-preview
        - computer-use-preview-2025-03-11
    ModelIdsShared:
      example: gpt-4o
      anyOf:
      - type: string
      - type: string
        enum:
        - gpt-4.1
        - gpt-4.1-mini
        - gpt-4.1-nano
        - gpt-4.1-2025-04-14
        - gpt-4.1-mini-2025-04-14
        - gpt-4.1-nano-2025-04-14
        - o4-mini
        - o4-mini-2025-04-16
        - o3
        - o3-2025-04-16
        - o3-mini
        - o3-mini-2025-01-31
        - o1
        - o1-2024-12-17
        - o1-preview
        - o1-preview-2024-09-12
        - o1-mini
        - o1-mini-2024-09-12
        - gpt-4o
        - gpt-4o-2024-11-20
        - gpt-4o-2024-08-06
        - gpt-4o-2024-05-13
        - gpt-4o-audio-preview
        - gpt-4o-audio-preview-2024-10-01
        - gpt-4o-audio-preview-2024-12-17
        - gpt-4o-audio-preview-2025-06-03
        - gpt-4o-mini-audio-preview
        - gpt-4o-mini-audio-preview-2024-12-17
        - gpt-4o-search-preview
        - gpt-4o-mini-search-preview
        - gpt-4o-search-preview-2025-03-11
        - gpt-4o-mini-search-preview-2025-03-11
        - chatgpt-4o-latest
        - codex-mini-latest
        - gpt-4o-mini
        - gpt-4o-mini-2024-07-18
        - gpt-4-turbo
        - gpt-4-turbo-2024-04-09
        - gpt-4-0125-preview
        - gpt-4-turbo-preview
        - gpt-4-1106-preview
        - gpt-4-vision-preview
        - gpt-4
        - gpt-4-0314
        - gpt-4-0613
        - gpt-4-32k
        - gpt-4-32k-0314
        - gpt-4-32k-0613
        - gpt-3.5-turbo
        - gpt-3.5-turbo-16k
        - gpt-3.5-turbo-0301
        - gpt-3.5-turbo-0613
        - gpt-3.5-turbo-1106
        - gpt-3.5-turbo-0125
        - gpt-3.5-turbo-16k-0613
    ModelResponseProperties:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        top_logprobs:
          description: 'An integer between 0 and 20 specifying the number of most
            likely tokens to

            return at each token position, each with an associated log probability.

            '
          type: integer
          minimum: 0
          maximum: 20
          nullable: true
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.

            '
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: 'An alternative to sampling with temperature, called nucleus
            sampling,

            where the model considers the results of the tokens with top_p probability

            mass. So 0.1 means only the tokens comprising the top 10% probability
            mass

            are considered.


            We generally recommend altering this or `temperature` but not both.

            '
        user:
          type: string
          example: user-1234
          description: "A stable identifier for your end-users. \nUsed to boost cache\
            \ hit rates by better bucketing similar requests and  to help OpenAI detect\
            \ and prevent abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n"
        service_tier:
          $ref: '#/components/schemas/ServiceTier'
    ModifyAssistantRequest:
      type: object
      additionalProperties: false
      properties:
        model:
          description: 'ID of the model to use. You can use the [List models](/docs/api-reference/models/list)
            API to see all of your available models, or see our [Model overview](/docs/models)
            for descriptions of them.

            '
          anyOf:
          - type: string
          - $ref: '#/components/schemas/AssistantSupportedModels'
        reasoning_effort:
          $ref: '#/components/schemas/ReasoningEffort'
        name:
          description: 'The name of the assistant. The maximum length is 256 characters.

            '
          type: string
          nullable: true
          maxLength: 256
        description:
          description: 'The description of the assistant. The maximum length is 512
            characters.

            '
          type: string
          nullable: true
          maxLength: 512
        instructions:
          description: 'The system instructions that the assistant uses. The maximum
            length is 256,000 characters.

            '
          type: string
          nullable: true
          maxLength: 256000
        tools:
          description: 'A list of tool enabled on the assistant. There can be a maximum
            of 128 tools per assistant. Tools can be of types `code_interpreter`,
            `file_search`, or `function`.

            '
          default: []
          type: array
          maxItems: 128
          items:
            oneOf:
            - $ref: '#/components/schemas/AssistantToolsCode'
            - $ref: '#/components/schemas/AssistantToolsFileSearch'
            - $ref: '#/components/schemas/AssistantToolsFunction'
        tool_resources:
          type: object
          description: 'A set of resources that are used by the assistant''s tools.
            The resources are specific to the type of tool. For example, the `code_interpreter`
            tool requires a list of file IDs, while the `file_search` tool requires
            a list of vector store IDs.

            '
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: 'Overrides the list of [file](/docs/api-reference/files)
                    IDs made available to the `code_interpreter` tool. There can be
                    a maximum of 20 files associated with the tool.

                    '
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: 'Overrides the [vector store](/docs/api-reference/vector-stores/object)
                    attached to this assistant. There can be a maximum of 1 vector
                    store attached to the assistant.

                    '
                  maxItems: 1
                  items:
                    type: string
          nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
        temperature:
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            '
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: 'An alternative to sampling with temperature, called nucleus
            sampling, where the model considers the results of the tokens with top_p
            probability mass. So 0.1 means only the tokens comprising the top 10%
            probability mass are considered.


            We generally recommend altering this or temperature but not both.

            '
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
    ModifyCertificateRequest:
      type: object
      properties:
        name:
          type: string
          description: The updated name for the certificate
      required:
      - name
    ModifyMessageRequest:
      type: object
      additionalProperties: false
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
    ModifyRunRequest:
      type: object
      additionalProperties: false
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
    ModifyThreadRequest:
      type: object
      additionalProperties: false
      properties:
        tool_resources:
          type: object
          description: 'A set of resources that are made available to the assistant''s
            tools in this thread. The resources are specific to the type of tool.
            For example, the `code_interpreter` tool requires a list of file IDs,
            while the `file_search` tool requires a list of vector store IDs.

            '
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: 'A list of [file](/docs/api-reference/files) IDs made
                    available to the `code_interpreter` tool. There can be a maximum
                    of 20 files associated with the tool.

                    '
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: 'The [vector store](/docs/api-reference/vector-stores/object)
                    attached to this thread. There can be a maximum of 1 vector store
                    attached to the thread.

                    '
                  maxItems: 1
                  items:
                    type: string
          nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
    Move:
      type: object
      title: Move
      description: 'A mouse move action.

        '
      properties:
        type:
          type: string
          enum:
          - move
          default: move
          description: "Specifies the event type. For a move action, this property\
            \ is \nalways set to `move`.\n"
          x-stainless-const: true
        x:
          type: integer
          description: 'The x-coordinate to move to.

            '
        y:
          type: integer
          description: 'The y-coordinate to move to.

            '
      required:
      - type
      - x
      - y
    OpenAIFile:
      title: OpenAIFile
      description: The `File` object represents a document that has been uploaded
        to OpenAI.
      properties:
        id:
          type: string
          description: The file identifier, which can be referenced in the API endpoints.
        bytes:
          type: integer
          description: The size of the file, in bytes.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the file was created.
        expires_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the file will expire.
        filename:
          type: string
          description: The name of the file.
        object:
          type: string
          description: The object type, which is always `file`.
          enum:
          - file
          x-stainless-const: true
        purpose:
          type: string
          description: The intended purpose of the file. Supported values are `assistants`,
            `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results`,
            `vision`, and `user_data`.
          enum:
          - assistants
          - assistants_output
          - batch
          - batch_output
          - fine-tune
          - fine-tune-results
          - vision
          - user_data
        status:
          type: string
          deprecated: true
          description: Deprecated. The current status of the file, which can be either
            `uploaded`, `processed`, or `error`.
          enum:
          - uploaded
          - processed
          - error
        status_details:
          type: string
          deprecated: true
          description: Deprecated. For details on why a fine-tuning training file
            failed validation, see the `error` field on `fine_tuning.job`.
      required:
      - id
      - object
      - bytes
      - created_at
      - filename
      - purpose
      - status
    OtherChunkingStrategyResponseParam:
      type: object
      title: Other Chunking Strategy
      description: This is returned when the chunking strategy is unknown. Typically,
        this is because the file was indexed before the `chunking_strategy` concept
        was introduced in the API.
      additionalProperties: false
      properties:
        type:
          type: string
          description: Always `other`.
          enum:
          - other
          x-stainless-const: true
      required:
      - type
    OutputAudio:
      type: object
      title: Output audio
      description: 'An audio output from the model.

        '
      properties:
        type:
          type: string
          description: 'The type of the output audio. Always `output_audio`.

            '
          enum:
          - output_audio
          x-stainless-const: true
        data:
          type: string
          description: 'Base64-encoded audio data from the model.

            '
        transcript:
          type: string
          description: 'The transcript of the audio data from the model.

            '
      required:
      - type
      - data
      - transcript
    OutputContent:
      oneOf:
      - $ref: '#/components/schemas/OutputTextContent'
      - $ref: '#/components/schemas/RefusalContent'
    OutputItem:
      anyOf:
      - $ref: '#/components/schemas/OutputMessage'
      - $ref: '#/components/schemas/FileSearchToolCall'
      - $ref: '#/components/schemas/FunctionToolCall'
      - $ref: '#/components/schemas/WebSearchToolCall'
      - $ref: '#/components/schemas/ComputerToolCall'
      - $ref: '#/components/schemas/ReasoningItem'
      - $ref: '#/components/schemas/ImageGenToolCall'
      - $ref: '#/components/schemas/CodeInterpreterToolCall'
      - $ref: '#/components/schemas/LocalShellToolCall'
      - $ref: '#/components/schemas/MCPToolCall'
      - $ref: '#/components/schemas/MCPListTools'
      - $ref: '#/components/schemas/MCPApprovalRequest'
      discriminator:
        propertyName: type
    OutputMessage:
      type: object
      title: Output message
      description: 'An output message from the model.

        '
      properties:
        id:
          type: string
          description: 'The unique ID of the output message.

            '
        type:
          type: string
          description: 'The type of the output message. Always `message`.

            '
          enum:
          - message
          x-stainless-const: true
        role:
          type: string
          description: 'The role of the output message. Always `assistant`.

            '
          enum:
          - assistant
          x-stainless-const: true
        content:
          type: array
          description: 'The content of the output message.

            '
          items:
            $ref: '#/components/schemas/OutputContent'
        status:
          type: string
          description: 'The status of the message input. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when input items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
      required:
      - id
      - type
      - role
      - content
      - status
    ParallelToolCalls:
      description: Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling)
        during tool use.
      type: boolean
      default: true
    PartialImages:
      type: integer
      maximum: 3
      minimum: 0
      default: 0
      example: 1
      nullable: true
      description: "The number of partial images to generate. This parameter is used\
        \ for\nstreaming responses that return partial images. Value must be between\
        \ 0 and 3.\nWhen set to 0, the response will be a single image sent in one\
        \ streaming event.\n\nNote that the final image may be sent before the full\
        \ number of partial images \nare generated if the full image is generated\
        \ more quickly.\n"
    PredictionContent:
      type: object
      title: Static Content
      description: 'Static predicted output content, such as the content of a text
        file that is

        being regenerated.

        '
      required:
      - type
      - content
      properties:
        type:
          type: string
          enum:
          - content
          description: 'The type of the predicted content you want to provide. This
            type is

            currently always `content`.

            '
          x-stainless-const: true
        content:
          description: 'The content that should be matched when generating a model
            response.

            If generated tokens would match this content, the entire model response

            can be returned much more quickly.

            '
          oneOf:
          - type: string
            title: Text content
            description: 'The content used for a Predicted Output. This is often the

              text of a file you are regenerating with minor changes.

              '
          - type: array
            description: An array of content parts with a defined type. Supported
              options differ based on the [model](/docs/models) being used to generate
              the response. Can contain text inputs.
            title: Array of content parts
            items:
              $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
            minItems: 1
    Project:
      type: object
      description: Represents an individual project.
      properties:
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints
        object:
          type: string
          enum:
          - organization.project
          description: The object type, which is always `organization.project`
          x-stainless-const: true
        name:
          type: string
          description: The name of the project. This appears in reporting.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the project was created.
        archived_at:
          type: integer
          nullable: true
          description: The Unix timestamp (in seconds) of when the project was archived
            or `null`.
        status:
          type: string
          enum:
          - active
          - archived
          description: '`active` or `archived`'
      required:
      - id
      - object
      - name
      - created_at
      - status
    ProjectApiKey:
      type: object
      description: Represents an individual API key in a project.
      properties:
        object:
          type: string
          enum:
          - organization.project.api_key
          description: The object type, which is always `organization.project.api_key`
          x-stainless-const: true
        redacted_value:
          type: string
          description: The redacted value of the API key
        name:
          type: string
          description: The name of the API key
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the API key was created
        last_used_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the API key was last
            used.
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints
        owner:
          type: object
          properties:
            type:
              type: string
              enum:
              - user
              - service_account
              description: '`user` or `service_account`'
            user:
              $ref: '#/components/schemas/ProjectUser'
            service_account:
              $ref: '#/components/schemas/ProjectServiceAccount'
      required:
      - object
      - redacted_value
      - name
      - created_at
      - last_used_at
      - id
      - owner
    ProjectApiKeyDeleteResponse:
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.project.api_key.deleted
          x-stainless-const: true
        id:
          type: string
        deleted:
          type: boolean
      required:
      - object
      - id
      - deleted
    ProjectApiKeyListResponse:
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProjectApiKey'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ProjectCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: The friendly name of the project, this name appears in reports.
      required:
      - name
    ProjectListResponse:
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ProjectRateLimit:
      type: object
      description: Represents a project rate limit config.
      properties:
        object:
          type: string
          enum:
          - project.rate_limit
          description: The object type, which is always `project.rate_limit`
          x-stainless-const: true
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints.
        model:
          type: string
          description: The model this rate limit applies to.
        max_requests_per_1_minute:
          type: integer
          description: The maximum requests per minute.
        max_tokens_per_1_minute:
          type: integer
          description: The maximum tokens per minute.
        max_images_per_1_minute:
          type: integer
          description: The maximum images per minute. Only present for relevant models.
        max_audio_megabytes_per_1_minute:
          type: integer
          description: The maximum audio megabytes per minute. Only present for relevant
            models.
        max_requests_per_1_day:
          type: integer
          description: The maximum requests per day. Only present for relevant models.
        batch_1_day_max_input_tokens:
          type: integer
          description: The maximum batch input tokens per day. Only present for relevant
            models.
      required:
      - object
      - id
      - model
      - max_requests_per_1_minute
      - max_tokens_per_1_minute
    ProjectRateLimitListResponse:
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProjectRateLimit'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ProjectRateLimitUpdateRequest:
      type: object
      properties:
        max_requests_per_1_minute:
          type: integer
          description: The maximum requests per minute.
        max_tokens_per_1_minute:
          type: integer
          description: The maximum tokens per minute.
        max_images_per_1_minute:
          type: integer
          description: The maximum images per minute. Only relevant for certain models.
        max_audio_megabytes_per_1_minute:
          type: integer
          description: The maximum audio megabytes per minute. Only relevant for certain
            models.
        max_requests_per_1_day:
          type: integer
          description: The maximum requests per day. Only relevant for certain models.
        batch_1_day_max_input_tokens:
          type: integer
          description: The maximum batch input tokens per day. Only relevant for certain
            models.
    ProjectServiceAccount:
      type: object
      description: Represents an individual service account in a project.
      properties:
        object:
          type: string
          enum:
          - organization.project.service_account
          description: The object type, which is always `organization.project.service_account`
          x-stainless-const: true
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints
        name:
          type: string
          description: The name of the service account
        role:
          type: string
          enum:
          - owner
          - member
          description: '`owner` or `member`'
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the service account
            was created
      required:
      - object
      - id
      - name
      - role
      - created_at
    ProjectServiceAccountApiKey:
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.project.service_account.api_key
          description: The object type, which is always `organization.project.service_account.api_key`
          x-stainless-const: true
        value:
          type: string
        name:
          type: string
        created_at:
          type: integer
        id:
          type: string
      required:
      - object
      - value
      - name
      - created_at
      - id
    ProjectServiceAccountCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the service account being created.
      required:
      - name
    ProjectServiceAccountCreateResponse:
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.project.service_account
          x-stainless-const: true
        id:
          type: string
        name:
          type: string
        role:
          type: string
          enum:
          - member
          description: Service accounts can only have one role of type `member`
          x-stainless-const: true
        created_at:
          type: integer
        api_key:
          $ref: '#/components/schemas/ProjectServiceAccountApiKey'
      required:
      - object
      - id
      - name
      - role
      - created_at
      - api_key
    ProjectServiceAccountDeleteResponse:
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.project.service_account.deleted
          x-stainless-const: true
        id:
          type: string
        deleted:
          type: boolean
      required:
      - object
      - id
      - deleted
    ProjectServiceAccountListResponse:
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProjectServiceAccount'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ProjectUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: The updated name of the project, this name appears in reports.
      required:
      - name
    ProjectUser:
      type: object
      description: Represents an individual user in a project.
      properties:
        object:
          type: string
          enum:
          - organization.project.user
          description: The object type, which is always `organization.project.user`
          x-stainless-const: true
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email address of the user
        role:
          type: string
          enum:
          - owner
          - member
          description: '`owner` or `member`'
        added_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the project was added.
      required:
      - object
      - id
      - name
      - email
      - role
      - added_at
    ProjectUserCreateRequest:
      type: object
      properties:
        user_id:
          type: string
          description: The ID of the user.
        role:
          type: string
          enum:
          - owner
          - member
          description: '`owner` or `member`'
      required:
      - user_id
      - role
    ProjectUserDeleteResponse:
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.project.user.deleted
          x-stainless-const: true
        id:
          type: string
        deleted:
          type: boolean
      required:
      - object
      - id
      - deleted
    ProjectUserListResponse:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProjectUser'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ProjectUserUpdateRequest:
      type: object
      properties:
        role:
          type: string
          enum:
          - owner
          - member
          description: '`owner` or `member`'
      required:
      - role
    Prompt:
      type: object
      nullable: true
      description: "Reference to a prompt template and its variables. \n[Learn more](/docs/guides/text?api-mode=responses#reusable-prompts).\n"
      required:
      - id
      properties:
        id:
          type: string
          description: The unique identifier of the prompt template to use.
        version:
          type: string
          description: Optional version of the prompt template.
          nullable: true
        variables:
          $ref: '#/components/schemas/ResponsePromptVariables'
    RealtimeClientEvent:
      discriminator:
        propertyName: type
      description: 'A realtime client event.

        '
      anyOf:
      - $ref: '#/components/schemas/RealtimeClientEventConversationItemCreate'
      - $ref: '#/components/schemas/RealtimeClientEventConversationItemDelete'
      - $ref: '#/components/schemas/RealtimeClientEventConversationItemRetrieve'
      - $ref: '#/components/schemas/RealtimeClientEventConversationItemTruncate'
      - $ref: '#/components/schemas/RealtimeClientEventInputAudioBufferAppend'
      - $ref: '#/components/schemas/RealtimeClientEventInputAudioBufferClear'
      - $ref: '#/components/schemas/RealtimeClientEventOutputAudioBufferClear'
      - $ref: '#/components/schemas/RealtimeClientEventInputAudioBufferCommit'
      - $ref: '#/components/schemas/RealtimeClientEventResponseCancel'
      - $ref: '#/components/schemas/RealtimeClientEventResponseCreate'
      - $ref: '#/components/schemas/RealtimeClientEventSessionUpdate'
      - $ref: '#/components/schemas/RealtimeClientEventTranscriptionSessionUpdate'
    RealtimeClientEventConversationItemCreate:
      type: object
      description: "Add a new Item to the Conversation's context, including messages,\
        \ function \ncalls, and function call responses. This event can be used both\
        \ to populate a \n\"history\" of the conversation and to add new items mid-stream,\
        \ but has the \ncurrent limitation that it cannot populate assistant audio\
        \ messages.\n\nIf successful, the server will respond with a `conversation.item.created`\
        \ \nevent, otherwise an `error` event will be sent.\n"
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          enum:
          - conversation.item.create
          description: The event type, must be `conversation.item.create`.
          x-stainless-const: true
        previous_item_id:
          type: string
          description: "The ID of the preceding item after which the new item will\
            \ be inserted. \nIf not set, the new item will be appended to the end\
            \ of the conversation.\nIf set to `root`, the new item will be added to\
            \ the beginning of the conversation.\nIf set to an existing ID, it allows\
            \ an item to be inserted mid-conversation. If the\nID cannot be found,\
            \ an error will be returned and the item will not be added.\n"
        item:
          $ref: '#/components/schemas/RealtimeConversationItem'
      required:
      - type
      - item
    RealtimeClientEventConversationItemDelete:
      type: object
      description: "Send this event when you want to remove any item from the conversation\
        \ \nhistory. The server will respond with a `conversation.item.deleted` event,\
        \ \nunless the item does not exist in the conversation history, in which case\
        \ the \nserver will respond with an error.\n"
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          enum:
          - conversation.item.delete
          description: The event type, must be `conversation.item.delete`.
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the item to delete.
      required:
      - type
      - item_id
    RealtimeClientEventConversationItemRetrieve:
      type: object
      description: "Send this event when you want to retrieve the server's representation\
        \ of a specific item in the conversation history. This is useful, for example,\
        \ to inspect user audio after noise cancellation and VAD.\nThe server will\
        \ respond with a `conversation.item.retrieved` event, \nunless the item does\
        \ not exist in the conversation history, in which case the \nserver will respond\
        \ with an error.\n"
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          enum:
          - conversation.item.retrieve
          description: The event type, must be `conversation.item.retrieve`.
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the item to retrieve.
      required:
      - type
      - item_id
    RealtimeClientEventConversationItemTruncate:
      type: object
      description: "Send this event to truncate a previous assistant message’s audio.\
        \ The server \nwill produce audio faster than realtime, so this event is useful\
        \ when the user \ninterrupts to truncate audio that has already been sent\
        \ to the client but not \nyet played. This will synchronize the server's understanding\
        \ of the audio with \nthe client's playback.\n\nTruncating audio will delete\
        \ the server-side text transcript to ensure there \nis not text in the context\
        \ that hasn't been heard by the user.\n\nIf successful, the server will respond\
        \ with a `conversation.item.truncated` \nevent.\n"
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          enum:
          - conversation.item.truncate
          description: The event type, must be `conversation.item.truncate`.
          x-stainless-const: true
        item_id:
          type: string
          description: "The ID of the assistant message item to truncate. Only assistant\
            \ message \nitems can be truncated.\n"
        content_index:
          type: integer
          description: The index of the content part to truncate. Set this to 0.
        audio_end_ms:
          type: integer
          description: "Inclusive duration up to which audio is truncated, in milliseconds.\
            \ If \nthe audio_end_ms is greater than the actual audio duration, the\
            \ server \nwill respond with an error.\n"
      required:
      - type
      - item_id
      - content_index
      - audio_end_ms
    RealtimeClientEventInputAudioBufferAppend:
      type: object
      description: "Send this event to append audio bytes to the input audio buffer.\
        \ The audio \nbuffer is temporary storage you can write to and later commit.\
        \ In Server VAD \nmode, the audio buffer is used to detect speech and the\
        \ server will decide \nwhen to commit. When Server VAD is disabled, you must\
        \ commit the audio buffer\nmanually.\n\nThe client may choose how much audio\
        \ to place in each event up to a maximum \nof 15 MiB, for example streaming\
        \ smaller chunks from the client may allow the \nVAD to be more responsive.\
        \ Unlike made other client events, the server will \nnot send a confirmation\
        \ response to this event.\n"
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          enum:
          - input_audio_buffer.append
          description: The event type, must be `input_audio_buffer.append`.
          x-stainless-const: true
        audio:
          type: string
          description: "Base64-encoded audio bytes. This must be in the format specified\
            \ by the \n`input_audio_format` field in the session configuration.\n"
      required:
      - type
      - audio
    RealtimeClientEventInputAudioBufferClear:
      type: object
      description: "Send this event to clear the audio bytes in the buffer. The server\
        \ will \nrespond with an `input_audio_buffer.cleared` event.\n"
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          enum:
          - input_audio_buffer.clear
          description: The event type, must be `input_audio_buffer.clear`.
          x-stainless-const: true
      required:
      - type
    RealtimeClientEventInputAudioBufferCommit:
      type: object
      description: "Send this event to commit the user input audio buffer, which will\
        \ create a \nnew user message item in the conversation. This event will produce\
        \ an error \nif the input audio buffer is empty. When in Server VAD mode,\
        \ the client does \nnot need to send this event, the server will commit the\
        \ audio buffer \nautomatically.\n\nCommitting the input audio buffer will\
        \ trigger input audio transcription \n(if enabled in session configuration),\
        \ but it will not create a response \nfrom the model. The server will respond\
        \ with an `input_audio_buffer.committed` \nevent.\n"
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          enum:
          - input_audio_buffer.commit
          description: The event type, must be `input_audio_buffer.commit`.
          x-stainless-const: true
      required:
      - type
    RealtimeClientEventOutputAudioBufferClear:
      type: object
      description: "**WebRTC Only:** Emit to cut off the current audio response. This\
        \ will trigger the server to\nstop generating audio and emit a `output_audio_buffer.cleared`\
        \ event. This \nevent should be preceded by a `response.cancel` client event\
        \ to stop the \ngeneration of the current response.\n[Learn more](/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).\n"
      properties:
        event_id:
          type: string
          description: The unique ID of the client event used for error handling.
        type:
          type: string
          enum:
          - output_audio_buffer.clear
          description: The event type, must be `output_audio_buffer.clear`.
          x-stainless-const: true
      required:
      - type
    RealtimeClientEventResponseCancel:
      type: object
      description: "Send this event to cancel an in-progress response. The server\
        \ will respond \nwith a `response.cancelled` event or an error if there is\
        \ no response to \ncancel.\n"
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          enum:
          - response.cancel
          description: The event type, must be `response.cancel`.
          x-stainless-const: true
        response_id:
          type: string
          description: "A specific response ID to cancel - if not provided, will cancel\
            \ an \nin-progress response in the default conversation.\n"
      required:
      - type
    RealtimeClientEventResponseCreate:
      type: object
      description: "This event instructs the server to create a Response, which means\
        \ triggering \nmodel inference. When in Server VAD mode, the server will create\
        \ Responses \nautomatically.\n\nA Response will include at least one Item,\
        \ and may have two, in which case \nthe second will be a function call. These\
        \ Items will be appended to the \nconversation history.\n\nThe server will\
        \ respond with a `response.created` event, events for Items \nand content\
        \ created, and finally a `response.done` event to indicate the \nResponse\
        \ is complete.\n\nThe `response.create` event includes inference configuration\
        \ like \n`instructions`, and `temperature`. These fields will override the\
        \ Session's \nconfiguration for this Response only.\n"
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          enum:
          - response.create
          description: The event type, must be `response.create`.
          x-stainless-const: true
        response:
          $ref: '#/components/schemas/RealtimeResponseCreateParams'
      required:
      - type
    RealtimeClientEventSessionUpdate:
      type: object
      description: 'Send this event to update the session’s default configuration.

        The client may send this event at any time to update any field,

        except for `voice`. However, note that once a session has been

        initialized with a particular `model`, it can’t be changed to

        another model using `session.update`.


        When the server receives a `session.update`, it will respond

        with a `session.updated` event showing the full, effective configuration.

        Only the fields that are present are updated. To clear a field like

        `instructions`, pass an empty string.

        '
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          enum:
          - session.update
          description: The event type, must be `session.update`.
          x-stainless-const: true
        session:
          $ref: '#/components/schemas/RealtimeSessionCreateRequest'
      required:
      - type
      - session
    RealtimeClientEventTranscriptionSessionUpdate:
      type: object
      description: 'Send this event to update a transcription session.

        '
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          enum:
          - transcription_session.update
          description: The event type, must be `transcription_session.update`.
          x-stainless-const: true
        session:
          $ref: '#/components/schemas/RealtimeTranscriptionSessionCreateRequest'
      required:
      - type
      - session
    RealtimeConversationItem:
      type: object
      description: The item to add to the conversation.
      properties:
        id:
          type: string
          description: "The unique ID of the item, this can be generated by the client\
            \ to help \nmanage server-side context, but is not required because the\
            \ server will \ngenerate one if not provided.\n"
        type:
          type: string
          enum:
          - message
          - function_call
          - function_call_output
          description: 'The type of the item (`message`, `function_call`, `function_call_output`).

            '
        object:
          type: string
          enum:
          - realtime.item
          description: 'Identifier for the API object being returned - always `realtime.item`.

            '
          x-stainless-const: true
        status:
          type: string
          enum:
          - completed
          - incomplete
          - in_progress
          description: "The status of the item (`completed`, `incomplete`, `in_progress`).\
            \ These have no effect \non the conversation, but are accepted for consistency\
            \ with the \n`conversation.item.created` event.\n"
        role:
          type: string
          enum:
          - user
          - assistant
          - system
          description: "The role of the message sender (`user`, `assistant`, `system`),\
            \ only \napplicable for `message` items.\n"
        content:
          type: array
          description: "The content of the message, applicable for `message` items.\
            \ \n- Message items of role `system` support only `input_text` content\n\
            - Message items of role `user` support `input_text` and `input_audio`\
            \ \n  content\n- Message items of role `assistant` support `text` content.\n"
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                - input_audio
                - input_text
                - item_reference
                - text
                - audio
                description: 'The content type (`input_text`, `input_audio`, `item_reference`,
                  `text`, `audio`).

                  '
              text:
                type: string
                description: 'The text content, used for `input_text` and `text` content
                  types.

                  '
              id:
                type: string
                description: 'ID of a previous conversation item to reference (for
                  `item_reference`

                  content types in `response.create` events). These can reference
                  both

                  client and server created items.

                  '
              audio:
                type: string
                description: 'Base64-encoded audio bytes, used for `input_audio` content
                  type.

                  '
              transcript:
                type: string
                description: "The transcript of the audio, used for `input_audio`\
                  \ and `audio` \ncontent types.\n"
        call_id:
          type: string
          description: "The ID of the function call (for `function_call` and \n`function_call_output`\
            \ items). If passed on a `function_call_output` \nitem, the server will\
            \ check that a `function_call` item with the same \nID exists in the conversation\
            \ history.\n"
        name:
          type: string
          description: 'The name of the function being called (for `function_call`
            items).

            '
        arguments:
          type: string
          description: 'The arguments of the function call (for `function_call` items).

            '
        output:
          type: string
          description: 'The output of the function call (for `function_call_output`
            items).

            '
    RealtimeConversationItemWithReference:
      type: object
      description: The item to add to the conversation.
      properties:
        id:
          type: string
          description: 'For an item of type (`message` | `function_call` | `function_call_output`)

            this field allows the client to assign the unique ID of the item. It is

            not required because the server will generate one if not provided.


            For an item of type `item_reference`, this field is required and is a

            reference to any item that has previously existed in the conversation.

            '
        type:
          type: string
          enum:
          - message
          - function_call
          - function_call_output
          description: 'The type of the item (`message`, `function_call`, `function_call_output`,
            `item_reference`).

            '
        object:
          type: string
          enum:
          - realtime.item
          description: 'Identifier for the API object being returned - always `realtime.item`.

            '
          x-stainless-const: true
        status:
          type: string
          enum:
          - completed
          - incomplete
          - in_progress
          description: "The status of the item (`completed`, `incomplete`, `in_progress`).\
            \ These have no effect \non the conversation, but are accepted for consistency\
            \ with the \n`conversation.item.created` event.\n"
        role:
          type: string
          enum:
          - user
          - assistant
          - system
          description: "The role of the message sender (`user`, `assistant`, `system`),\
            \ only \napplicable for `message` items.\n"
        content:
          type: array
          description: "The content of the message, applicable for `message` items.\
            \ \n- Message items of role `system` support only `input_text` content\n\
            - Message items of role `user` support `input_text` and `input_audio`\
            \ \n  content\n- Message items of role `assistant` support `text` content.\n"
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                - input_audio
                - input_text
                - item_reference
                - text
                description: 'The content type (`input_text`, `input_audio`, `item_reference`,
                  `text`).

                  '
              text:
                type: string
                description: 'The text content, used for `input_text` and `text` content
                  types.

                  '
              id:
                type: string
                description: 'ID of a previous conversation item to reference (for
                  `item_reference`

                  content types in `response.create` events). These can reference
                  both

                  client and server created items.

                  '
              audio:
                type: string
                description: 'Base64-encoded audio bytes, used for `input_audio` content
                  type.

                  '
              transcript:
                type: string
                description: 'The transcript of the audio, used for `input_audio`
                  content type.

                  '
        call_id:
          type: string
          description: "The ID of the function call (for `function_call` and \n`function_call_output`\
            \ items). If passed on a `function_call_output` \nitem, the server will\
            \ check that a `function_call` item with the same \nID exists in the conversation\
            \ history.\n"
        name:
          type: string
          description: 'The name of the function being called (for `function_call`
            items).

            '
        arguments:
          type: string
          description: 'The arguments of the function call (for `function_call` items).

            '
        output:
          type: string
          description: 'The output of the function call (for `function_call_output`
            items).

            '
    RealtimeResponse:
      type: object
      description: The response resource.
      properties:
        id:
          type: string
          description: The unique ID of the response.
        object:
          type: string
          enum:
          - realtime.response
          description: The object type, must be `realtime.response`.
          x-stainless-const: true
        status:
          type: string
          enum:
          - completed
          - cancelled
          - failed
          - incomplete
          - in_progress
          description: "The final status of the response (`completed`, `cancelled`,\
            \ `failed`, or \n`incomplete`, `in_progress`).\n"
        status_details:
          type: object
          description: Additional details about the status.
          properties:
            type:
              type: string
              enum:
              - completed
              - cancelled
              - failed
              - incomplete
              description: "The type of error that caused the response to fail, corresponding\
                \ \nwith the `status` field (`completed`, `cancelled`, `incomplete`,\
                \ \n`failed`).\n"
            reason:
              type: string
              enum:
              - turn_detected
              - client_cancelled
              - max_output_tokens
              - content_filter
              description: "The reason the Response did not complete. For a `cancelled`\
                \ Response, \none of `turn_detected` (the server VAD detected a new\
                \ start of speech) \nor `client_cancelled` (the client sent a cancel\
                \ event). For an \n`incomplete` Response, one of `max_output_tokens`\
                \ or `content_filter` \n(the server-side safety filter activated and\
                \ cut off the response).\n"
            error:
              type: object
              description: "A description of the error that caused the response to\
                \ fail, \npopulated when the `status` is `failed`.\n"
              properties:
                type:
                  type: string
                  description: The type of error.
                code:
                  type: string
                  description: Error code, if any.
        output:
          type: array
          description: The list of output items generated by the response.
          items:
            $ref: '#/components/schemas/RealtimeConversationItem'
        metadata:
          $ref: '#/components/schemas/Metadata'
        usage:
          type: object
          description: "Usage statistics for the Response, this will correspond to\
            \ billing. A \nRealtime API session will maintain a conversation context\
            \ and append new \nItems to the Conversation, thus output from previous\
            \ turns (text and \naudio tokens) will become the input for later turns.\n"
          properties:
            total_tokens:
              type: integer
              description: "The total number of tokens in the Response including input\
                \ and output \ntext and audio tokens.\n"
            input_tokens:
              type: integer
              description: "The number of input tokens used in the Response, including\
                \ text and \naudio tokens.\n"
            output_tokens:
              type: integer
              description: "The number of output tokens sent in the Response, including\
                \ text and \naudio tokens.\n"
            input_token_details:
              type: object
              description: Details about the input tokens used in the Response.
              properties:
                cached_tokens:
                  type: integer
                  description: The number of cached tokens used in the Response.
                text_tokens:
                  type: integer
                  description: The number of text tokens used in the Response.
                audio_tokens:
                  type: integer
                  description: The number of audio tokens used in the Response.
            output_token_details:
              type: object
              description: Details about the output tokens used in the Response.
              properties:
                text_tokens:
                  type: integer
                  description: The number of text tokens used in the Response.
                audio_tokens:
                  type: integer
                  description: The number of audio tokens used in the Response.
        conversation_id:
          description: 'Which conversation the response is added to, determined by
            the `conversation`

            field in the `response.create` event. If `auto`, the response will be
            added to

            the default conversation and the value of `conversation_id` will be an
            id like

            `conv_1234`. If `none`, the response will not be added to any conversation
            and

            the value of `conversation_id` will be `null`. If responses are being
            triggered

            by server VAD, the response will be added to the default conversation,
            thus

            the `conversation_id` will be an id like `conv_1234`.

            '
          type: string
        voice:
          $ref: '#/components/schemas/VoiceIdsShared'
          description: 'The voice the model used to respond.

            Current voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,

            `shimmer`, and `verse`.

            '
        modalities:
          type: array
          description: 'The set of modalities the model used to respond. If there
            are multiple modalities,

            the model will pick one, for example if `modalities` is `["text", "audio"]`,
            the model

            could be responding in either text or audio.

            '
          items:
            type: string
            enum:
            - text
            - audio
        output_audio_format:
          type: string
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
          description: 'The format of output audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            '
        temperature:
          type: number
          description: 'Sampling temperature for the model, limited to [0.6, 1.2].
            Defaults to 0.8.

            '
        max_output_tokens:
          oneOf:
          - type: integer
          - type: string
            enum:
            - inf
            x-stainless-const: true
          description: 'Maximum number of output tokens for a single assistant response,

            inclusive of tool calls, that was used in this response.

            '
    RealtimeResponseCreateParams:
      type: object
      description: Create a new Realtime response with these parameters
      properties:
        modalities:
          type: array
          description: 'The set of modalities the model can respond with. To disable
            audio,

            set this to ["text"].

            '
          items:
            type: string
            enum:
            - text
            - audio
        instructions:
          type: string
          description: "The default system instructions (i.e. system message) prepended\
            \ to model \ncalls. This field allows the client to guide the model on\
            \ desired \nresponses. The model can be instructed on response content\
            \ and format, \n(e.g. \"be extremely succinct\", \"act friendly\", \"\
            here are examples of good \nresponses\") and on audio behavior (e.g. \"\
            talk quickly\", \"inject emotion \ninto your voice\", \"laugh frequently\"\
            ). The instructions are not guaranteed \nto be followed by the model,\
            \ but they provide guidance to the model on the \ndesired behavior.\n\n\
            Note that the server sets default instructions which will be used if this\
            \ \nfield is not set and are visible in the `session.created` event at\
            \ the \nstart of the session.\n"
        voice:
          $ref: '#/components/schemas/VoiceIdsShared'
          description: "The voice the model uses to respond. Voice cannot be changed\
            \ during the \nsession once the model has responded with audio at least\
            \ once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`,\
            \ `echo`, `sage`,\n`shimmer`, and `verse`.\n"
        output_audio_format:
          type: string
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
          description: 'The format of output audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            '
        tools:
          type: array
          description: Tools (functions) available to the model.
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                - function
                description: The type of the tool, i.e. `function`.
                x-stainless-const: true
              name:
                type: string
                description: The name of the function.
              description:
                type: string
                description: "The description of the function, including guidance\
                  \ on when and how \nto call it, and guidance about what to tell\
                  \ the user when calling \n(if anything).\n"
              parameters:
                type: object
                description: Parameters of the function in JSON Schema.
        tool_choice:
          type: string
          description: "How the model chooses tools. Options are `auto`, `none`, `required`,\
            \ or \nspecify a function, like `{\"type\": \"function\", \"function\"\
            : {\"name\": \"my_function\"}}`.\n"
        temperature:
          type: number
          description: 'Sampling temperature for the model, limited to [0.6, 1.2].
            Defaults to 0.8.

            '
        max_response_output_tokens:
          oneOf:
          - type: integer
          - type: string
            enum:
            - inf
            x-stainless-const: true
          description: 'Maximum number of output tokens for a single assistant response,

            inclusive of tool calls. Provide an integer between 1 and 4096 to

            limit output tokens, or `inf` for the maximum available tokens for a

            given model. Defaults to `inf`.

            '
        conversation:
          description: "Controls which conversation the response is added to. Currently\
            \ supports\n`auto` and `none`, with `auto` as the default value. The `auto`\
            \ value\nmeans that the contents of the response will be added to the\
            \ default\nconversation. Set this to `none` to create an out-of-band response\
            \ which \nwill not add items to default conversation.\n"
          oneOf:
          - type: string
          - type: string
            default: auto
            enum:
            - auto
            - none
        metadata:
          $ref: '#/components/schemas/Metadata'
        input:
          type: array
          description: 'Input items to include in the prompt for the model. Using
            this field

            creates a new context for this Response instead of using the default

            conversation. An empty array `[]` will clear the context for this Response.

            Note that this can include references to items from the default conversation.

            '
          items:
            $ref: '#/components/schemas/RealtimeConversationItemWithReference'
    RealtimeServerEvent:
      discriminator:
        propertyName: type
      description: 'A realtime server event.

        '
      anyOf:
      - $ref: '#/components/schemas/RealtimeServerEventConversationCreated'
      - $ref: '#/components/schemas/RealtimeServerEventConversationItemCreated'
      - $ref: '#/components/schemas/RealtimeServerEventConversationItemDeleted'
      - $ref: '#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionCompleted'
      - $ref: '#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionDelta'
      - $ref: '#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionFailed'
      - $ref: '#/components/schemas/RealtimeServerEventConversationItemRetrieved'
      - $ref: '#/components/schemas/RealtimeServerEventConversationItemTruncated'
      - $ref: '#/components/schemas/RealtimeServerEventError'
      - $ref: '#/components/schemas/RealtimeServerEventInputAudioBufferCleared'
      - $ref: '#/components/schemas/RealtimeServerEventInputAudioBufferCommitted'
      - $ref: '#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStarted'
      - $ref: '#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStopped'
      - $ref: '#/components/schemas/RealtimeServerEventRateLimitsUpdated'
      - $ref: '#/components/schemas/RealtimeServerEventResponseAudioDelta'
      - $ref: '#/components/schemas/RealtimeServerEventResponseAudioDone'
      - $ref: '#/components/schemas/RealtimeServerEventResponseAudioTranscriptDelta'
      - $ref: '#/components/schemas/RealtimeServerEventResponseAudioTranscriptDone'
      - $ref: '#/components/schemas/RealtimeServerEventResponseContentPartAdded'
      - $ref: '#/components/schemas/RealtimeServerEventResponseContentPartDone'
      - $ref: '#/components/schemas/RealtimeServerEventResponseCreated'
      - $ref: '#/components/schemas/RealtimeServerEventResponseDone'
      - $ref: '#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDelta'
      - $ref: '#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDone'
      - $ref: '#/components/schemas/RealtimeServerEventResponseOutputItemAdded'
      - $ref: '#/components/schemas/RealtimeServerEventResponseOutputItemDone'
      - $ref: '#/components/schemas/RealtimeServerEventResponseTextDelta'
      - $ref: '#/components/schemas/RealtimeServerEventResponseTextDone'
      - $ref: '#/components/schemas/RealtimeServerEventSessionCreated'
      - $ref: '#/components/schemas/RealtimeServerEventSessionUpdated'
      - $ref: '#/components/schemas/RealtimeServerEventTranscriptionSessionUpdated'
      - $ref: '#/components/schemas/RealtimeServerEventOutputAudioBufferStarted'
      - $ref: '#/components/schemas/RealtimeServerEventOutputAudioBufferStopped'
      - $ref: '#/components/schemas/RealtimeServerEventOutputAudioBufferCleared'
    RealtimeServerEventConversationCreated:
      type: object
      description: 'Returned when a conversation is created. Emitted right after session
        creation.

        '
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - conversation.created
          description: The event type, must be `conversation.created`.
          x-stainless-const: true
        conversation:
          type: object
          description: The conversation resource.
          properties:
            id:
              type: string
              description: The unique ID of the conversation.
            object:
              type: string
              description: The object type, must be `realtime.conversation`.
      required:
      - event_id
      - type
      - conversation
    RealtimeServerEventConversationItemCreated:
      type: object
      description: "Returned when a conversation item is created. There are several\
        \ scenarios that produce this event:\n  - The server is generating a Response,\
        \ which if successful will produce \n    either one or two Items, which will\
        \ be of type `message` \n    (role `assistant`) or type `function_call`.\n\
        \  - The input audio buffer has been committed, either by the client or the\
        \ \n    server (in `server_vad` mode). The server will take the content of\
        \ the \n    input audio buffer and add it to a new user message Item.\n  -\
        \ The client has sent a `conversation.item.create` event to add a new Item\
        \ \n    to the Conversation.\n"
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - conversation.item.created
          description: The event type, must be `conversation.item.created`.
          x-stainless-const: true
        previous_item_id:
          type: string
          nullable: true
          description: "The ID of the preceding item in the Conversation context,\
            \ allows the \nclient to understand the order of the conversation. Can\
            \ be `null` if the \nitem has no predecessor.\n"
        item:
          $ref: '#/components/schemas/RealtimeConversationItem'
      required:
      - event_id
      - type
      - item
    RealtimeServerEventConversationItemDeleted:
      type: object
      description: "Returned when an item in the conversation is deleted by the client\
        \ with a \n`conversation.item.delete` event. This event is used to synchronize\
        \ the \nserver's understanding of the conversation history with the client's\
        \ view.\n"
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - conversation.item.deleted
          description: The event type, must be `conversation.item.deleted`.
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the item that was deleted.
      required:
      - event_id
      - type
      - item_id
    RealtimeServerEventConversationItemInputAudioTranscriptionCompleted:
      type: object
      description: 'This event is the output of audio transcription for user audio
        written to the

        user audio buffer. Transcription begins when the input audio buffer is

        committed by the client or server (in `server_vad` mode). Transcription runs

        asynchronously with Response creation, so this event may come before or after

        the Response events.


        Realtime API models accept audio natively, and thus input transcription is
        a

        separate process run on a separate ASR (Automatic Speech Recognition) model.

        The transcript may diverge somewhat from the model''s interpretation, and

        should be treated as a rough guide.

        '
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - conversation.item.input_audio_transcription.completed
          description: 'The event type, must be

            `conversation.item.input_audio_transcription.completed`.

            '
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the user message item containing the audio.
        content_index:
          type: integer
          description: The index of the content part containing the audio.
        transcript:
          type: string
          description: The transcribed text.
        logprobs:
          type: array
          description: The log probabilities of the transcription.
          nullable: true
          items:
            $ref: '#/components/schemas/LogProbProperties'
        usage:
          type: object
          description: Usage statistics for the transcription.
          oneOf:
          - $ref: '#/components/schemas/TranscriptTextUsageTokens'
            title: Token Usage
          - $ref: '#/components/schemas/TranscriptTextUsageDuration'
            title: Duration Usage
      required:
      - event_id
      - type
      - item_id
      - content_index
      - transcript
      - usage
    RealtimeServerEventConversationItemInputAudioTranscriptionDelta:
      type: object
      description: 'Returned when the text value of an input audio transcription content
        part is updated.

        '
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - conversation.item.input_audio_transcription.delta
          description: The event type, must be `conversation.item.input_audio_transcription.delta`.
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the item.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        delta:
          type: string
          description: The text delta.
        logprobs:
          type: array
          description: The log probabilities of the transcription.
          nullable: true
          items:
            $ref: '#/components/schemas/LogProbProperties'
      required:
      - event_id
      - type
      - item_id
    RealtimeServerEventConversationItemInputAudioTranscriptionFailed:
      type: object
      description: "Returned when input audio transcription is configured, and a transcription\
        \ \nrequest for a user message failed. These events are separate from other\
        \ \n`error` events so that the client can identify the related Item.\n"
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - conversation.item.input_audio_transcription.failed
          description: 'The event type, must be

            `conversation.item.input_audio_transcription.failed`.

            '
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the user message item.
        content_index:
          type: integer
          description: The index of the content part containing the audio.
        error:
          type: object
          description: Details of the transcription error.
          properties:
            type:
              type: string
              description: The type of error.
            code:
              type: string
              description: Error code, if any.
            message:
              type: string
              description: A human-readable error message.
            param:
              type: string
              description: Parameter related to the error, if any.
      required:
      - event_id
      - type
      - item_id
      - content_index
      - error
    RealtimeServerEventConversationItemRetrieved:
      type: object
      description: 'Returned when a conversation item is retrieved with `conversation.item.retrieve`.

        '
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - conversation.item.retrieved
          description: The event type, must be `conversation.item.retrieved`.
          x-stainless-const: true
        item:
          $ref: '#/components/schemas/RealtimeConversationItem'
      required:
      - event_id
      - type
      - item
    RealtimeServerEventConversationItemTruncated:
      type: object
      description: "Returned when an earlier assistant audio message item is truncated\
        \ by the \nclient with a `conversation.item.truncate` event. This event is\
        \ used to \nsynchronize the server's understanding of the audio with the client's\
        \ playback.\n\nThis action will truncate the audio and remove the server-side\
        \ text transcript \nto ensure there is no text in the context that hasn't\
        \ been heard by the user.\n"
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - conversation.item.truncated
          description: The event type, must be `conversation.item.truncated`.
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the assistant message item that was truncated.
        content_index:
          type: integer
          description: The index of the content part that was truncated.
        audio_end_ms:
          type: integer
          description: 'The duration up to which the audio was truncated, in milliseconds.

            '
      required:
      - event_id
      - type
      - item_id
      - content_index
      - audio_end_ms
    RealtimeServerEventError:
      type: object
      description: "Returned when an error occurs, which could be a client problem\
        \ or a server \nproblem. Most errors are recoverable and the session will\
        \ stay open, we \nrecommend to implementors to monitor and log error messages\
        \ by default.\n"
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - error
          description: The event type, must be `error`.
          x-stainless-const: true
        error:
          type: object
          description: Details of the error.
          required:
          - type
          - message
          properties:
            type:
              type: string
              description: 'The type of error (e.g., "invalid_request_error", "server_error").

                '
            code:
              type: string
              description: Error code, if any.
              nullable: true
            message:
              type: string
              description: A human-readable error message.
            param:
              type: string
              description: Parameter related to the error, if any.
              nullable: true
            event_id:
              type: string
              description: 'The event_id of the client event that caused the error,
                if applicable.

                '
              nullable: true
      required:
      - event_id
      - type
      - error
    RealtimeServerEventInputAudioBufferCleared:
      type: object
      description: "Returned when the input audio buffer is cleared by the client\
        \ with a \n`input_audio_buffer.clear` event.\n"
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - input_audio_buffer.cleared
          description: The event type, must be `input_audio_buffer.cleared`.
          x-stainless-const: true
      required:
      - event_id
      - type
    RealtimeServerEventInputAudioBufferCommitted:
      type: object
      description: "Returned when an input audio buffer is committed, either by the\
        \ client or \nautomatically in server VAD mode. The `item_id` property is\
        \ the ID of the user\nmessage item that will be created, thus a `conversation.item.created`\
        \ event \nwill also be sent to the client.\n"
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - input_audio_buffer.committed
          description: The event type, must be `input_audio_buffer.committed`.
          x-stainless-const: true
        previous_item_id:
          type: string
          nullable: true
          description: 'The ID of the preceding item after which the new item will
            be inserted.

            Can be `null` if the item has no predecessor.

            '
        item_id:
          type: string
          description: The ID of the user message item that will be created.
      required:
      - event_id
      - type
      - item_id
    RealtimeServerEventInputAudioBufferSpeechStarted:
      type: object
      description: "Sent by the server when in `server_vad` mode to indicate that\
        \ speech has been \ndetected in the audio buffer. This can happen any time\
        \ audio is added to the \nbuffer (unless speech is already detected). The\
        \ client may want to use this \nevent to interrupt audio playback or provide\
        \ visual feedback to the user. \n\nThe client should expect to receive a `input_audio_buffer.speech_stopped`\
        \ event \nwhen speech stops. The `item_id` property is the ID of the user\
        \ message item \nthat will be created when speech stops and will also be included\
        \ in the \n`input_audio_buffer.speech_stopped` event (unless the client manually\
        \ commits \nthe audio buffer during VAD activation).\n"
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - input_audio_buffer.speech_started
          description: The event type, must be `input_audio_buffer.speech_started`.
          x-stainless-const: true
        audio_start_ms:
          type: integer
          description: "Milliseconds from the start of all audio written to the buffer\
            \ during the \nsession when speech was first detected. This will correspond\
            \ to the \nbeginning of audio sent to the model, and thus includes the\
            \ \n`prefix_padding_ms` configured in the Session.\n"
        item_id:
          type: string
          description: 'The ID of the user message item that will be created when
            speech stops.

            '
      required:
      - event_id
      - type
      - audio_start_ms
      - item_id
    RealtimeServerEventInputAudioBufferSpeechStopped:
      type: object
      description: "Returned in `server_vad` mode when the server detects the end\
        \ of speech in \nthe audio buffer. The server will also send an `conversation.item.created`\
        \ \nevent with the user message item that is created from the audio buffer.\n"
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - input_audio_buffer.speech_stopped
          description: The event type, must be `input_audio_buffer.speech_stopped`.
          x-stainless-const: true
        audio_end_ms:
          type: integer
          description: "Milliseconds since the session started when speech stopped.\
            \ This will \ncorrespond to the end of audio sent to the model, and thus\
            \ includes the \n`min_silence_duration_ms` configured in the Session.\n"
        item_id:
          type: string
          description: The ID of the user message item that will be created.
      required:
      - event_id
      - type
      - audio_end_ms
      - item_id
    RealtimeServerEventOutputAudioBufferCleared:
      type: object
      description: '**WebRTC Only:** Emitted when the output audio buffer is cleared.
        This happens either in VAD

        mode when the user has interrupted (`input_audio_buffer.speech_started`),

        or when the client has emitted the `output_audio_buffer.clear` event to manually

        cut off the current audio response.

        [Learn more](/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).

        '
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - output_audio_buffer.cleared
          description: The event type, must be `output_audio_buffer.cleared`.
          x-stainless-const: true
        response_id:
          type: string
          description: The unique ID of the response that produced the audio.
      required:
      - event_id
      - type
      - response_id
    RealtimeServerEventOutputAudioBufferStarted:
      type: object
      description: '**WebRTC Only:** Emitted when the server begins streaming audio
        to the client. This event is

        emitted after an audio content part has been added (`response.content_part.added`)

        to the response.

        [Learn more](/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).

        '
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - output_audio_buffer.started
          description: The event type, must be `output_audio_buffer.started`.
          x-stainless-const: true
        response_id:
          type: string
          description: The unique ID of the response that produced the audio.
      required:
      - event_id
      - type
      - response_id
    RealtimeServerEventOutputAudioBufferStopped:
      type: object
      description: '**WebRTC Only:** Emitted when the output audio buffer has been
        completely drained on the server,

        and no more audio is forthcoming. This event is emitted after the full response

        data has been sent to the client (`response.done`).

        [Learn more](/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).

        '
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - output_audio_buffer.stopped
          description: The event type, must be `output_audio_buffer.stopped`.
          x-stainless-const: true
        response_id:
          type: string
          description: The unique ID of the response that produced the audio.
      required:
      - event_id
      - type
      - response_id
    RealtimeServerEventRateLimitsUpdated:
      type: object
      description: "Emitted at the beginning of a Response to indicate the updated\
        \ rate limits. \nWhen a Response is created some tokens will be \"reserved\"\
        \ for the output \ntokens, the rate limits shown here reflect that reservation,\
        \ which is then \nadjusted accordingly once the Response is completed.\n"
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - rate_limits.updated
          description: The event type, must be `rate_limits.updated`.
          x-stainless-const: true
        rate_limits:
          type: array
          description: List of rate limit information.
          items:
            type: object
            properties:
              name:
                type: string
                enum:
                - requests
                - tokens
                description: 'The name of the rate limit (`requests`, `tokens`).

                  '
              limit:
                type: integer
                description: The maximum allowed value for the rate limit.
              remaining:
                type: integer
                description: The remaining value before the limit is reached.
              reset_seconds:
                type: number
                description: Seconds until the rate limit resets.
      required:
      - event_id
      - type
      - rate_limits
    RealtimeServerEventResponseAudioDelta:
      type: object
      description: Returned when the model-generated audio is updated.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - response.audio.delta
          description: The event type, must be `response.audio.delta`.
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        delta:
          type: string
          description: Base64-encoded audio data delta.
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - content_index
      - delta
    RealtimeServerEventResponseAudioDone:
      type: object
      description: 'Returned when the model-generated audio is done. Also emitted
        when a Response

        is interrupted, incomplete, or cancelled.

        '
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - response.audio.done
          description: The event type, must be `response.audio.done`.
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - content_index
    RealtimeServerEventResponseAudioTranscriptDelta:
      type: object
      description: 'Returned when the model-generated transcription of audio output
        is updated.

        '
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - response.audio_transcript.delta
          description: The event type, must be `response.audio_transcript.delta`.
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        delta:
          type: string
          description: The transcript delta.
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - content_index
      - delta
    RealtimeServerEventResponseAudioTranscriptDone:
      type: object
      description: 'Returned when the model-generated transcription of audio output
        is done

        streaming. Also emitted when a Response is interrupted, incomplete, or

        cancelled.

        '
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - response.audio_transcript.done
          description: The event type, must be `response.audio_transcript.done`.
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        transcript:
          type: string
          description: The final transcript of the audio.
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - content_index
      - transcript
    RealtimeServerEventResponseContentPartAdded:
      type: object
      description: 'Returned when a new content part is added to an assistant message
        item during

        response generation.

        '
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - response.content_part.added
          description: The event type, must be `response.content_part.added`.
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item to which the content part was added.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        part:
          type: object
          description: The content part that was added.
          properties:
            type:
              type: string
              enum:
              - audio
              - text
              description: The content type ("text", "audio").
            text:
              type: string
              description: The text content (if type is "text").
            audio:
              type: string
              description: Base64-encoded audio data (if type is "audio").
            transcript:
              type: string
              description: The transcript of the audio (if type is "audio").
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - content_index
      - part
    RealtimeServerEventResponseContentPartDone:
      type: object
      description: 'Returned when a content part is done streaming in an assistant
        message item.

        Also emitted when a Response is interrupted, incomplete, or cancelled.

        '
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - response.content_part.done
          description: The event type, must be `response.content_part.done`.
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        part:
          type: object
          description: The content part that is done.
          properties:
            type:
              type: string
              enum:
              - audio
              - text
              description: The content type ("text", "audio").
            text:
              type: string
              description: The text content (if type is "text").
            audio:
              type: string
              description: Base64-encoded audio data (if type is "audio").
            transcript:
              type: string
              description: The transcript of the audio (if type is "audio").
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - content_index
      - part
    RealtimeServerEventResponseCreated:
      type: object
      description: 'Returned when a new Response is created. The first event of response
        creation,

        where the response is in an initial state of `in_progress`.

        '
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - response.created
          description: The event type, must be `response.created`.
          x-stainless-const: true
        response:
          $ref: '#/components/schemas/RealtimeResponse'
      required:
      - event_id
      - type
      - response
    RealtimeServerEventResponseDone:
      type: object
      description: "Returned when a Response is done streaming. Always emitted, no\
        \ matter the \nfinal state. The Response object included in the `response.done`\
        \ event will \ninclude all output Items in the Response but will omit the\
        \ raw audio data.\n"
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - response.done
          description: The event type, must be `response.done`.
          x-stainless-const: true
        response:
          $ref: '#/components/schemas/RealtimeResponse'
      required:
      - event_id
      - type
      - response
    RealtimeServerEventResponseFunctionCallArgumentsDelta:
      type: object
      description: 'Returned when the model-generated function call arguments are
        updated.

        '
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - response.function_call_arguments.delta
          description: 'The event type, must be `response.function_call_arguments.delta`.

            '
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the function call item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        call_id:
          type: string
          description: The ID of the function call.
        delta:
          type: string
          description: The arguments delta as a JSON string.
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - call_id
      - delta
    RealtimeServerEventResponseFunctionCallArgumentsDone:
      type: object
      description: 'Returned when the model-generated function call arguments are
        done streaming.

        Also emitted when a Response is interrupted, incomplete, or cancelled.

        '
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - response.function_call_arguments.done
          description: 'The event type, must be `response.function_call_arguments.done`.

            '
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the function call item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        call_id:
          type: string
          description: The ID of the function call.
        arguments:
          type: string
          description: The final arguments as a JSON string.
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - call_id
      - arguments
    RealtimeServerEventResponseOutputItemAdded:
      type: object
      description: Returned when a new Item is created during Response generation.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - response.output_item.added
          description: The event type, must be `response.output_item.added`.
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the Response to which the item belongs.
        output_index:
          type: integer
          description: The index of the output item in the Response.
        item:
          $ref: '#/components/schemas/RealtimeConversationItem'
      required:
      - event_id
      - type
      - response_id
      - output_index
      - item
    RealtimeServerEventResponseOutputItemDone:
      type: object
      description: "Returned when an Item is done streaming. Also emitted when a Response\
        \ is \ninterrupted, incomplete, or cancelled.\n"
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - response.output_item.done
          description: The event type, must be `response.output_item.done`.
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the Response to which the item belongs.
        output_index:
          type: integer
          description: The index of the output item in the Response.
        item:
          $ref: '#/components/schemas/RealtimeConversationItem'
      required:
      - event_id
      - type
      - response_id
      - output_index
      - item
    RealtimeServerEventResponseTextDelta:
      type: object
      description: Returned when the text value of a "text" content part is updated.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - response.text.delta
          description: The event type, must be `response.text.delta`.
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        delta:
          type: string
          description: The text delta.
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - content_index
      - delta
    RealtimeServerEventResponseTextDone:
      type: object
      description: 'Returned when the text value of a "text" content part is done
        streaming. Also

        emitted when a Response is interrupted, incomplete, or cancelled.

        '
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - response.text.done
          description: The event type, must be `response.text.done`.
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        text:
          type: string
          description: The final text content.
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - content_index
      - text
    RealtimeServerEventSessionCreated:
      type: object
      description: "Returned when a Session is created. Emitted automatically when\
        \ a new \nconnection is established as the first server event. This event\
        \ will contain \nthe default Session configuration.\n"
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - session.created
          description: The event type, must be `session.created`.
          x-stainless-const: true
        session:
          $ref: '#/components/schemas/RealtimeSession'
      required:
      - event_id
      - type
      - session
    RealtimeServerEventSessionUpdated:
      type: object
      description: "Returned when a session is updated with a `session.update` event,\
        \ unless \nthere is an error.\n"
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - session.updated
          description: The event type, must be `session.updated`.
          x-stainless-const: true
        session:
          $ref: '#/components/schemas/RealtimeSession'
      required:
      - event_id
      - type
      - session
    RealtimeServerEventTranscriptionSessionUpdated:
      type: object
      description: "Returned when a transcription session is updated with a `transcription_session.update`\
        \ event, unless \nthere is an error.\n"
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          enum:
          - transcription_session.updated
          description: The event type, must be `transcription_session.updated`.
          x-stainless-const: true
        session:
          $ref: '#/components/schemas/RealtimeTranscriptionSessionCreateResponse'
      required:
      - event_id
      - type
      - session
    RealtimeSession:
      type: object
      description: Realtime session object configuration.
      properties:
        id:
          type: string
          description: 'Unique identifier for the session that looks like `sess_1234567890abcdef`.

            '
        modalities:
          description: 'The set of modalities the model can respond with. To disable
            audio,

            set this to ["text"].

            '
          items:
            type: string
            default:
            - text
            - audio
            enum:
            - text
            - audio
        model:
          type: string
          description: 'The Realtime model used for this session.

            '
          enum:
          - gpt-4o-realtime-preview
          - gpt-4o-realtime-preview-2024-10-01
          - gpt-4o-realtime-preview-2024-12-17
          - gpt-4o-realtime-preview-2025-06-03
          - gpt-4o-mini-realtime-preview
          - gpt-4o-mini-realtime-preview-2024-12-17
        instructions:
          type: string
          description: "The default system instructions (i.e. system message) prepended\
            \ to model \ncalls. This field allows the client to guide the model on\
            \ desired \nresponses. The model can be instructed on response content\
            \ and format, \n(e.g. \"be extremely succinct\", \"act friendly\", \"\
            here are examples of good \nresponses\") and on audio behavior (e.g. \"\
            talk quickly\", \"inject emotion \ninto your voice\", \"laugh frequently\"\
            ). The instructions are not\nguaranteed to be followed by the model, but\
            \ they provide guidance to the \nmodel on the desired behavior.\n\n\n\
            Note that the server sets default instructions which will be used if this\n\
            field is not set and are visible in the `session.created` event at the\n\
            start of the session.\n"
        voice:
          $ref: '#/components/schemas/VoiceIdsShared'
          description: 'The voice the model uses to respond. Voice cannot be changed
            during the

            session once the model has responded with audio at least once. Current

            voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,

            `shimmer`, and `verse`.

            '
        input_audio_format:
          type: string
          default: pcm16
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
          description: "The format of input audio. Options are `pcm16`, `g711_ulaw`,\
            \ or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz\
            \ sample rate, \nsingle channel (mono), and little-endian byte order.\n"
        output_audio_format:
          type: string
          default: pcm16
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
          description: 'The format of output audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            For `pcm16`, output audio is sampled at a rate of 24kHz.

            '
        input_audio_transcription:
          type: object
          description: 'Configuration for input audio transcription, defaults to off
            and can be  set to `null` to turn off once on. Input audio transcription
            is not native to the model, since the model consumes audio directly. Transcription
            runs  asynchronously through [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription)
            and should be treated as guidance of input audio content rather than precisely
            what the model heard. The client can optionally set the language and prompt
            for transcription, these offer additional guidance to the transcription
            service.

            '
          properties:
            model:
              type: string
              description: 'The model to use for transcription, current options are
                `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.

                '
            language:
              type: string
              description: 'The language of the input audio. Supplying the input language
                in

                [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
                (e.g. `en`) format

                will improve accuracy and latency.

                '
            prompt:
              type: string
              description: 'An optional text to guide the model''s style or continue
                a previous audio

                segment.

                For `whisper-1`, the [prompt is a list of keywords](/docs/guides/speech-to-text#prompting).

                For `gpt-4o-transcribe` models, the prompt is a free text string,
                for example "expect words related to technology".

                '
        turn_detection:
          type: object
          description: 'Configuration for turn detection, ether Server VAD or Semantic
            VAD. This can be set to `null` to turn off, in which case the client must
            manually trigger model response.

            Server VAD means that the model will detect the start and end of speech
            based on audio volume and respond at the end of user speech.

            Semantic VAD is more advanced and uses a turn detection model (in conjuction
            with VAD) to semantically estimate whether the user has finished speaking,
            then dynamically sets a timeout based on this probability. For example,
            if user audio trails off with "uhhm", the model will score a low probability
            of turn end and wait longer for the user to continue speaking. This can
            be useful for more natural conversations, but may have a higher latency.

            '
          properties:
            type:
              type: string
              default: server_vad
              enum:
              - server_vad
              - semantic_vad
              description: 'Type of turn detection.

                '
            eagerness:
              type: string
              default: auto
              enum:
              - low
              - medium
              - high
              - auto
              description: 'Used only for `semantic_vad` mode. The eagerness of the
                model to respond. `low` will wait longer for the user to continue
                speaking, `high` will respond more quickly. `auto` is the default
                and is equivalent to `medium`.

                '
            threshold:
              type: number
              description: "Used only for `server_vad` mode. Activation threshold\
                \ for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold\
                \ will require louder audio to activate the model, and \nthus might\
                \ perform better in noisy environments.\n"
            prefix_padding_ms:
              type: integer
              description: "Used only for `server_vad` mode. Amount of audio to include\
                \ before the VAD detected speech (in \nmilliseconds). Defaults to\
                \ 300ms.\n"
            silence_duration_ms:
              type: integer
              description: "Used only for `server_vad` mode. Duration of silence to\
                \ detect speech stop (in milliseconds). Defaults \nto 500ms. With\
                \ shorter values the model will respond more quickly, \nbut may jump\
                \ in on short pauses from the user.\n"
            create_response:
              type: boolean
              default: true
              description: 'Whether or not to automatically generate a response when
                a VAD stop event occurs.

                '
            interrupt_response:
              type: boolean
              default: true
              description: 'Whether or not to automatically interrupt any ongoing
                response with output to the default

                conversation (i.e. `conversation` of `auto`) when a VAD start event
                occurs.

                '
        input_audio_noise_reduction:
          type: object
          default: null
          description: 'Configuration for input audio noise reduction. This can be
            set to `null` to turn off.

            Noise reduction filters audio added to the input audio buffer before it
            is sent to VAD and the model.

            Filtering the audio can improve VAD and turn detection accuracy (reducing
            false positives) and model performance by improving perception of the
            input audio.

            '
          properties:
            type:
              type: string
              enum:
              - near_field
              - far_field
              description: 'Type of noise reduction. `near_field` is for close-talking
                microphones such as headphones, `far_field` is for far-field microphones
                such as laptop or conference room microphones.

                '
        speed:
          type: number
          default: 1
          maximum: 1.5
          minimum: 0.25
          description: 'The speed of the model''s spoken response. 1.0 is the default
            speed. 0.25 is

            the minimum speed. 1.5 is the maximum speed. This value can only be changed

            in between model turns, not while a response is in progress.

            '
        tracing:
          title: Tracing Configuration
          description: "Configuration options for tracing. Set to null to disable\
            \ tracing. Once \ntracing is enabled for a session, the configuration\
            \ cannot be modified.\n\n`auto` will create a trace for the session with\
            \ default values for the \nworkflow name, group id, and metadata.\n"
          oneOf:
          - type: string
            default: auto
            description: 'Default tracing mode for the session.

              '
            enum:
            - auto
            x-stainless-const: true
          - type: object
            title: Tracing Configuration
            description: 'Granular configuration for tracing.

              '
            properties:
              workflow_name:
                type: string
                description: "The name of the workflow to attach to this trace. This\
                  \ is used to \nname the trace in the traces dashboard.\n"
              group_id:
                type: string
                description: "The group id to attach to this trace to enable filtering\
                  \ and \ngrouping in the traces dashboard.\n"
              metadata:
                type: object
                description: "The arbitrary metadata to attach to this trace to enable\
                  \ \nfiltering in the traces dashboard.\n"
        tools:
          type: array
          description: Tools (functions) available to the model.
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                - function
                description: The type of the tool, i.e. `function`.
                x-stainless-const: true
              name:
                type: string
                description: The name of the function.
              description:
                type: string
                description: "The description of the function, including guidance\
                  \ on when and how \nto call it, and guidance about what to tell\
                  \ the user when calling \n(if anything).\n"
              parameters:
                type: object
                description: Parameters of the function in JSON Schema.
        tool_choice:
          type: string
          default: auto
          description: "How the model chooses tools. Options are `auto`, `none`, `required`,\
            \ or \nspecify a function.\n"
        temperature:
          type: number
          default: 0.8
          description: 'Sampling temperature for the model, limited to [0.6, 1.2].
            For audio models a temperature of 0.8 is highly recommended for best performance.

            '
        max_response_output_tokens:
          oneOf:
          - type: integer
          - type: string
            enum:
            - inf
            x-stainless-const: true
          description: 'Maximum number of output tokens for a single assistant response,

            inclusive of tool calls. Provide an integer between 1 and 4096 to

            limit output tokens, or `inf` for the maximum available tokens for a

            given model. Defaults to `inf`.

            '
    RealtimeSessionCreateRequest:
      type: object
      description: Realtime session object configuration.
      properties:
        modalities:
          description: 'The set of modalities the model can respond with. To disable
            audio,

            set this to ["text"].

            '
          items:
            type: string
            default:
            - text
            - audio
            enum:
            - text
            - audio
        model:
          type: string
          description: 'The Realtime model used for this session.

            '
          enum:
          - gpt-4o-realtime-preview
          - gpt-4o-realtime-preview-2024-10-01
          - gpt-4o-realtime-preview-2024-12-17
          - gpt-4o-realtime-preview-2025-06-03
          - gpt-4o-mini-realtime-preview
          - gpt-4o-mini-realtime-preview-2024-12-17
        instructions:
          type: string
          description: 'The default system instructions (i.e. system message) prepended
            to model calls. This field allows the client to guide the model on desired
            responses. The model can be instructed on response content and format,
            (e.g. "be extremely succinct", "act friendly", "here are examples of good
            responses") and on audio behavior (e.g. "talk quickly", "inject emotion
            into your voice", "laugh frequently"). The instructions are not guaranteed
            to be followed by the model, but they provide guidance to the model on
            the desired behavior.


            Note that the server sets default instructions which will be used if this
            field is not set and are visible in the `session.created` event at the
            start of the session.

            '
        voice:
          $ref: '#/components/schemas/VoiceIdsShared'
          description: 'The voice the model uses to respond. Voice cannot be changed
            during the

            session once the model has responded with audio at least once. Current

            voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,

            `shimmer`, and `verse`.

            '
        input_audio_format:
          type: string
          default: pcm16
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
          description: 'The format of input audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,

            single channel (mono), and little-endian byte order.

            '
        output_audio_format:
          type: string
          default: pcm16
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
          description: 'The format of output audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            For `pcm16`, output audio is sampled at a rate of 24kHz.

            '
        input_audio_transcription:
          type: object
          description: 'Configuration for input audio transcription, defaults to off
            and can be set to `null` to turn off once on. Input audio transcription
            is not native to the model, since the model consumes audio directly. Transcription
            runs asynchronously through [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription)
            and should be treated as guidance of input audio content rather than precisely
            what the model heard. The client can optionally set the language and prompt
            for transcription, these offer additional guidance to the transcription
            service.

            '
          properties:
            model:
              type: string
              description: 'The model to use for transcription, current options are
                `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.

                '
            language:
              type: string
              description: 'The language of the input audio. Supplying the input language
                in

                [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
                (e.g. `en`) format

                will improve accuracy and latency.

                '
            prompt:
              type: string
              description: 'An optional text to guide the model''s style or continue
                a previous audio

                segment.

                For `whisper-1`, the [prompt is a list of keywords](/docs/guides/speech-to-text#prompting).

                For `gpt-4o-transcribe` models, the prompt is a free text string,
                for example "expect words related to technology".

                '
        turn_detection:
          type: object
          description: 'Configuration for turn detection, ether Server VAD or Semantic
            VAD. This can be set to `null` to turn off, in which case the client must
            manually trigger model response.

            Server VAD means that the model will detect the start and end of speech
            based on audio volume and respond at the end of user speech.

            Semantic VAD is more advanced and uses a turn detection model (in conjuction
            with VAD) to semantically estimate whether the user has finished speaking,
            then dynamically sets a timeout based on this probability. For example,
            if user audio trails off with "uhhm", the model will score a low probability
            of turn end and wait longer for the user to continue speaking. This can
            be useful for more natural conversations, but may have a higher latency.

            '
          properties:
            type:
              type: string
              default: server_vad
              enum:
              - server_vad
              - semantic_vad
              description: 'Type of turn detection.

                '
            eagerness:
              type: string
              default: auto
              enum:
              - low
              - medium
              - high
              - auto
              description: 'Used only for `semantic_vad` mode. The eagerness of the
                model to respond. `low` will wait longer for the user to continue
                speaking, `high` will respond more quickly. `auto` is the default
                and is equivalent to `medium`.

                '
            threshold:
              type: number
              description: 'Used only for `server_vad` mode. Activation threshold
                for VAD (0.0 to 1.0), this defaults to 0.5. A

                higher threshold will require louder audio to activate the model,
                and

                thus might perform better in noisy environments.

                '
            prefix_padding_ms:
              type: integer
              description: 'Used only for `server_vad` mode. Amount of audio to include
                before the VAD detected speech (in

                milliseconds). Defaults to 300ms.

                '
            silence_duration_ms:
              type: integer
              description: 'Used only for `server_vad` mode. Duration of silence to
                detect speech stop (in milliseconds). Defaults

                to 500ms. With shorter values the model will respond more quickly,

                but may jump in on short pauses from the user.

                '
            create_response:
              type: boolean
              default: true
              description: 'Whether or not to automatically generate a response when
                a VAD stop event occurs.

                '
            interrupt_response:
              type: boolean
              default: true
              description: 'Whether or not to automatically interrupt any ongoing
                response with output to the default

                conversation (i.e. `conversation` of `auto`) when a VAD start event
                occurs.

                '
        input_audio_noise_reduction:
          type: object
          default: null
          description: 'Configuration for input audio noise reduction. This can be
            set to `null` to turn off.

            Noise reduction filters audio added to the input audio buffer before it
            is sent to VAD and the model.

            Filtering the audio can improve VAD and turn detection accuracy (reducing
            false positives) and model performance by improving perception of the
            input audio.

            '
          properties:
            type:
              type: string
              enum:
              - near_field
              - far_field
              description: 'Type of noise reduction. `near_field` is for close-talking
                microphones such as headphones, `far_field` is for far-field microphones
                such as laptop or conference room microphones.

                '
        speed:
          type: number
          default: 1
          maximum: 1.5
          minimum: 0.25
          description: 'The speed of the model''s spoken response. 1.0 is the default
            speed. 0.25 is

            the minimum speed. 1.5 is the maximum speed. This value can only be changed

            in between model turns, not while a response is in progress.

            '
        tracing:
          title: Tracing Configuration
          description: "Configuration options for tracing. Set to null to disable\
            \ tracing. Once \ntracing is enabled for a session, the configuration\
            \ cannot be modified.\n\n`auto` will create a trace for the session with\
            \ default values for the \nworkflow name, group id, and metadata.\n"
          oneOf:
          - type: string
            default: auto
            description: 'Default tracing mode for the session.

              '
            enum:
            - auto
            x-stainless-const: true
          - type: object
            title: Tracing Configuration
            description: 'Granular configuration for tracing.

              '
            properties:
              workflow_name:
                type: string
                description: "The name of the workflow to attach to this trace. This\
                  \ is used to \nname the trace in the traces dashboard.\n"
              group_id:
                type: string
                description: "The group id to attach to this trace to enable filtering\
                  \ and \ngrouping in the traces dashboard.\n"
              metadata:
                type: object
                description: "The arbitrary metadata to attach to this trace to enable\
                  \ \nfiltering in the traces dashboard.\n"
        tools:
          type: array
          description: Tools (functions) available to the model.
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                - function
                description: The type of the tool, i.e. `function`.
                x-stainless-const: true
              name:
                type: string
                description: The name of the function.
              description:
                type: string
                description: 'The description of the function, including guidance
                  on when and how

                  to call it, and guidance about what to tell the user when calling

                  (if anything).

                  '
              parameters:
                type: object
                description: Parameters of the function in JSON Schema.
        tool_choice:
          type: string
          default: auto
          description: 'How the model chooses tools. Options are `auto`, `none`, `required`,
            or

            specify a function.

            '
        temperature:
          type: number
          default: 0.8
          description: 'Sampling temperature for the model, limited to [0.6, 1.2].
            For audio models a temperature of 0.8 is highly recommended for best performance.

            '
        max_response_output_tokens:
          oneOf:
          - type: integer
          - type: string
            enum:
            - inf
            x-stainless-const: true
          description: 'Maximum number of output tokens for a single assistant response,

            inclusive of tool calls. Provide an integer between 1 and 4096 to

            limit output tokens, or `inf` for the maximum available tokens for a

            given model. Defaults to `inf`.

            '
        client_secret:
          type: object
          description: 'Configuration options for the generated client secret.

            '
          properties:
            expires_after:
              type: object
              description: 'Configuration for the ephemeral token expiration.

                '
              properties:
                anchor:
                  type: string
                  enum:
                  - created_at
                  description: 'The anchor point for the ephemeral token expiration.
                    Only `created_at` is currently supported.

                    '
                seconds:
                  default: 600
                  type: integer
                  description: 'The number of seconds from the anchor point to the
                    expiration. Select a value between `10` and `7200`.

                    '
              required:
              - anchor
    RealtimeSessionCreateResponse:
      type: object
      description: 'A new Realtime session configuration, with an ephermeral key.
        Default TTL

        for keys is one minute.

        '
      properties:
        client_secret:
          type: object
          description: Ephemeral key returned by the API.
          properties:
            value:
              type: string
              description: 'Ephemeral key usable in client environments to authenticate
                connections

                to the Realtime API. Use this in client-side environments rather than

                a standard API token, which should only be used server-side.

                '
            expires_at:
              type: integer
              description: 'Timestamp for when the token expires. Currently, all tokens
                expire

                after one minute.

                '
          required:
          - value
          - expires_at
        modalities:
          description: 'The set of modalities the model can respond with. To disable
            audio,

            set this to ["text"].

            '
          items:
            type: string
            enum:
            - text
            - audio
        instructions:
          type: string
          description: "The default system instructions (i.e. system message) prepended\
            \ to model \ncalls. This field allows the client to guide the model on\
            \ desired \nresponses. The model can be instructed on response content\
            \ and format, \n(e.g. \"be extremely succinct\", \"act friendly\", \"\
            here are examples of good \nresponses\") and on audio behavior (e.g. \"\
            talk quickly\", \"inject emotion \ninto your voice\", \"laugh frequently\"\
            ). The instructions are not guaranteed \nto be followed by the model,\
            \ but they provide guidance to the model on the \ndesired behavior.\n\n\
            Note that the server sets default instructions which will be used if this\
            \ \nfield is not set and are visible in the `session.created` event at\
            \ the \nstart of the session.\n"
        voice:
          $ref: '#/components/schemas/VoiceIdsShared'
          description: "The voice the model uses to respond. Voice cannot be changed\
            \ during the \nsession once the model has responded with audio at least\
            \ once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`,\
            \ `echo`, `sage`,\n`shimmer`, and `verse`.\n"
        input_audio_format:
          type: string
          description: 'The format of input audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            '
        output_audio_format:
          type: string
          description: 'The format of output audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            '
        input_audio_transcription:
          type: object
          description: "Configuration for input audio transcription, defaults to off\
            \ and can be \nset to `null` to turn off once on. Input audio transcription\
            \ is not native \nto the model, since the model consumes audio directly.\
            \ Transcription runs\nasynchronously and should be treated as rough guidance\n\
            rather than the representation understood by the model.\n"
          properties:
            model:
              type: string
              description: 'The model to use for transcription.

                '
        speed:
          type: number
          default: 1
          maximum: 1.5
          minimum: 0.25
          description: 'The speed of the model''s spoken response. 1.0 is the default
            speed. 0.25 is

            the minimum speed. 1.5 is the maximum speed. This value can only be changed

            in between model turns, not while a response is in progress.

            '
        tracing:
          title: Tracing Configuration
          description: "Configuration options for tracing. Set to null to disable\
            \ tracing. Once \ntracing is enabled for a session, the configuration\
            \ cannot be modified.\n\n`auto` will create a trace for the session with\
            \ default values for the \nworkflow name, group id, and metadata.\n"
          oneOf:
          - type: string
            default: auto
            description: 'Default tracing mode for the session.

              '
            enum:
            - auto
            x-stainless-const: true
          - type: object
            title: Tracing Configuration
            description: 'Granular configuration for tracing.

              '
            properties:
              workflow_name:
                type: string
                description: "The name of the workflow to attach to this trace. This\
                  \ is used to \nname the trace in the traces dashboard.\n"
              group_id:
                type: string
                description: "The group id to attach to this trace to enable filtering\
                  \ and \ngrouping in the traces dashboard.\n"
              metadata:
                type: object
                description: "The arbitrary metadata to attach to this trace to enable\
                  \ \nfiltering in the traces dashboard.\n"
        turn_detection:
          type: object
          description: "Configuration for turn detection. Can be set to `null` to\
            \ turn off. Server \nVAD means that the model will detect the start and\
            \ end of speech based on \naudio volume and respond at the end of user\
            \ speech.\n"
          properties:
            type:
              type: string
              description: 'Type of turn detection, only `server_vad` is currently
                supported.

                '
            threshold:
              type: number
              description: "Activation threshold for VAD (0.0 to 1.0), this defaults\
                \ to 0.5. A \nhigher threshold will require louder audio to activate\
                \ the model, and \nthus might perform better in noisy environments.\n"
            prefix_padding_ms:
              type: integer
              description: "Amount of audio to include before the VAD detected speech\
                \ (in \nmilliseconds). Defaults to 300ms.\n"
            silence_duration_ms:
              type: integer
              description: "Duration of silence to detect speech stop (in milliseconds).\
                \ Defaults \nto 500ms. With shorter values the model will respond\
                \ more quickly, \nbut may jump in on short pauses from the user.\n"
        tools:
          type: array
          description: Tools (functions) available to the model.
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                - function
                description: The type of the tool, i.e. `function`.
                x-stainless-const: true
              name:
                type: string
                description: The name of the function.
              description:
                type: string
                description: "The description of the function, including guidance\
                  \ on when and how \nto call it, and guidance about what to tell\
                  \ the user when calling \n(if anything).\n"
              parameters:
                type: object
                description: Parameters of the function in JSON Schema.
        tool_choice:
          type: string
          description: "How the model chooses tools. Options are `auto`, `none`, `required`,\
            \ or \nspecify a function.\n"
        temperature:
          type: number
          description: 'Sampling temperature for the model, limited to [0.6, 1.2].
            Defaults to 0.8.

            '
        max_response_output_tokens:
          oneOf:
          - type: integer
          - type: string
            enum:
            - inf
            x-stainless-const: true
          description: 'Maximum number of output tokens for a single assistant response,

            inclusive of tool calls. Provide an integer between 1 and 4096 to

            limit output tokens, or `inf` for the maximum available tokens for a

            given model. Defaults to `inf`.

            '
      required:
      - client_secret
    RealtimeTranscriptionSessionCreateRequest:
      type: object
      description: Realtime transcription session object configuration.
      properties:
        modalities:
          description: 'The set of modalities the model can respond with. To disable
            audio,

            set this to ["text"].

            '
          items:
            type: string
            default:
            - text
            - audio
            enum:
            - text
            - audio
        input_audio_format:
          type: string
          default: pcm16
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
          description: 'The format of input audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,

            single channel (mono), and little-endian byte order.

            '
        input_audio_transcription:
          type: object
          description: 'Configuration for input audio transcription. The client can
            optionally set the language and prompt for transcription, these offer
            additional guidance to the transcription service.

            '
          properties:
            model:
              type: string
              description: 'The model to use for transcription, current options are
                `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.

                '
              enum:
              - gpt-4o-transcribe
              - gpt-4o-mini-transcribe
              - whisper-1
            language:
              type: string
              description: 'The language of the input audio. Supplying the input language
                in

                [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
                (e.g. `en`) format

                will improve accuracy and latency.

                '
            prompt:
              type: string
              description: 'An optional text to guide the model''s style or continue
                a previous audio

                segment.

                For `whisper-1`, the [prompt is a list of keywords](/docs/guides/speech-to-text#prompting).

                For `gpt-4o-transcribe` models, the prompt is a free text string,
                for example "expect words related to technology".

                '
        turn_detection:
          type: object
          description: 'Configuration for turn detection, ether Server VAD or Semantic
            VAD. This can be set to `null` to turn off, in which case the client must
            manually trigger model response.

            Server VAD means that the model will detect the start and end of speech
            based on audio volume and respond at the end of user speech.

            Semantic VAD is more advanced and uses a turn detection model (in conjuction
            with VAD) to semantically estimate whether the user has finished speaking,
            then dynamically sets a timeout based on this probability. For example,
            if user audio trails off with "uhhm", the model will score a low probability
            of turn end and wait longer for the user to continue speaking. This can
            be useful for more natural conversations, but may have a higher latency.

            '
          properties:
            type:
              type: string
              default: server_vad
              enum:
              - server_vad
              - semantic_vad
              description: 'Type of turn detection.

                '
            eagerness:
              type: string
              default: auto
              enum:
              - low
              - medium
              - high
              - auto
              description: 'Used only for `semantic_vad` mode. The eagerness of the
                model to respond. `low` will wait longer for the user to continue
                speaking, `high` will respond more quickly. `auto` is the default
                and is equivalent to `medium`.

                '
            threshold:
              type: number
              description: 'Used only for `server_vad` mode. Activation threshold
                for VAD (0.0 to 1.0), this defaults to 0.5. A

                higher threshold will require louder audio to activate the model,
                and

                thus might perform better in noisy environments.

                '
            prefix_padding_ms:
              type: integer
              description: 'Used only for `server_vad` mode. Amount of audio to include
                before the VAD detected speech (in

                milliseconds). Defaults to 300ms.

                '
            silence_duration_ms:
              type: integer
              description: 'Used only for `server_vad` mode. Duration of silence to
                detect speech stop (in milliseconds). Defaults

                to 500ms. With shorter values the model will respond more quickly,

                but may jump in on short pauses from the user.

                '
            create_response:
              type: boolean
              default: true
              description: 'Whether or not to automatically generate a response when
                a VAD stop event occurs. Not available for transcription sessions.

                '
            interrupt_response:
              type: boolean
              default: true
              description: 'Whether or not to automatically interrupt any ongoing
                response with output to the default

                conversation (i.e. `conversation` of `auto`) when a VAD start event
                occurs. Not available for transcription sessions.

                '
        input_audio_noise_reduction:
          type: object
          default: null
          description: 'Configuration for input audio noise reduction. This can be
            set to `null` to turn off.

            Noise reduction filters audio added to the input audio buffer before it
            is sent to VAD and the model.

            Filtering the audio can improve VAD and turn detection accuracy (reducing
            false positives) and model performance by improving perception of the
            input audio.

            '
          properties:
            type:
              type: string
              enum:
              - near_field
              - far_field
              description: 'Type of noise reduction. `near_field` is for close-talking
                microphones such as headphones, `far_field` is for far-field microphones
                such as laptop or conference room microphones.

                '
        include:
          type: array
          items:
            type: string
          description: 'The set of items to include in the transcription. Current
            available items are:

            - `item.input_audio_transcription.logprobs`

            '
        client_secret:
          type: object
          description: 'Configuration options for the generated client secret.

            '
          properties:
            expires_at:
              type: object
              description: 'Configuration for the ephemeral token expiration.

                '
              properties:
                anchor:
                  default: created_at
                  type: string
                  enum:
                  - created_at
                  description: 'The anchor point for the ephemeral token expiration.
                    Only `created_at` is currently supported.

                    '
                seconds:
                  default: 600
                  type: integer
                  description: 'The number of seconds from the anchor point to the
                    expiration. Select a value between `10` and `7200`.

                    '
    RealtimeTranscriptionSessionCreateResponse:
      type: object
      description: "A new Realtime transcription session configuration.\n\nWhen a\
        \ session is created on the server via REST API, the session object\nalso\
        \ contains an ephemeral key. Default TTL for keys is 10 minutes. This \nproperty\
        \ is not present when a session is updated via the WebSocket API.\n"
      properties:
        client_secret:
          type: object
          description: 'Ephemeral key returned by the API. Only present when the session
            is

            created on the server via REST API.

            '
          properties:
            value:
              type: string
              description: 'Ephemeral key usable in client environments to authenticate
                connections

                to the Realtime API. Use this in client-side environments rather than

                a standard API token, which should only be used server-side.

                '
            expires_at:
              type: integer
              description: 'Timestamp for when the token expires. Currently, all tokens
                expire

                after one minute.

                '
          required:
          - value
          - expires_at
        modalities:
          description: 'The set of modalities the model can respond with. To disable
            audio,

            set this to ["text"].

            '
          items:
            type: string
            enum:
            - text
            - audio
        input_audio_format:
          type: string
          description: 'The format of input audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            '
        input_audio_transcription:
          type: object
          description: 'Configuration of the transcription model.

            '
          properties:
            model:
              type: string
              description: 'The model to use for transcription. Can be `gpt-4o-transcribe`,
                `gpt-4o-mini-transcribe`, or `whisper-1`.

                '
              enum:
              - gpt-4o-transcribe
              - gpt-4o-mini-transcribe
              - whisper-1
            language:
              type: string
              description: 'The language of the input audio. Supplying the input language
                in

                [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
                (e.g. `en`) format

                will improve accuracy and latency.

                '
            prompt:
              type: string
              description: 'An optional text to guide the model''s style or continue
                a previous audio

                segment. The [prompt](/docs/guides/speech-to-text#prompting) should
                match

                the audio language.

                '
        turn_detection:
          type: object
          description: "Configuration for turn detection. Can be set to `null` to\
            \ turn off. Server \nVAD means that the model will detect the start and\
            \ end of speech based on \naudio volume and respond at the end of user\
            \ speech.\n"
          properties:
            type:
              type: string
              description: 'Type of turn detection, only `server_vad` is currently
                supported.

                '
            threshold:
              type: number
              description: "Activation threshold for VAD (0.0 to 1.0), this defaults\
                \ to 0.5. A \nhigher threshold will require louder audio to activate\
                \ the model, and \nthus might perform better in noisy environments.\n"
            prefix_padding_ms:
              type: integer
              description: "Amount of audio to include before the VAD detected speech\
                \ (in \nmilliseconds). Defaults to 300ms.\n"
            silence_duration_ms:
              type: integer
              description: "Duration of silence to detect speech stop (in milliseconds).\
                \ Defaults \nto 500ms. With shorter values the model will respond\
                \ more quickly, \nbut may jump in on short pauses from the user.\n"
      required:
      - client_secret
    Reasoning:
      type: object
      description: "**o-series models only**\n\nConfiguration options for \n[reasoning\
        \ models](https://platform.openai.com/docs/guides/reasoning).\n"
      title: Reasoning
      properties:
        effort:
          $ref: '#/components/schemas/ReasoningEffort'
        summary:
          type: string
          description: 'A summary of the reasoning performed by the model. This can
            be

            useful for debugging and understanding the model''s reasoning process.

            One of `auto`, `concise`, or `detailed`.

            '
          enum:
          - auto
          - concise
          - detailed
          nullable: true
        generate_summary:
          type: string
          deprecated: true
          description: '**Deprecated:** use `summary` instead.


            A summary of the reasoning performed by the model. This can be

            useful for debugging and understanding the model''s reasoning process.

            One of `auto`, `concise`, or `detailed`.

            '
          enum:
          - auto
          - concise
          - detailed
          nullable: true
    ReasoningEffort:
      type: string
      enum:
      - low
      - medium
      - high
      default: medium
      nullable: true
      description: "**o-series models only** \n\nConstrains effort on reasoning for\
        \ \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\n\
        Currently supported values are `low`, `medium`, and `high`. Reducing\nreasoning\
        \ effort can result in faster responses and fewer tokens used\non reasoning\
        \ in a response.\n"
    ReasoningItem:
      type: object
      description: "A description of the chain of thought used by a reasoning model\
        \ while generating\na response. Be sure to include these items in your `input`\
        \ to the Responses API\nfor subsequent turns of a conversation if you are\
        \ manually \n[managing context](/docs/guides/conversation-state).\n"
      title: Reasoning
      properties:
        type:
          type: string
          description: 'The type of the object. Always `reasoning`.

            '
          enum:
          - reasoning
          x-stainless-const: true
        id:
          type: string
          description: 'The unique identifier of the reasoning content.

            '
        encrypted_content:
          type: string
          description: 'The encrypted content of the reasoning item - populated when
            a response is

            generated with `reasoning.encrypted_content` in the `include` parameter.

            '
          nullable: true
        summary:
          type: array
          description: 'Reasoning text contents.

            '
          items:
            type: object
            properties:
              type:
                type: string
                description: 'The type of the object. Always `summary_text`.

                  '
                enum:
                - summary_text
                x-stainless-const: true
              text:
                type: string
                description: 'A short summary of the reasoning used by the model when
                  generating

                  the response.

                  '
            required:
            - type
            - text
        status:
          type: string
          description: 'The status of the item. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
      required:
      - id
      - summary
      - type
    Response:
      title: The response object
      allOf:
      - $ref: '#/components/schemas/ModelResponseProperties'
      - $ref: '#/components/schemas/ResponseProperties'
      - type: object
        properties:
          id:
            type: string
            description: 'Unique identifier for this Response.

              '
          object:
            type: string
            description: 'The object type of this resource - always set to `response`.

              '
            enum:
            - response
            x-stainless-const: true
          status:
            type: string
            description: "The status of the response generation. One of `completed`,\
              \ `failed`, \n`in_progress`, `cancelled`, `queued`, or `incomplete`.\n"
            enum:
            - completed
            - failed
            - in_progress
            - cancelled
            - queued
            - incomplete
          created_at:
            type: number
            description: 'Unix timestamp (in seconds) of when this Response was created.

              '
          error:
            $ref: '#/components/schemas/ResponseError'
          incomplete_details:
            type: object
            nullable: true
            description: 'Details about why the response is incomplete.

              '
            properties:
              reason:
                type: string
                description: The reason why the response is incomplete.
                enum:
                - max_output_tokens
                - content_filter
          output:
            type: array
            description: "An array of content items generated by the model.\n\n- The\
              \ length and order of items in the `output` array is dependent\n  on\
              \ the model's response.\n- Rather than accessing the first item in the\
              \ `output` array and \n  assuming it's an `assistant` message with the\
              \ content generated by\n  the model, you might consider using the `output_text`\
              \ property where\n  supported in SDKs.\n"
            items:
              $ref: '#/components/schemas/OutputItem'
          instructions:
            nullable: true
            description: 'A system (or developer) message inserted into the model''s
              context.


              When using along with `previous_response_id`, the instructions from
              a previous

              response will not be carried over to the next response. This makes it
              simple

              to swap out system (or developer) messages in new responses.

              '
            oneOf:
            - type: string
              description: "A text input to the model, equivalent to a text input\
                \ with the \n`developer` role.\n"
            - type: array
              title: Input item list
              description: "A list of one or many input items to the model, containing\
                \ \ndifferent content types.\n"
              items:
                $ref: '#/components/schemas/InputItem'
          output_text:
            type: string
            nullable: true
            description: "SDK-only convenience property that contains the aggregated\
              \ text output \nfrom all `output_text` items in the `output` array,\
              \ if any are present. \nSupported in the Python and JavaScript SDKs.\n"
            x-oaiSupportedSDKs:
            - python
            - javascript
          usage:
            $ref: '#/components/schemas/ResponseUsage'
          parallel_tool_calls:
            type: boolean
            description: 'Whether to allow the model to run tool calls in parallel.

              '
            default: true
        required:
        - id
        - object
        - created_at
        - error
        - incomplete_details
        - instructions
        - model
        - tools
        - output
        - parallel_tool_calls
        - metadata
        - tool_choice
        - temperature
        - top_p
      example:
        id: resp_67ccd3a9da748190baa7f1570fe91ac604becb25c45c1d41
        object: response
        created_at: 1741476777
        status: completed
        error: null
        incomplete_details: null
        instructions: null
        max_output_tokens: null
        model: gpt-4o-2024-08-06
        output:
        - type: message
          id: msg_67ccd3acc8d48190a77525dc6de64b4104becb25c45c1d41
          status: completed
          role: assistant
          content:
          - type: output_text
            text: The image depicts a scenic landscape with a wooden boardwalk or
              pathway leading through lush, green grass under a blue sky with some
              clouds. The setting suggests a peaceful natural area, possibly a park
              or nature reserve. There are trees and shrubs in the background.
            annotations: []
        parallel_tool_calls: true
        previous_response_id: null
        reasoning:
          effort: null
          summary: null
        store: true
        temperature: 1
        text:
          format:
            type: text
        tool_choice: auto
        tools: []
        top_p: 1
        truncation: disabled
        usage:
          input_tokens: 328
          input_tokens_details:
            cached_tokens: 0
          output_tokens: 52
          output_tokens_details:
            reasoning_tokens: 0
          total_tokens: 380
        user: null
        metadata: {}
    ResponseAudioDeltaEvent:
      type: object
      description: Emitted when there is a partial audio response.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.audio.delta`.

            '
          enum:
          - response.audio.delta
          x-stainless-const: true
        sequence_number:
          type: integer
          description: 'A sequence number for this chunk of the stream response.

            '
        delta:
          type: string
          description: 'A chunk of Base64 encoded response audio bytes.

            '
      required:
      - type
      - delta
      - sequence_number
    ResponseAudioDoneEvent:
      type: object
      description: Emitted when the audio response is complete.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.audio.done`.

            '
          enum:
          - response.audio.done
          x-stainless-const: true
        sequence_number:
          type: integer
          description: 'The sequence number of the delta.

            '
      required:
      - type
      - sequence_number
      - response_id
    ResponseAudioTranscriptDeltaEvent:
      type: object
      description: Emitted when there is a partial transcript of audio.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.audio.transcript.delta`.

            '
          enum:
          - response.audio.transcript.delta
          x-stainless-const: true
        delta:
          type: string
          description: 'The partial transcript of the audio response.

            '
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - response_id
      - delta
      - sequence_number
    ResponseAudioTranscriptDoneEvent:
      type: object
      description: Emitted when the full audio transcript is completed.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.audio.transcript.done`.

            '
          enum:
          - response.audio.transcript.done
          x-stainless-const: true
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - response_id
      - sequence_number
    ResponseCodeInterpreterCallCodeDeltaEvent:
      type: object
      description: Emitted when a partial code snippet is streamed by the code interpreter.
      properties:
        type:
          type: string
          description: The type of the event. Always `response.code_interpreter_call_code.delta`.
          enum:
          - response.code_interpreter_call_code.delta
          x-stainless-const: true
        output_index:
          type: integer
          description: The index of the output item in the response for which the
            code is being streamed.
        item_id:
          type: string
          description: The unique identifier of the code interpreter tool call item.
        delta:
          type: string
          description: The partial code snippet being streamed by the code interpreter.
        sequence_number:
          type: integer
          description: The sequence number of this event, used to order streaming
            events.
      required:
      - type
      - output_index
      - item_id
      - delta
      - sequence_number
    ResponseCodeInterpreterCallCodeDoneEvent:
      type: object
      description: Emitted when the code snippet is finalized by the code interpreter.
      properties:
        type:
          type: string
          description: The type of the event. Always `response.code_interpreter_call_code.done`.
          enum:
          - response.code_interpreter_call_code.done
          x-stainless-const: true
        output_index:
          type: integer
          description: The index of the output item in the response for which the
            code is finalized.
        item_id:
          type: string
          description: The unique identifier of the code interpreter tool call item.
        code:
          type: string
          description: The final code snippet output by the code interpreter.
        sequence_number:
          type: integer
          description: The sequence number of this event, used to order streaming
            events.
      required:
      - type
      - output_index
      - item_id
      - code
      - sequence_number
    ResponseCodeInterpreterCallCompletedEvent:
      type: object
      description: Emitted when the code interpreter call is completed.
      properties:
        type:
          type: string
          description: The type of the event. Always `response.code_interpreter_call.completed`.
          enum:
          - response.code_interpreter_call.completed
          x-stainless-const: true
        output_index:
          type: integer
          description: The index of the output item in the response for which the
            code interpreter call is completed.
        item_id:
          type: string
          description: The unique identifier of the code interpreter tool call item.
        sequence_number:
          type: integer
          description: The sequence number of this event, used to order streaming
            events.
      required:
      - type
      - output_index
      - item_id
      - sequence_number
    ResponseCodeInterpreterCallInProgressEvent:
      type: object
      description: Emitted when a code interpreter call is in progress.
      properties:
        type:
          type: string
          description: The type of the event. Always `response.code_interpreter_call.in_progress`.
          enum:
          - response.code_interpreter_call.in_progress
          x-stainless-const: true
        output_index:
          type: integer
          description: The index of the output item in the response for which the
            code interpreter call is in progress.
        item_id:
          type: string
          description: The unique identifier of the code interpreter tool call item.
        sequence_number:
          type: integer
          description: The sequence number of this event, used to order streaming
            events.
      required:
      - type
      - output_index
      - item_id
      - sequence_number
    ResponseCodeInterpreterCallInterpretingEvent:
      type: object
      description: Emitted when the code interpreter is actively interpreting the
        code snippet.
      properties:
        type:
          type: string
          description: The type of the event. Always `response.code_interpreter_call.interpreting`.
          enum:
          - response.code_interpreter_call.interpreting
          x-stainless-const: true
        output_index:
          type: integer
          description: The index of the output item in the response for which the
            code interpreter is interpreting code.
        item_id:
          type: string
          description: The unique identifier of the code interpreter tool call item.
        sequence_number:
          type: integer
          description: The sequence number of this event, used to order streaming
            events.
      required:
      - type
      - output_index
      - item_id
      - sequence_number
    ResponseCompletedEvent:
      type: object
      description: Emitted when the model response is complete.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.completed`.

            '
          enum:
          - response.completed
          x-stainless-const: true
        response:
          $ref: '#/components/schemas/Response'
          description: 'Properties of the completed response.

            '
        sequence_number:
          type: integer
          description: The sequence number for this event.
      required:
      - type
      - response
      - sequence_number
    ResponseContentPartAddedEvent:
      type: object
      description: Emitted when a new content part is added.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.content_part.added`.

            '
          enum:
          - response.content_part.added
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the output item that the content part was added
            to.

            '
        output_index:
          type: integer
          description: 'The index of the output item that the content part was added
            to.

            '
        content_index:
          type: integer
          description: 'The index of the content part that was added.

            '
        part:
          $ref: '#/components/schemas/OutputContent'
          description: 'The content part that was added.

            '
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - item_id
      - output_index
      - content_index
      - part
      - sequence_number
    ResponseContentPartDoneEvent:
      type: object
      description: Emitted when a content part is done.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.content_part.done`.

            '
          enum:
          - response.content_part.done
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the output item that the content part was added
            to.

            '
        output_index:
          type: integer
          description: 'The index of the output item that the content part was added
            to.

            '
        content_index:
          type: integer
          description: 'The index of the content part that is done.

            '
        sequence_number:
          type: integer
          description: The sequence number of this event.
        part:
          $ref: '#/components/schemas/OutputContent'
          description: 'The content part that is done.

            '
      required:
      - type
      - item_id
      - output_index
      - content_index
      - part
      - sequence_number
    ResponseCreatedEvent:
      type: object
      description: 'An event that is emitted when a response is created.

        '
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.created`.

            '
          enum:
          - response.created
          x-stainless-const: true
        response:
          $ref: '#/components/schemas/Response'
          description: 'The response that was created.

            '
        sequence_number:
          type: integer
          description: The sequence number for this event.
      required:
      - type
      - response
      - sequence_number
    ResponseError:
      type: object
      description: 'An error object returned when the model fails to generate a Response.

        '
      nullable: true
      properties:
        code:
          $ref: '#/components/schemas/ResponseErrorCode'
        message:
          type: string
          description: 'A human-readable description of the error.

            '
      required:
      - code
      - message
    ResponseErrorCode:
      type: string
      description: 'The error code for the response.

        '
      enum:
      - server_error
      - rate_limit_exceeded
      - invalid_prompt
      - vector_store_timeout
      - invalid_image
      - invalid_image_format
      - invalid_base64_image
      - invalid_image_url
      - image_too_large
      - image_too_small
      - image_parse_error
      - image_content_policy_violation
      - invalid_image_mode
      - image_file_too_large
      - unsupported_image_media_type
      - empty_image_file
      - failed_to_download_image
      - image_file_not_found
    ResponseErrorEvent:
      type: object
      description: Emitted when an error occurs.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `error`.

            '
          enum:
          - error
          x-stainless-const: true
        code:
          type: string
          description: 'The error code.

            '
          nullable: true
        message:
          type: string
          description: 'The error message.

            '
        param:
          type: string
          description: 'The error parameter.

            '
          nullable: true
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - code
      - message
      - param
      - sequence_number
    ResponseFailedEvent:
      type: object
      description: 'An event that is emitted when a response fails.

        '
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.failed`.

            '
          enum:
          - response.failed
          x-stainless-const: true
        sequence_number:
          type: integer
          description: The sequence number of this event.
        response:
          $ref: '#/components/schemas/Response'
          description: 'The response that failed.

            '
      required:
      - type
      - response
      - sequence_number
    ResponseFileSearchCallCompletedEvent:
      type: object
      description: Emitted when a file search call is completed (results found).
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.file_search_call.completed`.

            '
          enum:
          - response.file_search_call.completed
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the file search call is
            initiated.

            '
        item_id:
          type: string
          description: 'The ID of the output item that the file search call is initiated.

            '
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - output_index
      - item_id
      - sequence_number
    ResponseFileSearchCallInProgressEvent:
      type: object
      description: Emitted when a file search call is initiated.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.file_search_call.in_progress`.

            '
          enum:
          - response.file_search_call.in_progress
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the file search call is
            initiated.

            '
        item_id:
          type: string
          description: 'The ID of the output item that the file search call is initiated.

            '
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - output_index
      - item_id
      - sequence_number
    ResponseFileSearchCallSearchingEvent:
      type: object
      description: Emitted when a file search is currently searching.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.file_search_call.searching`.

            '
          enum:
          - response.file_search_call.searching
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the file search call is
            searching.

            '
        item_id:
          type: string
          description: 'The ID of the output item that the file search call is initiated.

            '
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - output_index
      - item_id
      - sequence_number
    ResponseFormatJsonObject:
      type: object
      title: JSON object
      description: 'JSON object response format. An older method of generating JSON
        responses.

        Using `json_schema` is recommended for models that support it. Note that the

        model will not generate JSON without a system or user message instructing
        it

        to do so.

        '
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `json_object`.
          enum:
          - json_object
          x-stainless-const: true
      required:
      - type
    ResponseFormatJsonSchema:
      type: object
      title: JSON schema
      description: 'JSON Schema response format. Used to generate structured JSON
        responses.

        Learn more about [Structured Outputs](/docs/guides/structured-outputs).

        '
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `json_schema`.
          enum:
          - json_schema
          x-stainless-const: true
        json_schema:
          type: object
          title: JSON schema
          description: 'Structured Outputs configuration options, including a JSON
            Schema.

            '
          properties:
            description:
              type: string
              description: 'A description of what the response format is for, used
                by the model to

                determine how to respond in the format.

                '
            name:
              type: string
              description: 'The name of the response format. Must be a-z, A-Z, 0-9,
                or contain

                underscores and dashes, with a maximum length of 64.

                '
            schema:
              $ref: '#/components/schemas/ResponseFormatJsonSchemaSchema'
            strict:
              type: boolean
              nullable: true
              default: false
              description: 'Whether to enable strict schema adherence when generating
                the output.

                If set to true, the model will always follow the exact schema defined

                in the `schema` field. Only a subset of JSON Schema is supported when

                `strict` is `true`. To learn more, read the [Structured Outputs

                guide](/docs/guides/structured-outputs).

                '
          required:
          - name
      required:
      - type
      - json_schema
    ResponseFormatJsonSchemaSchema:
      type: object
      title: JSON schema
      description: 'The schema for the response format, described as a JSON Schema
        object.

        Learn how to build JSON schemas [here](https://json-schema.org/).

        '
      additionalProperties: true
    ResponseFormatText:
      type: object
      title: Text
      description: 'Default response format. Used to generate text responses.

        '
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `text`.
          enum:
          - text
          x-stainless-const: true
      required:
      - type
    ResponseFunctionCallArgumentsDeltaEvent:
      type: object
      description: Emitted when there is a partial function-call arguments delta.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.function_call_arguments.delta`.

            '
          enum:
          - response.function_call_arguments.delta
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the output item that the function-call arguments
            delta is added to.

            '
        output_index:
          type: integer
          description: 'The index of the output item that the function-call arguments
            delta is added to.

            '
        sequence_number:
          type: integer
          description: The sequence number of this event.
        delta:
          type: string
          description: 'The function-call arguments delta that is added.

            '
      required:
      - type
      - item_id
      - output_index
      - delta
      - sequence_number
    ResponseFunctionCallArgumentsDoneEvent:
      type: object
      description: Emitted when function-call arguments are finalized.
      properties:
        type:
          type: string
          enum:
          - response.function_call_arguments.done
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item.
        sequence_number:
          type: integer
          description: The sequence number of this event.
        arguments:
          type: string
          description: The function-call arguments.
      required:
      - type
      - item_id
      - output_index
      - arguments
      - sequence_number
    ResponseImageGenCallCompletedEvent:
      type: object
      title: ResponseImageGenCallCompletedEvent
      description: 'Emitted when an image generation tool call has completed and the
        final image is available.

        '
      properties:
        type:
          type: string
          enum:
          - response.image_generation_call.completed
          description: The type of the event. Always 'response.image_generation_call.completed'.
          x-stainless-const: true
        output_index:
          type: integer
          description: The index of the output item in the response's output array.
        sequence_number:
          type: integer
          description: The sequence number of this event.
        item_id:
          type: string
          description: The unique identifier of the image generation item being processed.
      required:
      - type
      - output_index
      - item_id
      - sequence_number
    ResponseImageGenCallGeneratingEvent:
      type: object
      title: ResponseImageGenCallGeneratingEvent
      description: 'Emitted when an image generation tool call is actively generating
        an image (intermediate state).

        '
      properties:
        type:
          type: string
          enum:
          - response.image_generation_call.generating
          description: The type of the event. Always 'response.image_generation_call.generating'.
          x-stainless-const: true
        output_index:
          type: integer
          description: The index of the output item in the response's output array.
        item_id:
          type: string
          description: The unique identifier of the image generation item being processed.
        sequence_number:
          type: integer
          description: The sequence number of the image generation item being processed.
      required:
      - type
      - output_index
      - item_id
      - sequence_number
    ResponseImageGenCallInProgressEvent:
      type: object
      title: ResponseImageGenCallInProgressEvent
      description: 'Emitted when an image generation tool call is in progress.

        '
      properties:
        type:
          type: string
          enum:
          - response.image_generation_call.in_progress
          description: The type of the event. Always 'response.image_generation_call.in_progress'.
          x-stainless-const: true
        output_index:
          type: integer
          description: The index of the output item in the response's output array.
        item_id:
          type: string
          description: The unique identifier of the image generation item being processed.
        sequence_number:
          type: integer
          description: The sequence number of the image generation item being processed.
      required:
      - type
      - output_index
      - item_id
      - sequence_number
    ResponseImageGenCallPartialImageEvent:
      type: object
      title: ResponseImageGenCallPartialImageEvent
      description: 'Emitted when a partial image is available during image generation
        streaming.

        '
      properties:
        type:
          type: string
          enum:
          - response.image_generation_call.partial_image
          description: The type of the event. Always 'response.image_generation_call.partial_image'.
          x-stainless-const: true
        output_index:
          type: integer
          description: The index of the output item in the response's output array.
        item_id:
          type: string
          description: The unique identifier of the image generation item being processed.
        sequence_number:
          type: integer
          description: The sequence number of the image generation item being processed.
        partial_image_index:
          type: integer
          description: 0-based index for the partial image (backend is 1-based, but
            this is 0-based for the user).
        partial_image_b64:
          type: string
          description: Base64-encoded partial image data, suitable for rendering as
            an image.
      required:
      - type
      - output_index
      - item_id
      - sequence_number
      - partial_image_index
      - partial_image_b64
    ResponseInProgressEvent:
      type: object
      description: Emitted when the response is in progress.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.in_progress`.

            '
          enum:
          - response.in_progress
          x-stainless-const: true
        response:
          $ref: '#/components/schemas/Response'
          description: 'The response that is in progress.

            '
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - response
      - sequence_number
    ResponseIncompleteEvent:
      type: object
      description: 'An event that is emitted when a response finishes as incomplete.

        '
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.incomplete`.

            '
          enum:
          - response.incomplete
          x-stainless-const: true
        response:
          $ref: '#/components/schemas/Response'
          description: 'The response that was incomplete.

            '
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - response
      - sequence_number
    ResponseItemList:
      type: object
      description: A list of Response items.
      properties:
        object:
          type: string
          description: The type of object returned, must be `list`.
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          description: A list of items used to generate this response.
          items:
            $ref: '#/components/schemas/ItemResource'
        has_more:
          type: boolean
          description: Whether there are more items available.
        first_id:
          type: string
          description: The ID of the first item in the list.
        last_id:
          type: string
          description: The ID of the last item in the list.
      required:
      - object
      - data
      - has_more
      - first_id
      - last_id
    ResponseLogProb:
      type: object
      description: "A logprob is the logarithmic probability that the model assigns\
        \ to producing \na particular token at a given position in the sequence. Less-negative\
        \ (higher) \nlogprob values indicate greater model confidence in that token\
        \ choice.\n"
      properties:
        token:
          description: A possible text token.
          type: string
        logprob:
          description: 'The log probability of this token.

            '
          type: number
        top_logprobs:
          description: 'The log probability of the top 20 most likely tokens.

            '
          type: array
          items:
            type: object
            properties:
              token:
                description: A possible text token.
                type: string
              logprob:
                description: The log probability of this token.
                type: number
      required:
      - token
      - logprob
    ResponseMCPCallArgumentsDeltaEvent:
      type: object
      title: ResponseMCPCallArgumentsDeltaEvent
      description: 'Emitted when there is a delta (partial update) to the arguments
        of an MCP tool call.

        '
      properties:
        type:
          type: string
          enum:
          - response.mcp_call_arguments.delta
          description: The type of the event. Always 'response.mcp_call_arguments.delta'.
          x-stainless-const: true
        output_index:
          type: integer
          description: The index of the output item in the response's output array.
        item_id:
          type: string
          description: The unique identifier of the MCP tool call item being processed.
        delta:
          type: string
          description: 'A JSON string containing the partial update to the arguments
            for the MCP tool call.

            '
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - output_index
      - item_id
      - delta
      - sequence_number
    ResponseMCPCallArgumentsDoneEvent:
      type: object
      title: ResponseMCPCallArgumentsDoneEvent
      description: 'Emitted when the arguments for an MCP tool call are finalized.

        '
      properties:
        type:
          type: string
          enum:
          - response.mcp_call_arguments.done
          description: The type of the event. Always 'response.mcp_call_arguments.done'.
          x-stainless-const: true
        output_index:
          type: integer
          description: The index of the output item in the response's output array.
        item_id:
          type: string
          description: The unique identifier of the MCP tool call item being processed.
        arguments:
          type: string
          description: 'A JSON string containing the finalized arguments for the MCP
            tool call.

            '
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - output_index
      - item_id
      - arguments
      - sequence_number
    ResponseMCPCallCompletedEvent:
      type: object
      title: ResponseMCPCallCompletedEvent
      description: 'Emitted when an MCP  tool call has completed successfully.

        '
      properties:
        type:
          type: string
          enum:
          - response.mcp_call.completed
          description: The type of the event. Always 'response.mcp_call.completed'.
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the MCP tool call item that completed.
        output_index:
          type: integer
          description: The index of the output item that completed.
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - item_id
      - output_index
      - sequence_number
    ResponseMCPCallFailedEvent:
      type: object
      title: ResponseMCPCallFailedEvent
      description: 'Emitted when an MCP  tool call has failed.

        '
      properties:
        type:
          type: string
          enum:
          - response.mcp_call.failed
          description: The type of the event. Always 'response.mcp_call.failed'.
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the MCP tool call item that failed.
        output_index:
          type: integer
          description: The index of the output item that failed.
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - item_id
      - output_index
      - sequence_number
    ResponseMCPCallInProgressEvent:
      type: object
      title: ResponseMCPCallInProgressEvent
      description: 'Emitted when an MCP  tool call is in progress.

        '
      properties:
        type:
          type: string
          enum:
          - response.mcp_call.in_progress
          description: The type of the event. Always 'response.mcp_call.in_progress'.
          x-stainless-const: true
        sequence_number:
          type: integer
          description: The sequence number of this event.
        output_index:
          type: integer
          description: The index of the output item in the response's output array.
        item_id:
          type: string
          description: The unique identifier of the MCP tool call item being processed.
      required:
      - type
      - output_index
      - item_id
      - sequence_number
    ResponseMCPListToolsCompletedEvent:
      type: object
      title: ResponseMCPListToolsCompletedEvent
      description: 'Emitted when the list of available MCP tools has been successfully
        retrieved.

        '
      properties:
        type:
          type: string
          enum:
          - response.mcp_list_tools.completed
          description: The type of the event. Always 'response.mcp_list_tools.completed'.
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the MCP tool call item that produced this output.
        output_index:
          type: integer
          description: The index of the output item that was processed.
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - item_id
      - output_index
      - sequence_number
    ResponseMCPListToolsFailedEvent:
      type: object
      title: ResponseMCPListToolsFailedEvent
      description: 'Emitted when the attempt to list available MCP tools has failed.

        '
      properties:
        type:
          type: string
          enum:
          - response.mcp_list_tools.failed
          description: The type of the event. Always 'response.mcp_list_tools.failed'.
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the MCP tool call item that failed.
        output_index:
          type: integer
          description: The index of the output item that failed.
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - item_id
      - output_index
      - sequence_number
    ResponseMCPListToolsInProgressEvent:
      type: object
      title: ResponseMCPListToolsInProgressEvent
      description: 'Emitted when the system is in the process of retrieving the list
        of available MCP tools.

        '
      properties:
        type:
          type: string
          enum:
          - response.mcp_list_tools.in_progress
          description: The type of the event. Always 'response.mcp_list_tools.in_progress'.
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the MCP tool call item that is being processed.
        output_index:
          type: integer
          description: The index of the output item that is being processed.
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - item_id
      - output_index
      - sequence_number
    ResponseModalities:
      type: array
      nullable: true
      description: "Output types that you would like the model to generate.\nMost\
        \ models are capable of generating text, which is the default:\n\n`[\"text\"\
        ]`\n\nThe `gpt-4o-audio-preview` model can also be used to \n[generate audio](/docs/guides/audio).\
        \ To request that this model generate \nboth text and audio responses, you\
        \ can use:\n\n`[\"text\", \"audio\"]`\n"
      items:
        type: string
        enum:
        - text
        - audio
    ResponseOutputItemAddedEvent:
      type: object
      description: Emitted when a new output item is added.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.output_item.added`.

            '
          enum:
          - response.output_item.added
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that was added.

            '
        sequence_number:
          type: integer
          description: 'The sequence number of this event.

            '
        item:
          $ref: '#/components/schemas/OutputItem'
          description: 'The output item that was added.

            '
      required:
      - type
      - output_index
      - item
      - sequence_number
    ResponseOutputItemDoneEvent:
      type: object
      description: Emitted when an output item is marked done.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.output_item.done`.

            '
          enum:
          - response.output_item.done
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that was marked done.

            '
        sequence_number:
          type: integer
          description: 'The sequence number of this event.

            '
        item:
          $ref: '#/components/schemas/OutputItem'
          description: 'The output item that was marked done.

            '
      required:
      - type
      - output_index
      - item
      - sequence_number
    ResponseOutputTextAnnotationAddedEvent:
      type: object
      title: ResponseOutputTextAnnotationAddedEvent
      description: 'Emitted when an annotation is added to output text content.

        '
      properties:
        type:
          type: string
          enum:
          - response.output_text.annotation.added
          description: The type of the event. Always 'response.output_text.annotation.added'.
          x-stainless-const: true
        item_id:
          type: string
          description: The unique identifier of the item to which the annotation is
            being added.
        output_index:
          type: integer
          description: The index of the output item in the response's output array.
        content_index:
          type: integer
          description: The index of the content part within the output item.
        annotation_index:
          type: integer
          description: The index of the annotation within the content part.
        sequence_number:
          type: integer
          description: The sequence number of this event.
        annotation:
          type: object
          description: The annotation object being added. (See annotation schema for
            details.)
      required:
      - type
      - item_id
      - output_index
      - content_index
      - annotation_index
      - annotation
      - sequence_number
    ResponsePromptVariables:
      type: object
      title: Prompt Variables
      description: 'Optional map of values to substitute in for variables in your

        prompt. The substitution values can either be strings, or other

        Response input types like images or files.

        '
      x-oaiExpandable: true
      x-oaiTypeLabel: map
      nullable: true
      additionalProperties:
        x-oaiExpandable: true
        x-oaiTypeLabel: map
        oneOf:
        - type: string
        - $ref: '#/components/schemas/InputTextContent'
        - $ref: '#/components/schemas/InputImageContent'
        - $ref: '#/components/schemas/InputFileContent'
    ResponseProperties:
      type: object
      properties:
        previous_response_id:
          type: string
          description: "The unique ID of the previous response to the model. Use this\
            \ to\ncreate multi-turn conversations. Learn more about \n[conversation\
            \ state](/docs/guides/conversation-state).\n"
          nullable: true
        model:
          description: 'Model ID used to generate the response, like `gpt-4o` or `o3`.
            OpenAI

            offers a wide range of models with different capabilities, performance

            characteristics, and price points. Refer to the [model guide](/docs/models)

            to browse and compare available models.

            '
          $ref: '#/components/schemas/ModelIdsResponses'
        reasoning:
          $ref: '#/components/schemas/Reasoning'
          nullable: true
        background:
          type: boolean
          description: "Whether to run the model response in the background. \n[Learn\
            \ more](/docs/guides/background).\n"
          default: false
          nullable: true
        max_output_tokens:
          description: 'An upper bound for the number of tokens that can be generated
            for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).

            '
          type: integer
          nullable: true
        max_tool_calls:
          description: 'The maximum number of total calls to built-in tools that can
            be processed in a response. This maximum number applies across all built-in
            tool calls, not per individual tool. Any further attempts to call a tool
            by the model will be ignored.

            '
          type: integer
          nullable: true
        text:
          type: object
          description: 'Configuration options for a text response from the model.
            Can be plain

            text or structured JSON data. Learn more:

            - [Text inputs and outputs](/docs/guides/text)

            - [Structured Outputs](/docs/guides/structured-outputs)

            '
          properties:
            format:
              $ref: '#/components/schemas/TextResponseFormatConfiguration'
        tools:
          type: array
          description: "An array of tools the model may call while generating a response.\
            \ You \ncan specify which tool to use by setting the `tool_choice` parameter.\n\
            \nThe two categories of tools you can provide the model are:\n\n- **Built-in\
            \ tools**: Tools that are provided by OpenAI that extend the\n  model's\
            \ capabilities, like [web search](/docs/guides/tools-web-search)\n  or\
            \ [file search](/docs/guides/tools-file-search). Learn more about\n  [built-in\
            \ tools](/docs/guides/tools).\n- **Function calls (custom tools)**: Functions\
            \ that are defined by you,\n  enabling the model to call your own code.\
            \ Learn more about\n  [function calling](/docs/guides/function-calling).\n"
          items:
            $ref: '#/components/schemas/Tool'
        tool_choice:
          description: 'How the model should select which tool (or tools) to use when
            generating

            a response. See the `tools` parameter to see how to specify which tools

            the model can call.

            '
          oneOf:
          - $ref: '#/components/schemas/ToolChoiceOptions'
          - $ref: '#/components/schemas/ToolChoiceTypes'
          - $ref: '#/components/schemas/ToolChoiceFunction'
          - $ref: '#/components/schemas/ToolChoiceMCP'
        prompt:
          $ref: '#/components/schemas/Prompt'
        truncation:
          type: string
          description: "The truncation strategy to use for the model response.\n-\
            \ `auto`: If the context of this response and previous ones exceeds\n\
            \  the model's context window size, the model will truncate the \n  response\
            \ to fit the context window by dropping input items in the\n  middle of\
            \ the conversation. \n- `disabled` (default): If a model response will\
            \ exceed the context window \n  size for a model, the request will fail\
            \ with a 400 error.\n"
          enum:
          - auto
          - disabled
          nullable: true
          default: disabled
    ResponseQueuedEvent:
      type: object
      title: ResponseQueuedEvent
      description: 'Emitted when a response is queued and waiting to be processed.

        '
      properties:
        type:
          type: string
          enum:
          - response.queued
          description: The type of the event. Always 'response.queued'.
          x-stainless-const: true
        response:
          $ref: '#/components/schemas/Response'
          description: The full response object that is queued.
        sequence_number:
          type: integer
          description: The sequence number for this event.
      required:
      - type
      - response
      - sequence_number
    ResponseReasoningSummaryDeltaEvent:
      type: object
      title: ResponseReasoningSummaryDeltaEvent
      description: 'Emitted when there is a delta (partial update) to the reasoning
        summary content.

        '
      properties:
        type:
          type: string
          enum:
          - response.reasoning_summary.delta
          description: The type of the event. Always 'response.reasoning_summary.delta'.
          x-stainless-const: true
        item_id:
          type: string
          description: The unique identifier of the item for which the reasoning summary
            is being updated.
        output_index:
          type: integer
          description: The index of the output item in the response's output array.
        summary_index:
          type: integer
          description: The index of the summary part within the output item.
        sequence_number:
          type: integer
          description: The sequence number of this event.
        delta:
          type: object
          description: The partial update to the reasoning summary content.
      required:
      - type
      - item_id
      - output_index
      - summary_index
      - delta
      - sequence_number
    ResponseReasoningSummaryDoneEvent:
      type: object
      title: ResponseReasoningSummaryDoneEvent
      description: 'Emitted when the reasoning summary content is finalized for an
        item.

        '
      properties:
        type:
          type: string
          enum:
          - response.reasoning_summary.done
          description: The type of the event. Always 'response.reasoning_summary.done'.
          x-stainless-const: true
        item_id:
          type: string
          description: The unique identifier of the item for which the reasoning summary
            is finalized.
        output_index:
          type: integer
          description: The index of the output item in the response's output array.
        summary_index:
          type: integer
          description: The index of the summary part within the output item.
        text:
          type: string
          description: The finalized reasoning summary text.
        sequence_number:
          type: integer
          description: The sequence number of this event.
      required:
      - type
      - item_id
      - output_index
      - summary_index
      - text
      - sequence_number
    ResponseReasoningSummaryPartAddedEvent:
      type: object
      description: Emitted when a new reasoning summary part is added.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.reasoning_summary_part.added`.

            '
          enum:
          - response.reasoning_summary_part.added
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the item this summary part is associated with.

            '
        output_index:
          type: integer
          description: 'The index of the output item this summary part is associated
            with.

            '
        summary_index:
          type: integer
          description: 'The index of the summary part within the reasoning summary.

            '
        sequence_number:
          type: integer
          description: 'The sequence number of this event.

            '
        part:
          type: object
          description: 'The summary part that was added.

            '
          properties:
            type:
              type: string
              description: The type of the summary part. Always `summary_text`.
              enum:
              - summary_text
              x-stainless-const: true
            text:
              type: string
              description: The text of the summary part.
          required:
          - type
          - text
      required:
      - type
      - item_id
      - output_index
      - summary_index
      - part
      - sequence_number
    ResponseReasoningSummaryPartDoneEvent:
      type: object
      description: Emitted when a reasoning summary part is completed.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.reasoning_summary_part.done`.

            '
          enum:
          - response.reasoning_summary_part.done
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the item this summary part is associated with.

            '
        output_index:
          type: integer
          description: 'The index of the output item this summary part is associated
            with.

            '
        summary_index:
          type: integer
          description: 'The index of the summary part within the reasoning summary.

            '
        sequence_number:
          type: integer
          description: 'The sequence number of this event.

            '
        part:
          type: object
          description: 'The completed summary part.

            '
          properties:
            type:
              type: string
              description: The type of the summary part. Always `summary_text`.
              enum:
              - summary_text
              x-stainless-const: true
            text:
              type: string
              description: The text of the summary part.
          required:
          - type
          - text
      required:
      - type
      - item_id
      - output_index
      - summary_index
      - part
      - sequence_number
    ResponseReasoningSummaryTextDeltaEvent:
      type: object
      description: Emitted when a delta is added to a reasoning summary text.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.reasoning_summary_text.delta`.

            '
          enum:
          - response.reasoning_summary_text.delta
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the item this summary text delta is associated with.

            '
        output_index:
          type: integer
          description: 'The index of the output item this summary text delta is associated
            with.

            '
        summary_index:
          type: integer
          description: 'The index of the summary part within the reasoning summary.

            '
        delta:
          type: string
          description: 'The text delta that was added to the summary.

            '
        sequence_number:
          type: integer
          description: 'The sequence number of this event.

            '
      required:
      - type
      - item_id
      - output_index
      - summary_index
      - delta
      - sequence_number
    ResponseReasoningSummaryTextDoneEvent:
      type: object
      description: Emitted when a reasoning summary text is completed.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.reasoning_summary_text.done`.

            '
          enum:
          - response.reasoning_summary_text.done
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the item this summary text is associated with.

            '
        output_index:
          type: integer
          description: 'The index of the output item this summary text is associated
            with.

            '
        summary_index:
          type: integer
          description: 'The index of the summary part within the reasoning summary.

            '
        text:
          type: string
          description: 'The full text of the completed reasoning summary.

            '
        sequence_number:
          type: integer
          description: 'The sequence number of this event.

            '
      required:
      - type
      - item_id
      - output_index
      - summary_index
      - text
      - sequence_number
    ResponseRefusalDeltaEvent:
      type: object
      description: Emitted when there is a partial refusal text.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.refusal.delta`.

            '
          enum:
          - response.refusal.delta
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the output item that the refusal text is added to.

            '
        output_index:
          type: integer
          description: 'The index of the output item that the refusal text is added
            to.

            '
        content_index:
          type: integer
          description: 'The index of the content part that the refusal text is added
            to.

            '
        delta:
          type: string
          description: 'The refusal text that is added.

            '
        sequence_number:
          type: integer
          description: 'The sequence number of this event.

            '
      required:
      - type
      - item_id
      - output_index
      - content_index
      - delta
      - sequence_number
    ResponseRefusalDoneEvent:
      type: object
      description: Emitted when refusal text is finalized.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.refusal.done`.

            '
          enum:
          - response.refusal.done
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the output item that the refusal text is finalized.

            '
        output_index:
          type: integer
          description: 'The index of the output item that the refusal text is finalized.

            '
        content_index:
          type: integer
          description: 'The index of the content part that the refusal text is finalized.

            '
        refusal:
          type: string
          description: 'The refusal text that is finalized.

            '
        sequence_number:
          type: integer
          description: 'The sequence number of this event.

            '
      required:
      - type
      - item_id
      - output_index
      - content_index
      - refusal
      - sequence_number
    ResponseStreamEvent:
      anyOf:
      - $ref: '#/components/schemas/ResponseAudioDeltaEvent'
      - $ref: '#/components/schemas/ResponseAudioDoneEvent'
      - $ref: '#/components/schemas/ResponseAudioTranscriptDeltaEvent'
      - $ref: '#/components/schemas/ResponseAudioTranscriptDoneEvent'
      - $ref: '#/components/schemas/ResponseCodeInterpreterCallCodeDeltaEvent'
      - $ref: '#/components/schemas/ResponseCodeInterpreterCallCodeDoneEvent'
      - $ref: '#/components/schemas/ResponseCodeInterpreterCallCompletedEvent'
      - $ref: '#/components/schemas/ResponseCodeInterpreterCallInProgressEvent'
      - $ref: '#/components/schemas/ResponseCodeInterpreterCallInterpretingEvent'
      - $ref: '#/components/schemas/ResponseCompletedEvent'
      - $ref: '#/components/schemas/ResponseContentPartAddedEvent'
      - $ref: '#/components/schemas/ResponseContentPartDoneEvent'
      - $ref: '#/components/schemas/ResponseCreatedEvent'
      - $ref: '#/components/schemas/ResponseErrorEvent'
      - $ref: '#/components/schemas/ResponseFileSearchCallCompletedEvent'
      - $ref: '#/components/schemas/ResponseFileSearchCallInProgressEvent'
      - $ref: '#/components/schemas/ResponseFileSearchCallSearchingEvent'
      - $ref: '#/components/schemas/ResponseFunctionCallArgumentsDeltaEvent'
      - $ref: '#/components/schemas/ResponseFunctionCallArgumentsDoneEvent'
      - $ref: '#/components/schemas/ResponseInProgressEvent'
      - $ref: '#/components/schemas/ResponseFailedEvent'
      - $ref: '#/components/schemas/ResponseIncompleteEvent'
      - $ref: '#/components/schemas/ResponseOutputItemAddedEvent'
      - $ref: '#/components/schemas/ResponseOutputItemDoneEvent'
      - $ref: '#/components/schemas/ResponseReasoningSummaryPartAddedEvent'
      - $ref: '#/components/schemas/ResponseReasoningSummaryPartDoneEvent'
      - $ref: '#/components/schemas/ResponseReasoningSummaryTextDeltaEvent'
      - $ref: '#/components/schemas/ResponseReasoningSummaryTextDoneEvent'
      - $ref: '#/components/schemas/ResponseRefusalDeltaEvent'
      - $ref: '#/components/schemas/ResponseRefusalDoneEvent'
      - $ref: '#/components/schemas/ResponseTextDeltaEvent'
      - $ref: '#/components/schemas/ResponseTextDoneEvent'
      - $ref: '#/components/schemas/ResponseWebSearchCallCompletedEvent'
      - $ref: '#/components/schemas/ResponseWebSearchCallInProgressEvent'
      - $ref: '#/components/schemas/ResponseWebSearchCallSearchingEvent'
      - $ref: '#/components/schemas/ResponseImageGenCallCompletedEvent'
      - $ref: '#/components/schemas/ResponseImageGenCallGeneratingEvent'
      - $ref: '#/components/schemas/ResponseImageGenCallInProgressEvent'
      - $ref: '#/components/schemas/ResponseImageGenCallPartialImageEvent'
      - $ref: '#/components/schemas/ResponseMCPCallArgumentsDeltaEvent'
      - $ref: '#/components/schemas/ResponseMCPCallArgumentsDoneEvent'
      - $ref: '#/components/schemas/ResponseMCPCallCompletedEvent'
      - $ref: '#/components/schemas/ResponseMCPCallFailedEvent'
      - $ref: '#/components/schemas/ResponseMCPCallInProgressEvent'
      - $ref: '#/components/schemas/ResponseMCPListToolsCompletedEvent'
      - $ref: '#/components/schemas/ResponseMCPListToolsFailedEvent'
      - $ref: '#/components/schemas/ResponseMCPListToolsInProgressEvent'
      - $ref: '#/components/schemas/ResponseOutputTextAnnotationAddedEvent'
      - $ref: '#/components/schemas/ResponseQueuedEvent'
      - $ref: '#/components/schemas/ResponseReasoningSummaryDeltaEvent'
      - $ref: '#/components/schemas/ResponseReasoningSummaryDoneEvent'
      discriminator:
        propertyName: type
    ResponseTextDeltaEvent:
      type: object
      description: Emitted when there is an additional text delta.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.output_text.delta`.

            '
          enum:
          - response.output_text.delta
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the output item that the text delta was added to.

            '
        output_index:
          type: integer
          description: 'The index of the output item that the text delta was added
            to.

            '
        content_index:
          type: integer
          description: 'The index of the content part that the text delta was added
            to.

            '
        delta:
          type: string
          description: 'The text delta that was added.

            '
        sequence_number:
          type: integer
          description: The sequence number for this event.
        logprobs:
          type: array
          description: 'The log probabilities of the tokens in the delta.

            '
          items:
            $ref: '#/components/schemas/ResponseLogProb'
      required:
      - type
      - item_id
      - output_index
      - content_index
      - delta
      - sequence_number
      - logprobs
    ResponseTextDoneEvent:
      type: object
      description: Emitted when text content is finalized.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.output_text.done`.

            '
          enum:
          - response.output_text.done
          x-stainless-const: true
        item_id:
          type: string
          description: 'The ID of the output item that the text content is finalized.

            '
        output_index:
          type: integer
          description: 'The index of the output item that the text content is finalized.

            '
        content_index:
          type: integer
          description: 'The index of the content part that the text content is finalized.

            '
        text:
          type: string
          description: 'The text content that is finalized.

            '
        sequence_number:
          type: integer
          description: The sequence number for this event.
        logprobs:
          type: array
          description: 'The log probabilities of the tokens in the delta.

            '
          items:
            $ref: '#/components/schemas/ResponseLogProb'
      required:
      - type
      - item_id
      - output_index
      - content_index
      - text
      - sequence_number
      - logprobs
    ResponseUsage:
      type: object
      description: 'Represents token usage details including input tokens, output
        tokens,

        a breakdown of output tokens, and the total tokens used.

        '
      properties:
        input_tokens:
          type: integer
          description: The number of input tokens.
        input_tokens_details:
          type: object
          description: A detailed breakdown of the input tokens.
          properties:
            cached_tokens:
              type: integer
              description: "The number of tokens that were retrieved from the cache.\
                \ \n[More on prompt caching](/docs/guides/prompt-caching).\n"
          required:
          - cached_tokens
        output_tokens:
          type: integer
          description: The number of output tokens.
        output_tokens_details:
          type: object
          description: A detailed breakdown of the output tokens.
          properties:
            reasoning_tokens:
              type: integer
              description: The number of reasoning tokens.
          required:
          - reasoning_tokens
        total_tokens:
          type: integer
          description: The total number of tokens used.
      required:
      - input_tokens
      - input_tokens_details
      - output_tokens
      - output_tokens_details
      - total_tokens
    ResponseWebSearchCallCompletedEvent:
      type: object
      description: Emitted when a web search call is completed.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.web_search_call.completed`.

            '
          enum:
          - response.web_search_call.completed
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the web search call is associated
            with.

            '
        item_id:
          type: string
          description: 'Unique ID for the output item associated with the web search
            call.

            '
        sequence_number:
          type: integer
          description: The sequence number of the web search call being processed.
      required:
      - type
      - output_index
      - item_id
      - sequence_number
    ResponseWebSearchCallInProgressEvent:
      type: object
      description: Emitted when a web search call is initiated.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.web_search_call.in_progress`.

            '
          enum:
          - response.web_search_call.in_progress
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the web search call is associated
            with.

            '
        item_id:
          type: string
          description: 'Unique ID for the output item associated with the web search
            call.

            '
        sequence_number:
          type: integer
          description: The sequence number of the web search call being processed.
      required:
      - type
      - output_index
      - item_id
      - sequence_number
    ResponseWebSearchCallSearchingEvent:
      type: object
      description: Emitted when a web search call is executing.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `response.web_search_call.searching`.

            '
          enum:
          - response.web_search_call.searching
          x-stainless-const: true
        output_index:
          type: integer
          description: 'The index of the output item that the web search call is associated
            with.

            '
        item_id:
          type: string
          description: 'Unique ID for the output item associated with the web search
            call.

            '
        sequence_number:
          type: integer
          description: The sequence number of the web search call being processed.
      required:
      - type
      - output_index
      - item_id
      - sequence_number
    RunCompletionUsage:
      type: object
      description: Usage statistics related to the run. This value will be `null`
        if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
      properties:
        completion_tokens:
          type: integer
          description: Number of completion tokens used over the course of the run.
        prompt_tokens:
          type: integer
          description: Number of prompt tokens used over the course of the run.
        total_tokens:
          type: integer
          description: Total number of tokens used (prompt + completion).
      required:
      - prompt_tokens
      - completion_tokens
      - total_tokens
      nullable: true
    RunGraderRequest:
      type: object
      title: RunGraderRequest
      properties:
        grader:
          type: object
          description: The grader used for the fine-tuning job.
          oneOf:
          - $ref: '#/components/schemas/GraderStringCheck'
          - $ref: '#/components/schemas/GraderTextSimilarity'
          - $ref: '#/components/schemas/GraderPython'
          - $ref: '#/components/schemas/GraderScoreModel'
          - $ref: '#/components/schemas/GraderMulti'
        item:
          type: object
          description: "The dataset item provided to the grader. This will be used\
            \ to populate \nthe `item` namespace. See [the guide](/docs/guides/graders)\
            \ for more details.\n"
        model_sample:
          type: string
          description: "The model sample to be evaluated. This value will be used\
            \ to populate \nthe `sample` namespace. See [the guide](/docs/guides/graders)\
            \ for more details.\nThe `output_json` variable will be populated if the\
            \ model sample is a \nvalid JSON string.\n"
      required:
      - grader
      - model_sample
    RunGraderResponse:
      type: object
      properties:
        reward:
          type: number
        metadata:
          type: object
          properties:
            name:
              type: string
            type:
              type: string
            errors:
              type: object
              properties:
                formula_parse_error:
                  type: boolean
                sample_parse_error:
                  type: boolean
                truncated_observation_error:
                  type: boolean
                unresponsive_reward_error:
                  type: boolean
                invalid_variable_error:
                  type: boolean
                other_error:
                  type: boolean
                python_grader_server_error:
                  type: boolean
                python_grader_server_error_type:
                  type: string
                  nullable: true
                python_grader_runtime_error:
                  type: boolean
                python_grader_runtime_error_details:
                  type: string
                  nullable: true
                model_grader_server_error:
                  type: boolean
                model_grader_refusal_error:
                  type: boolean
                model_grader_parse_error:
                  type: boolean
                model_grader_server_error_details:
                  type: string
                  nullable: true
              required:
              - formula_parse_error
              - sample_parse_error
              - truncated_observation_error
              - unresponsive_reward_error
              - invalid_variable_error
              - other_error
              - python_grader_server_error
              - python_grader_server_error_type
              - python_grader_runtime_error
              - python_grader_runtime_error_details
              - model_grader_server_error
              - model_grader_refusal_error
              - model_grader_parse_error
              - model_grader_server_error_details
            execution_time:
              type: number
            scores:
              type: object
              additionalProperties: {}
            token_usage:
              type: integer
              nullable: true
            sampled_model_name:
              type: string
              nullable: true
          required:
          - name
          - type
          - errors
          - execution_time
          - scores
          - token_usage
          - sampled_model_name
        sub_rewards:
          type: object
          additionalProperties: {}
        model_grader_token_usage_per_model:
          type: object
          additionalProperties: {}
      required:
      - reward
      - metadata
      - sub_rewards
      - model_grader_token_usage_per_model
    RunObject:
      type: object
      title: A run on a thread
      description: Represents an execution run on a [thread](/docs/api-reference/threads).
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `thread.run`.
          type: string
          enum:
          - thread.run
          x-stainless-const: true
        created_at:
          description: The Unix timestamp (in seconds) for when the run was created.
          type: integer
        thread_id:
          description: The ID of the [thread](/docs/api-reference/threads) that was
            executed on as a part of this run.
          type: string
        assistant_id:
          description: The ID of the [assistant](/docs/api-reference/assistants) used
            for execution of this run.
          type: string
        status:
          description: The status of the run, which can be either `queued`, `in_progress`,
            `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`,
            or `expired`.
          type: string
          enum:
          - queued
          - in_progress
          - requires_action
          - cancelling
          - cancelled
          - failed
          - completed
          - incomplete
          - expired
        required_action:
          type: object
          description: Details on the action required to continue the run. Will be
            `null` if no action is required.
          nullable: true
          properties:
            type:
              description: For now, this is always `submit_tool_outputs`.
              type: string
              enum:
              - submit_tool_outputs
              x-stainless-const: true
            submit_tool_outputs:
              type: object
              description: Details on the tool outputs needed for this run to continue.
              properties:
                tool_calls:
                  type: array
                  description: A list of the relevant tool calls.
                  items:
                    $ref: '#/components/schemas/RunToolCallObject'
              required:
              - tool_calls
          required:
          - type
          - submit_tool_outputs
        last_error:
          type: object
          description: The last error associated with this run. Will be `null` if
            there are no errors.
          nullable: true
          properties:
            code:
              type: string
              description: One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
              enum:
              - server_error
              - rate_limit_exceeded
              - invalid_prompt
            message:
              type: string
              description: A human-readable description of the error.
          required:
          - code
          - message
        expires_at:
          description: The Unix timestamp (in seconds) for when the run will expire.
          type: integer
          nullable: true
        started_at:
          description: The Unix timestamp (in seconds) for when the run was started.
          type: integer
          nullable: true
        cancelled_at:
          description: The Unix timestamp (in seconds) for when the run was cancelled.
          type: integer
          nullable: true
        failed_at:
          description: The Unix timestamp (in seconds) for when the run failed.
          type: integer
          nullable: true
        completed_at:
          description: The Unix timestamp (in seconds) for when the run was completed.
          type: integer
          nullable: true
        incomplete_details:
          description: Details on why the run is incomplete. Will be `null` if the
            run is not incomplete.
          type: object
          nullable: true
          properties:
            reason:
              description: The reason why the run is incomplete. This will point to
                which specific token limit was reached over the course of the run.
              type: string
              enum:
              - max_completion_tokens
              - max_prompt_tokens
        model:
          description: The model that the [assistant](/docs/api-reference/assistants)
            used for this run.
          type: string
        instructions:
          description: The instructions that the [assistant](/docs/api-reference/assistants)
            used for this run.
          type: string
        tools:
          description: The list of tools that the [assistant](/docs/api-reference/assistants)
            used for this run.
          default: []
          type: array
          maxItems: 20
          items:
            oneOf:
            - $ref: '#/components/schemas/AssistantToolsCode'
            - $ref: '#/components/schemas/AssistantToolsFileSearch'
            - $ref: '#/components/schemas/AssistantToolsFunction'
        metadata:
          $ref: '#/components/schemas/Metadata'
        usage:
          $ref: '#/components/schemas/RunCompletionUsage'
        temperature:
          description: The sampling temperature used for this run. If not set, defaults
            to 1.
          type: number
          nullable: true
        top_p:
          description: The nucleus sampling value used for this run. If not set, defaults
            to 1.
          type: number
          nullable: true
        max_prompt_tokens:
          type: integer
          nullable: true
          description: 'The maximum number of prompt tokens specified to have been
            used over the course of the run.

            '
          minimum: 256
        max_completion_tokens:
          type: integer
          nullable: true
          description: 'The maximum number of completion tokens specified to have
            been used over the course of the run.

            '
          minimum: 256
        truncation_strategy:
          allOf:
          - $ref: '#/components/schemas/TruncationObject'
          - nullable: true
        tool_choice:
          allOf:
          - $ref: '#/components/schemas/AssistantsApiToolChoiceOption'
          - nullable: true
        parallel_tool_calls:
          $ref: '#/components/schemas/ParallelToolCalls'
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
      required:
      - id
      - object
      - created_at
      - thread_id
      - assistant_id
      - status
      - required_action
      - last_error
      - expires_at
      - started_at
      - cancelled_at
      - failed_at
      - completed_at
      - model
      - instructions
      - tools
      - metadata
      - usage
      - incomplete_details
      - max_prompt_tokens
      - max_completion_tokens
      - truncation_strategy
      - tool_choice
      - parallel_tool_calls
      - response_format
    RunStepCompletionUsage:
      type: object
      description: Usage statistics related to the run step. This value will be `null`
        while the run step's status is `in_progress`.
      properties:
        completion_tokens:
          type: integer
          description: Number of completion tokens used over the course of the run
            step.
        prompt_tokens:
          type: integer
          description: Number of prompt tokens used over the course of the run step.
        total_tokens:
          type: integer
          description: Total number of tokens used (prompt + completion).
      required:
      - prompt_tokens
      - completion_tokens
      - total_tokens
      nullable: true
    RunStepDeltaObject:
      type: object
      title: Run step delta object
      description: 'Represents a run step delta i.e. any changed fields on a run step
        during streaming.

        '
      properties:
        id:
          description: The identifier of the run step, which can be referenced in
            API endpoints.
          type: string
        object:
          description: The object type, which is always `thread.run.step.delta`.
          type: string
          enum:
          - thread.run.step.delta
          x-stainless-const: true
        delta:
          description: The delta containing the fields that have changed on the run
            step.
          type: object
          properties:
            step_details:
              type: object
              description: The details of the run step.
              oneOf:
              - $ref: '#/components/schemas/RunStepDeltaStepDetailsMessageCreationObject'
              - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsObject'
      required:
      - id
      - object
      - delta
    RunStepDeltaStepDetailsMessageCreationObject:
      title: Message creation
      type: object
      description: Details of the message creation by the run step.
      properties:
        type:
          description: Always `message_creation`.
          type: string
          enum:
          - message_creation
          x-stainless-const: true
        message_creation:
          type: object
          properties:
            message_id:
              type: string
              description: The ID of the message that was created by this run step.
      required:
      - type
    RunStepDeltaStepDetailsToolCallsCodeObject:
      title: Code interpreter tool call
      type: object
      description: Details of the Code Interpreter tool call the run step was involved
        in.
      properties:
        index:
          type: integer
          description: The index of the tool call in the tool calls array.
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          description: The type of tool call. This is always going to be `code_interpreter`
            for this type of tool call.
          enum:
          - code_interpreter
          x-stainless-const: true
        code_interpreter:
          type: object
          description: The Code Interpreter tool call definition.
          properties:
            input:
              type: string
              description: The input to the Code Interpreter tool call.
            outputs:
              type: array
              description: The outputs from the Code Interpreter tool call. Code Interpreter
                can output one or more items, including text (`logs`) or images (`image`).
                Each of these are represented by a different object type.
              items:
                type: object
                oneOf:
                - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject'
                - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputImageObject'
      required:
      - index
      - type
    RunStepDeltaStepDetailsToolCallsCodeOutputImageObject:
      title: Code interpreter image output
      type: object
      properties:
        index:
          type: integer
          description: The index of the output in the outputs array.
        type:
          description: Always `image`.
          type: string
          enum:
          - image
          x-stainless-const: true
        image:
          type: object
          properties:
            file_id:
              description: The [file](/docs/api-reference/files) ID of the image.
              type: string
      required:
      - index
      - type
    RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject:
      title: Code interpreter log output
      type: object
      description: Text output from the Code Interpreter tool call as part of a run
        step.
      properties:
        index:
          type: integer
          description: The index of the output in the outputs array.
        type:
          description: Always `logs`.
          type: string
          enum:
          - logs
          x-stainless-const: true
        logs:
          type: string
          description: The text output from the Code Interpreter tool call.
      required:
      - index
      - type
    RunStepDeltaStepDetailsToolCallsFileSearchObject:
      title: File search tool call
      type: object
      properties:
        index:
          type: integer
          description: The index of the tool call in the tool calls array.
        id:
          type: string
          description: The ID of the tool call object.
        type:
          type: string
          description: The type of tool call. This is always going to be `file_search`
            for this type of tool call.
          enum:
          - file_search
          x-stainless-const: true
        file_search:
          type: object
          description: For now, this is always going to be an empty object.
          x-oaiTypeLabel: map
      required:
      - index
      - type
      - file_search
    RunStepDeltaStepDetailsToolCallsFunctionObject:
      type: object
      title: Function tool call
      properties:
        index:
          type: integer
          description: The index of the tool call in the tool calls array.
        id:
          type: string
          description: The ID of the tool call object.
        type:
          type: string
          description: The type of tool call. This is always going to be `function`
            for this type of tool call.
          enum:
          - function
          x-stainless-const: true
        function:
          type: object
          description: The definition of the function that was called.
          properties:
            name:
              type: string
              description: The name of the function.
            arguments:
              type: string
              description: The arguments passed to the function.
            output:
              type: string
              description: The output of the function. This will be `null` if the
                outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs)
                yet.
              nullable: true
      required:
      - index
      - type
    RunStepDeltaStepDetailsToolCallsObject:
      title: Tool calls
      type: object
      description: Details of the tool call.
      properties:
        type:
          description: Always `tool_calls`.
          type: string
          enum:
          - tool_calls
          x-stainless-const: true
        tool_calls:
          type: array
          description: 'An array of tool calls the run step was involved in. These
            can be associated with one of three types of tools: `code_interpreter`,
            `file_search`, or `function`.

            '
          items:
            oneOf:
            - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject'
            - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsFileSearchObject'
            - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject'
      required:
      - type
    RunStepDetailsMessageCreationObject:
      title: Message creation
      type: object
      description: Details of the message creation by the run step.
      properties:
        type:
          description: Always `message_creation`.
          type: string
          enum:
          - message_creation
          x-stainless-const: true
        message_creation:
          type: object
          properties:
            message_id:
              type: string
              description: The ID of the message that was created by this run step.
          required:
          - message_id
      required:
      - type
      - message_creation
    RunStepDetailsToolCallsCodeObject:
      title: Code Interpreter tool call
      type: object
      description: Details of the Code Interpreter tool call the run step was involved
        in.
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          description: The type of tool call. This is always going to be `code_interpreter`
            for this type of tool call.
          enum:
          - code_interpreter
          x-stainless-const: true
        code_interpreter:
          type: object
          description: The Code Interpreter tool call definition.
          required:
          - input
          - outputs
          properties:
            input:
              type: string
              description: The input to the Code Interpreter tool call.
            outputs:
              type: array
              description: The outputs from the Code Interpreter tool call. Code Interpreter
                can output one or more items, including text (`logs`) or images (`image`).
                Each of these are represented by a different object type.
              items:
                type: object
                oneOf:
                - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject'
                - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject'
      required:
      - id
      - type
      - code_interpreter
    RunStepDetailsToolCallsCodeOutputImageObject:
      title: Code Interpreter image output
      type: object
      properties:
        type:
          description: Always `image`.
          type: string
          enum:
          - image
          x-stainless-const: true
        image:
          type: object
          properties:
            file_id:
              description: The [file](/docs/api-reference/files) ID of the image.
              type: string
          required:
          - file_id
      required:
      - type
      - image
    RunStepDetailsToolCallsCodeOutputLogsObject:
      title: Code Interpreter log output
      type: object
      description: Text output from the Code Interpreter tool call as part of a run
        step.
      properties:
        type:
          description: Always `logs`.
          type: string
          enum:
          - logs
          x-stainless-const: true
        logs:
          type: string
          description: The text output from the Code Interpreter tool call.
      required:
      - type
      - logs
    RunStepDetailsToolCallsFileSearchObject:
      title: File search tool call
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call object.
        type:
          type: string
          description: The type of tool call. This is always going to be `file_search`
            for this type of tool call.
          enum:
          - file_search
          x-stainless-const: true
        file_search:
          type: object
          description: For now, this is always going to be an empty object.
          x-oaiTypeLabel: map
          properties:
            ranking_options:
              $ref: '#/components/schemas/RunStepDetailsToolCallsFileSearchRankingOptionsObject'
            results:
              type: array
              description: The results of the file search.
              items:
                $ref: '#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject'
      required:
      - id
      - type
      - file_search
    RunStepDetailsToolCallsFileSearchRankingOptionsObject:
      title: File search tool call ranking options
      type: object
      description: The ranking options for the file search.
      properties:
        ranker:
          $ref: '#/components/schemas/FileSearchRanker'
        score_threshold:
          type: number
          description: The score threshold for the file search. All values must be
            a floating point number between 0 and 1.
          minimum: 0
          maximum: 1
      required:
      - ranker
      - score_threshold
    RunStepDetailsToolCallsFileSearchResultObject:
      title: File search tool call result
      type: object
      description: A result instance of the file search.
      x-oaiTypeLabel: map
      properties:
        file_id:
          type: string
          description: The ID of the file that result was found in.
        file_name:
          type: string
          description: The name of the file that result was found in.
        score:
          type: number
          description: The score of the result. All values must be a floating point
            number between 0 and 1.
          minimum: 0
          maximum: 1
        content:
          type: array
          description: The content of the result that was found. The content is only
            included if requested via the include query parameter.
          items:
            type: object
            properties:
              type:
                type: string
                description: The type of the content.
                enum:
                - text
                x-stainless-const: true
              text:
                type: string
                description: The text content of the file.
      required:
      - file_id
      - file_name
      - score
    RunStepDetailsToolCallsFunctionObject:
      type: object
      title: Function tool call
      properties:
        id:
          type: string
          description: The ID of the tool call object.
        type:
          type: string
          description: The type of tool call. This is always going to be `function`
            for this type of tool call.
          enum:
          - function
          x-stainless-const: true
        function:
          type: object
          description: The definition of the function that was called.
          properties:
            name:
              type: string
              description: The name of the function.
            arguments:
              type: string
              description: The arguments passed to the function.
            output:
              type: string
              description: The output of the function. This will be `null` if the
                outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs)
                yet.
              nullable: true
          required:
          - name
          - arguments
          - output
      required:
      - id
      - type
      - function
    RunStepDetailsToolCallsObject:
      title: Tool calls
      type: object
      description: Details of the tool call.
      properties:
        type:
          description: Always `tool_calls`.
          type: string
          enum:
          - tool_calls
          x-stainless-const: true
        tool_calls:
          type: array
          description: 'An array of tool calls the run step was involved in. These
            can be associated with one of three types of tools: `code_interpreter`,
            `file_search`, or `function`.

            '
          items:
            oneOf:
            - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeObject'
            - $ref: '#/components/schemas/RunStepDetailsToolCallsFileSearchObject'
            - $ref: '#/components/schemas/RunStepDetailsToolCallsFunctionObject'
      required:
      - type
      - tool_calls
    RunStepObject:
      type: object
      title: Run steps
      description: 'Represents a step in execution of a run.

        '
      properties:
        id:
          description: The identifier of the run step, which can be referenced in
            API endpoints.
          type: string
        object:
          description: The object type, which is always `thread.run.step`.
          type: string
          enum:
          - thread.run.step
          x-stainless-const: true
        created_at:
          description: The Unix timestamp (in seconds) for when the run step was created.
          type: integer
        assistant_id:
          description: The ID of the [assistant](/docs/api-reference/assistants) associated
            with the run step.
          type: string
        thread_id:
          description: The ID of the [thread](/docs/api-reference/threads) that was
            run.
          type: string
        run_id:
          description: The ID of the [run](/docs/api-reference/runs) that this run
            step is a part of.
          type: string
        type:
          description: The type of run step, which can be either `message_creation`
            or `tool_calls`.
          type: string
          enum:
          - message_creation
          - tool_calls
        status:
          description: The status of the run step, which can be either `in_progress`,
            `cancelled`, `failed`, `completed`, or `expired`.
          type: string
          enum:
          - in_progress
          - cancelled
          - failed
          - completed
          - expired
        step_details:
          type: object
          description: The details of the run step.
          oneOf:
          - $ref: '#/components/schemas/RunStepDetailsMessageCreationObject'
          - $ref: '#/components/schemas/RunStepDetailsToolCallsObject'
        last_error:
          type: object
          description: The last error associated with this run step. Will be `null`
            if there are no errors.
          nullable: true
          properties:
            code:
              type: string
              description: One of `server_error` or `rate_limit_exceeded`.
              enum:
              - server_error
              - rate_limit_exceeded
            message:
              type: string
              description: A human-readable description of the error.
          required:
          - code
          - message
        expired_at:
          description: The Unix timestamp (in seconds) for when the run step expired.
            A step is considered expired if the parent run is expired.
          type: integer
          nullable: true
        cancelled_at:
          description: The Unix timestamp (in seconds) for when the run step was cancelled.
          type: integer
          nullable: true
        failed_at:
          description: The Unix timestamp (in seconds) for when the run step failed.
          type: integer
          nullable: true
        completed_at:
          description: The Unix timestamp (in seconds) for when the run step completed.
          type: integer
          nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
        usage:
          $ref: '#/components/schemas/RunStepCompletionUsage'
      required:
      - id
      - object
      - created_at
      - assistant_id
      - thread_id
      - run_id
      - type
      - status
      - step_details
      - last_error
      - expired_at
      - cancelled_at
      - failed_at
      - completed_at
      - metadata
      - usage
    RunStepStreamEvent:
      oneOf:
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.step.created
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunStepObject'
        required:
        - event
        - data
        description: Occurs when a [run step](/docs/api-reference/run-steps/step-object)
          is created.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.step.in_progress
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunStepObject'
        required:
        - event
        - data
        description: Occurs when a [run step](/docs/api-reference/run-steps/step-object)
          moves to an `in_progress` state.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.step.delta
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunStepDeltaObject'
        required:
        - event
        - data
        description: Occurs when parts of a [run step](/docs/api-reference/run-steps/step-object)
          are being streamed.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.step.completed
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunStepObject'
        required:
        - event
        - data
        description: Occurs when a [run step](/docs/api-reference/run-steps/step-object)
          is completed.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.step.failed
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunStepObject'
        required:
        - event
        - data
        description: Occurs when a [run step](/docs/api-reference/run-steps/step-object)
          fails.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.step.cancelled
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunStepObject'
        required:
        - event
        - data
        description: Occurs when a [run step](/docs/api-reference/run-steps/step-object)
          is cancelled.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.step.expired
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunStepObject'
        required:
        - event
        - data
        description: Occurs when a [run step](/docs/api-reference/run-steps/step-object)
          expires.
    RunStreamEvent:
      oneOf:
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.created
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunObject'
        required:
        - event
        - data
        description: Occurs when a new [run](/docs/api-reference/runs/object) is created.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.queued
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunObject'
        required:
        - event
        - data
        description: Occurs when a [run](/docs/api-reference/runs/object) moves to
          a `queued` status.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.in_progress
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunObject'
        required:
        - event
        - data
        description: Occurs when a [run](/docs/api-reference/runs/object) moves to
          an `in_progress` status.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.requires_action
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunObject'
        required:
        - event
        - data
        description: Occurs when a [run](/docs/api-reference/runs/object) moves to
          a `requires_action` status.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.completed
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunObject'
        required:
        - event
        - data
        description: Occurs when a [run](/docs/api-reference/runs/object) is completed.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.incomplete
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunObject'
        required:
        - event
        - data
        description: Occurs when a [run](/docs/api-reference/runs/object) ends with
          status `incomplete`.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.failed
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunObject'
        required:
        - event
        - data
        description: Occurs when a [run](/docs/api-reference/runs/object) fails.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.cancelling
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunObject'
        required:
        - event
        - data
        description: Occurs when a [run](/docs/api-reference/runs/object) moves to
          a `cancelling` status.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.cancelled
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunObject'
        required:
        - event
        - data
        description: Occurs when a [run](/docs/api-reference/runs/object) is cancelled.
      - type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.expired
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/RunObject'
        required:
        - event
        - data
        description: Occurs when a [run](/docs/api-reference/runs/object) expires.
    RunToolCallObject:
      type: object
      description: Tool call objects
      properties:
        id:
          type: string
          description: The ID of the tool call. This ID must be referenced when you
            submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs)
            endpoint.
        type:
          type: string
          description: The type of tool call the output is required for. For now,
            this is always `function`.
          enum:
          - function
          x-stainless-const: true
        function:
          type: object
          description: The function definition.
          properties:
            name:
              type: string
              description: The name of the function.
            arguments:
              type: string
              description: The arguments that the model expects you to pass to the
                function.
          required:
          - name
          - arguments
      required:
      - id
      - type
      - function
    Screenshot:
      type: object
      title: Screenshot
      description: 'A screenshot action.

        '
      properties:
        type:
          type: string
          enum:
          - screenshot
          default: screenshot
          description: "Specifies the event type. For a screenshot action, this property\
            \ is \nalways set to `screenshot`.\n"
          x-stainless-const: true
      required:
      - type
    Scroll:
      type: object
      title: Scroll
      description: 'A scroll action.

        '
      properties:
        type:
          type: string
          enum:
          - scroll
          default: scroll
          description: "Specifies the event type. For a scroll action, this property\
            \ is \nalways set to `scroll`.\n"
          x-stainless-const: true
        x:
          type: integer
          description: 'The x-coordinate where the scroll occurred.

            '
        y:
          type: integer
          description: 'The y-coordinate where the scroll occurred.

            '
        scroll_x:
          type: integer
          description: 'The horizontal scroll distance.

            '
        scroll_y:
          type: integer
          description: 'The vertical scroll distance.

            '
      required:
      - type
      - x
      - y
      - scroll_x
      - scroll_y
    ServiceTier:
      type: string
      description: "Specifies the processing type used for serving the request.\n\
        \  - If set to 'auto', then the request will be processed with the service\
        \ tier configured in the Project settings. Unless otherwise configured, the\
        \ Project will use 'default'.\n  - If set to 'default', then the request will\
        \ be processed with the standard pricing and performance for the selected\
        \ model.\n  - If set to '[flex](/docs/guides/flex-processing)' or 'priority',\
        \ then the request will be processed with the corresponding service tier.\
        \ [Contact sales](https://openai.com/contact-sales) to learn more about Priority\
        \ processing.\n  - When not set, the default behavior is 'auto'.\n\n  When\
        \ the `service_tier` parameter is set, the response body will include the\
        \ `service_tier` value based on the processing mode actually used to serve\
        \ the request. This response value may be different from the value set in\
        \ the parameter.\n"
      enum:
      - auto
      - default
      - flex
      - scale
      - priority
      nullable: true
      default: auto
    SpeechAudioDeltaEvent:
      type: object
      description: Emitted for each chunk of audio data generated during speech synthesis.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `speech.audio.delta`.

            '
          enum:
          - speech.audio.delta
          x-stainless-const: true
        audio:
          type: string
          description: 'A chunk of Base64-encoded audio data.

            '
      required:
      - type
      - audio
    SpeechAudioDoneEvent:
      type: object
      description: Emitted when the speech synthesis is complete and all audio has
        been streamed.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `speech.audio.done`.

            '
          enum:
          - speech.audio.done
          x-stainless-const: true
        usage:
          type: object
          description: 'Token usage statistics for the request.

            '
          properties:
            input_tokens:
              type: integer
              description: Number of input tokens in the prompt.
            output_tokens:
              type: integer
              description: Number of output tokens generated.
            total_tokens:
              type: integer
              description: Total number of tokens used (input + output).
          required:
          - input_tokens
          - output_tokens
          - total_tokens
      required:
      - type
      - usage
    StaticChunkingStrategy:
      type: object
      additionalProperties: false
      properties:
        max_chunk_size_tokens:
          type: integer
          minimum: 100
          maximum: 4096
          description: The maximum number of tokens in each chunk. The default value
            is `800`. The minimum value is `100` and the maximum value is `4096`.
        chunk_overlap_tokens:
          type: integer
          description: 'The number of tokens that overlap between chunks. The default
            value is `400`.


            Note that the overlap must not exceed half of `max_chunk_size_tokens`.

            '
      required:
      - max_chunk_size_tokens
      - chunk_overlap_tokens
    StaticChunkingStrategyRequestParam:
      type: object
      title: Static Chunking Strategy
      description: Customize your own chunking strategy by setting chunk size and
        chunk overlap.
      additionalProperties: false
      properties:
        type:
          type: string
          description: Always `static`.
          enum:
          - static
          x-stainless-const: true
        static:
          $ref: '#/components/schemas/StaticChunkingStrategy'
      required:
      - type
      - static
    StaticChunkingStrategyResponseParam:
      type: object
      title: Static Chunking Strategy
      additionalProperties: false
      properties:
        type:
          type: string
          description: Always `static`.
          enum:
          - static
          x-stainless-const: true
        static:
          $ref: '#/components/schemas/StaticChunkingStrategy'
      required:
      - type
      - static
    StopConfiguration:
      description: 'Not supported with latest reasoning models `o3` and `o4-mini`.


        Up to 4 sequences where the API will stop generating further tokens. The

        returned text will not contain the stop sequence.

        '
      default: null
      nullable: true
      oneOf:
      - type: string
        default: <|endoftext|>
        example: '

          '
        nullable: true
      - type: array
        minItems: 1
        maxItems: 4
        items:
          type: string
          example: '["\n"]'
    SubmitToolOutputsRunRequest:
      type: object
      additionalProperties: false
      properties:
        tool_outputs:
          description: A list of tools for which the outputs are being submitted.
          type: array
          items:
            type: object
            properties:
              tool_call_id:
                type: string
                description: The ID of the tool call in the `required_action` object
                  within the run object the output is being submitted for.
              output:
                type: string
                description: The output of the tool call to be submitted to continue
                  the run.
        stream:
          type: boolean
          nullable: true
          description: 'If `true`, returns a stream of events that happen during the
            Run as server-sent events, terminating when the Run enters a terminal
            state with a `data: [DONE]` message.

            '
      required:
      - tool_outputs
    TextResponseFormatConfiguration:
      description: "An object specifying the format that the model must output.\n\n\
        Configuring `{ \"type\": \"json_schema\" }` enables Structured Outputs, \n\
        which ensures the model will match your supplied JSON schema. Learn more in\
        \ the \n[Structured Outputs guide](/docs/guides/structured-outputs).\n\nThe\
        \ default format is `{ \"type\": \"text\" }` with no additional options.\n\
        \n**Not recommended for gpt-4o and newer models:**\n\nSetting to `{ \"type\"\
        : \"json_object\" }` enables the older JSON mode, which\nensures the message\
        \ the model generates is valid JSON. Using `json_schema`\nis preferred for\
        \ models that support it.\n"
      oneOf:
      - $ref: '#/components/schemas/ResponseFormatText'
      - $ref: '#/components/schemas/TextResponseFormatJsonSchema'
      - $ref: '#/components/schemas/ResponseFormatJsonObject'
    TextResponseFormatJsonSchema:
      type: object
      title: JSON schema
      description: 'JSON Schema response format. Used to generate structured JSON
        responses.

        Learn more about [Structured Outputs](/docs/guides/structured-outputs).

        '
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `json_schema`.
          enum:
          - json_schema
          x-stainless-const: true
        description:
          type: string
          description: 'A description of what the response format is for, used by
            the model to

            determine how to respond in the format.

            '
        name:
          type: string
          description: 'The name of the response format. Must be a-z, A-Z, 0-9, or
            contain

            underscores and dashes, with a maximum length of 64.

            '
        schema:
          $ref: '#/components/schemas/ResponseFormatJsonSchemaSchema'
        strict:
          type: boolean
          nullable: true
          default: false
          description: 'Whether to enable strict schema adherence when generating
            the output.

            If set to true, the model will always follow the exact schema defined

            in the `schema` field. Only a subset of JSON Schema is supported when

            `strict` is `true`. To learn more, read the [Structured Outputs

            guide](/docs/guides/structured-outputs).

            '
      required:
      - type
      - schema
      - name
    ThreadObject:
      type: object
      title: Thread
      description: Represents a thread that contains [messages](/docs/api-reference/messages).
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `thread`.
          type: string
          enum:
          - thread
          x-stainless-const: true
        created_at:
          description: The Unix timestamp (in seconds) for when the thread was created.
          type: integer
        tool_resources:
          type: object
          description: 'A set of resources that are made available to the assistant''s
            tools in this thread. The resources are specific to the type of tool.
            For example, the `code_interpreter` tool requires a list of file IDs,
            while the `file_search` tool requires a list of vector store IDs.

            '
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: 'A list of [file](/docs/api-reference/files) IDs made
                    available to the `code_interpreter` tool. There can be a maximum
                    of 20 files associated with the tool.

                    '
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: 'The [vector store](/docs/api-reference/vector-stores/object)
                    attached to this thread. There can be a maximum of 1 vector store
                    attached to the thread.

                    '
                  maxItems: 1
                  items:
                    type: string
          nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
      - id
      - object
      - created_at
      - tool_resources
      - metadata
    ThreadStreamEvent:
      oneOf:
      - type: object
        properties:
          enabled:
            type: boolean
            description: Whether to enable input audio transcription.
          event:
            type: string
            enum:
            - thread.created
            x-stainless-const: true
          data:
            $ref: '#/components/schemas/ThreadObject'
        required:
        - event
        - data
        description: Occurs when a new [thread](/docs/api-reference/threads/object)
          is created.
    ToggleCertificatesRequest:
      type: object
      properties:
        certificate_ids:
          type: array
          items:
            type: string
            example: cert_abc
          minItems: 1
          maxItems: 10
      required:
      - certificate_ids
    Tool:
      description: 'A tool that can be used to generate a response.

        '
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/FunctionTool'
      - $ref: '#/components/schemas/FileSearchTool'
      - $ref: '#/components/schemas/WebSearchPreviewTool'
      - $ref: '#/components/schemas/ComputerUsePreviewTool'
      - $ref: '#/components/schemas/MCPTool'
      - $ref: '#/components/schemas/CodeInterpreterTool'
      - $ref: '#/components/schemas/ImageGenTool'
      - $ref: '#/components/schemas/LocalShellTool'
    ToolChoiceFunction:
      type: object
      title: Function tool
      description: 'Use this option to force the model to call a specific function.

        '
      properties:
        type:
          type: string
          enum:
          - function
          description: For function calling, the type is always `function`.
          x-stainless-const: true
        name:
          type: string
          description: The name of the function to call.
      required:
      - type
      - name
    ToolChoiceMCP:
      type: object
      title: MCP tool
      description: 'Use this option to force the model to call a specific tool on
        a remote MCP server.

        '
      properties:
        type:
          type: string
          enum:
          - mcp
          description: For MCP tools, the type is always `mcp`.
          x-stainless-const: true
        server_label:
          type: string
          description: 'The label of the MCP server to use.

            '
        name:
          type: string
          description: 'The name of the tool to call on the server.

            '
          nullable: true
      required:
      - type
      - server_label
    ToolChoiceOptions:
      type: string
      title: Tool choice mode
      description: 'Controls which (if any) tool is called by the model.


        `none` means the model will not call any tool and instead generates a message.


        `auto` means the model can pick between generating a message or calling one
        or

        more tools.


        `required` means the model must call one or more tools.

        '
      enum:
      - none
      - auto
      - required
    ToolChoiceTypes:
      type: object
      title: Hosted tool
      description: 'Indicates that the model should use a built-in tool to generate
        a response.

        [Learn more about built-in tools](/docs/guides/tools).

        '
      properties:
        type:
          type: string
          description: 'The type of hosted tool the model should to use. Learn more
            about

            [built-in tools](/docs/guides/tools).


            Allowed values are:

            - `file_search`

            - `web_search_preview`

            - `computer_use_preview`

            - `code_interpreter`

            - `image_generation`

            '
          enum:
          - file_search
          - web_search_preview
          - computer_use_preview
          - web_search_preview_2025_03_11
          - image_generation
          - code_interpreter
      required:
      - type
    TranscriptTextDeltaEvent:
      type: object
      description: Emitted when there is an additional text delta. This is also the
        first event emitted when the transcription starts. Only emitted when you [create
        a transcription](/docs/api-reference/audio/create-transcription) with the
        `Stream` parameter set to `true`.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `transcript.text.delta`.

            '
          enum:
          - transcript.text.delta
          x-stainless-const: true
        delta:
          type: string
          description: 'The text delta that was additionally transcribed.

            '
        logprobs:
          type: array
          description: 'The log probabilities of the delta. Only included if you [create
            a transcription](/docs/api-reference/audio/create-transcription) with
            the `include[]` parameter set to `logprobs`.

            '
          items:
            type: object
            properties:
              token:
                type: string
                description: 'The token that was used to generate the log probability.

                  '
              logprob:
                type: number
                description: 'The log probability of the token.

                  '
              bytes:
                type: array
                items:
                  type: integer
                description: 'The bytes that were used to generate the log probability.

                  '
      required:
      - type
      - delta
    TranscriptTextDoneEvent:
      type: object
      description: Emitted when the transcription is complete. Contains the complete
        transcription text. Only emitted when you [create a transcription](/docs/api-reference/audio/create-transcription)
        with the `Stream` parameter set to `true`.
      properties:
        type:
          type: string
          description: 'The type of the event. Always `transcript.text.done`.

            '
          enum:
          - transcript.text.done
          x-stainless-const: true
        text:
          type: string
          description: 'The text that was transcribed.

            '
        logprobs:
          type: array
          description: 'The log probabilities of the individual tokens in the transcription.
            Only included if you [create a transcription](/docs/api-reference/audio/create-transcription)
            with the `include[]` parameter set to `logprobs`.

            '
          items:
            type: object
            properties:
              token:
                type: string
                description: 'The token that was used to generate the log probability.

                  '
              logprob:
                type: number
                description: 'The log probability of the token.

                  '
              bytes:
                type: array
                items:
                  type: integer
                description: 'The bytes that were used to generate the log probability.

                  '
        usage:
          $ref: '#/components/schemas/TranscriptTextUsageTokens'
      required:
      - type
      - text
    TranscriptTextUsageDuration:
      type: object
      title: Duration Usage
      description: Usage statistics for models billed by audio input duration.
      properties:
        type:
          type: string
          enum:
          - duration
          description: The type of the usage object. Always `duration` for this variant.
          x-stainless-const: true
        seconds:
          type: number
          description: Duration of the input audio in seconds.
      required:
      - type
      - seconds
    TranscriptTextUsageTokens:
      type: object
      title: Token Usage
      description: Usage statistics for models billed by token usage.
      properties:
        type:
          type: string
          enum:
          - tokens
          description: The type of the usage object. Always `tokens` for this variant.
          x-stainless-const: true
        input_tokens:
          type: integer
          description: Number of input tokens billed for this request.
        input_token_details:
          type: object
          description: Details about the input tokens billed for this request.
          properties:
            text_tokens:
              type: integer
              description: Number of text tokens billed for this request.
            audio_tokens:
              type: integer
              description: Number of audio tokens billed for this request.
        output_tokens:
          type: integer
          description: Number of output tokens generated.
        total_tokens:
          type: integer
          description: Total number of tokens used (input + output).
      required:
      - type
      - input_tokens
      - output_tokens
      - total_tokens
    TranscriptionChunkingStrategy:
      type: object
      description: 'Controls how the audio is cut into chunks. When set to `"auto"`,
        the

        server first normalizes loudness and then uses voice activity detection (VAD)
        to

        choose boundaries. `server_vad` object can be provided to tweak VAD detection

        parameters manually. If unset, the audio is transcribed as a single block.'
      oneOf:
      - type: string
        enum:
        - auto
        default:
        - auto
        description: 'Automatically set chunking parameters based on the audio. Must
          be set to `"auto"`.

          '
        x-stainless-const: true
      - $ref: '#/components/schemas/VadConfig'
    TranscriptionInclude:
      type: string
      enum:
      - logprobs
      default: []
    TranscriptionSegment:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the segment.
        seek:
          type: integer
          description: Seek offset of the segment.
        start:
          type: number
          format: float
          description: Start time of the segment in seconds.
        end:
          type: number
          format: float
          description: End time of the segment in seconds.
        text:
          type: string
          description: Text content of the segment.
        tokens:
          type: array
          items:
            type: integer
          description: Array of token IDs for the text content.
        temperature:
          type: number
          format: float
          description: Temperature parameter used for generating the segment.
        avg_logprob:
          type: number
          format: float
          description: Average logprob of the segment. If the value is lower than
            -1, consider the logprobs failed.
        compression_ratio:
          type: number
          format: float
          description: Compression ratio of the segment. If the value is greater than
            2.4, consider the compression failed.
        no_speech_prob:
          type: number
          format: float
          description: Probability of no speech in the segment. If the value is higher
            than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
      required:
      - id
      - seek
      - start
      - end
      - text
      - tokens
      - temperature
      - avg_logprob
      - compression_ratio
      - no_speech_prob
    TranscriptionWord:
      type: object
      properties:
        word:
          type: string
          description: The text content of the word.
        start:
          type: number
          format: float
          description: Start time of the word in seconds.
        end:
          type: number
          format: float
          description: End time of the word in seconds.
      required:
      - word
      - start
      - end
    TruncationObject:
      type: object
      title: Thread Truncation Controls
      description: Controls for how a thread will be truncated prior to the run. Use
        this to control the intial context window of the run.
      properties:
        type:
          type: string
          description: The truncation strategy to use for the thread. The default
            is `auto`. If set to `last_messages`, the thread will be truncated to
            the n most recent messages in the thread. When set to `auto`, messages
            in the middle of the thread will be dropped to fit the context length
            of the model, `max_prompt_tokens`.
          enum:
          - auto
          - last_messages
        last_messages:
          type: integer
          description: The number of most recent messages from the thread when constructing
            the context for the run.
          minimum: 1
          nullable: true
      required:
      - type
    Type:
      type: object
      title: Type
      description: 'An action to type in text.

        '
      properties:
        type:
          type: string
          enum:
          - type
          default: type
          description: "Specifies the event type. For a type action, this property\
            \ is \nalways set to `type`.\n"
          x-stainless-const: true
        text:
          type: string
          description: 'The text to type.

            '
      required:
      - type
      - text
    UpdateVectorStoreFileAttributesRequest:
      type: object
      additionalProperties: false
      properties:
        attributes:
          $ref: '#/components/schemas/VectorStoreFileAttributes'
      required:
      - attributes
    UpdateVectorStoreRequest:
      type: object
      additionalProperties: false
      properties:
        name:
          description: The name of the vector store.
          type: string
          nullable: true
        expires_after:
          allOf:
          - $ref: '#/components/schemas/VectorStoreExpirationAfter'
          - nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
    Upload:
      type: object
      title: Upload
      description: 'The Upload object can accept byte chunks in the form of Parts.

        '
      properties:
        id:
          type: string
          description: The Upload unique identifier, which can be referenced in API
            endpoints.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the Upload was created.
        filename:
          type: string
          description: The name of the file to be uploaded.
        bytes:
          type: integer
          description: The intended number of bytes to be uploaded.
        purpose:
          type: string
          description: The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose)
            for acceptable values.
        status:
          type: string
          description: The status of the Upload.
          enum:
          - pending
          - completed
          - cancelled
          - expired
        expires_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the Upload will expire.
        object:
          type: string
          description: The object type, which is always "upload".
          enum:
          - upload
          x-stainless-const: true
        file:
          allOf:
          - $ref: '#/components/schemas/OpenAIFile'
          - nullable: true
            description: The ready File object after the Upload is completed.
      required:
      - bytes
      - created_at
      - expires_at
      - filename
      - id
      - purpose
      - status
    UploadCertificateRequest:
      type: object
      properties:
        name:
          type: string
          description: An optional name for the certificate
        content:
          type: string
          description: The certificate content in PEM format
      required:
      - content
    UploadPart:
      type: object
      title: UploadPart
      description: 'The upload Part represents a chunk of bytes we can add to an Upload
        object.

        '
      properties:
        id:
          type: string
          description: The upload Part unique identifier, which can be referenced
            in API endpoints.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the Part was created.
        upload_id:
          type: string
          description: The ID of the Upload object that this Part was added to.
        object:
          type: string
          description: The object type, which is always `upload.part`.
          enum:
          - upload.part
          x-stainless-const: true
      required:
      - created_at
      - id
      - object
      - upload_id
    UsageAudioSpeechesResult:
      type: object
      description: The aggregated audio speeches usage details of the specific time
        bucket.
      properties:
        object:
          type: string
          enum:
          - organization.usage.audio_speeches.result
          x-stainless-const: true
        characters:
          type: integer
          description: The number of characters processed.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped usage result.
        user_id:
          type: string
          nullable: true
          description: When `group_by=user_id`, this field provides the user ID of
            the grouped usage result.
        api_key_id:
          type: string
          nullable: true
          description: When `group_by=api_key_id`, this field provides the API key
            ID of the grouped usage result.
        model:
          type: string
          nullable: true
          description: When `group_by=model`, this field provides the model name of
            the grouped usage result.
      required:
      - object
      - characters
      - num_model_requests
    UsageAudioTranscriptionsResult:
      type: object
      description: The aggregated audio transcriptions usage details of the specific
        time bucket.
      properties:
        object:
          type: string
          enum:
          - organization.usage.audio_transcriptions.result
          x-stainless-const: true
        seconds:
          type: integer
          description: The number of seconds processed.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped usage result.
        user_id:
          type: string
          nullable: true
          description: When `group_by=user_id`, this field provides the user ID of
            the grouped usage result.
        api_key_id:
          type: string
          nullable: true
          description: When `group_by=api_key_id`, this field provides the API key
            ID of the grouped usage result.
        model:
          type: string
          nullable: true
          description: When `group_by=model`, this field provides the model name of
            the grouped usage result.
      required:
      - object
      - seconds
      - num_model_requests
    UsageCodeInterpreterSessionsResult:
      type: object
      description: The aggregated code interpreter sessions usage details of the specific
        time bucket.
      properties:
        object:
          type: string
          enum:
          - organization.usage.code_interpreter_sessions.result
          x-stainless-const: true
        num_sessions:
          type: integer
          description: The number of code interpreter sessions.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped usage result.
      required:
      - object
      - sessions
    UsageCompletionsResult:
      type: object
      description: The aggregated completions usage details of the specific time bucket.
      properties:
        object:
          type: string
          enum:
          - organization.usage.completions.result
          x-stainless-const: true
        input_tokens:
          type: integer
          description: The aggregated number of text input tokens used, including
            cached tokens. For customers subscribe to scale tier, this includes scale
            tier tokens.
        input_cached_tokens:
          type: integer
          description: The aggregated number of text input tokens that has been cached
            from previous requests. For customers subscribe to scale tier, this includes
            scale tier tokens.
        output_tokens:
          type: integer
          description: The aggregated number of text output tokens used. For customers
            subscribe to scale tier, this includes scale tier tokens.
        input_audio_tokens:
          type: integer
          description: The aggregated number of audio input tokens used, including
            cached tokens.
        output_audio_tokens:
          type: integer
          description: The aggregated number of audio output tokens used.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped usage result.
        user_id:
          type: string
          nullable: true
          description: When `group_by=user_id`, this field provides the user ID of
            the grouped usage result.
        api_key_id:
          type: string
          nullable: true
          description: When `group_by=api_key_id`, this field provides the API key
            ID of the grouped usage result.
        model:
          type: string
          nullable: true
          description: When `group_by=model`, this field provides the model name of
            the grouped usage result.
        batch:
          type: boolean
          nullable: true
          description: When `group_by=batch`, this field tells whether the grouped
            usage result is batch or not.
      required:
      - object
      - input_tokens
      - output_tokens
      - num_model_requests
    UsageEmbeddingsResult:
      type: object
      description: The aggregated embeddings usage details of the specific time bucket.
      properties:
        object:
          type: string
          enum:
          - organization.usage.embeddings.result
          x-stainless-const: true
        input_tokens:
          type: integer
          description: The aggregated number of input tokens used.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped usage result.
        user_id:
          type: string
          nullable: true
          description: When `group_by=user_id`, this field provides the user ID of
            the grouped usage result.
        api_key_id:
          type: string
          nullable: true
          description: When `group_by=api_key_id`, this field provides the API key
            ID of the grouped usage result.
        model:
          type: string
          nullable: true
          description: When `group_by=model`, this field provides the model name of
            the grouped usage result.
      required:
      - object
      - input_tokens
      - num_model_requests
    UsageImagesResult:
      type: object
      description: The aggregated images usage details of the specific time bucket.
      properties:
        object:
          type: string
          enum:
          - organization.usage.images.result
          x-stainless-const: true
        images:
          type: integer
          description: The number of images processed.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        source:
          type: string
          nullable: true
          description: When `group_by=source`, this field provides the source of the
            grouped usage result, possible values are `image.generation`, `image.edit`,
            `image.variation`.
        size:
          type: string
          nullable: true
          description: When `group_by=size`, this field provides the image size of
            the grouped usage result.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped usage result.
        user_id:
          type: string
          nullable: true
          description: When `group_by=user_id`, this field provides the user ID of
            the grouped usage result.
        api_key_id:
          type: string
          nullable: true
          description: When `group_by=api_key_id`, this field provides the API key
            ID of the grouped usage result.
        model:
          type: string
          nullable: true
          description: When `group_by=model`, this field provides the model name of
            the grouped usage result.
      required:
      - object
      - images
      - num_model_requests
    UsageModerationsResult:
      type: object
      description: The aggregated moderations usage details of the specific time bucket.
      properties:
        object:
          type: string
          enum:
          - organization.usage.moderations.result
          x-stainless-const: true
        input_tokens:
          type: integer
          description: The aggregated number of input tokens used.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped usage result.
        user_id:
          type: string
          nullable: true
          description: When `group_by=user_id`, this field provides the user ID of
            the grouped usage result.
        api_key_id:
          type: string
          nullable: true
          description: When `group_by=api_key_id`, this field provides the API key
            ID of the grouped usage result.
        model:
          type: string
          nullable: true
          description: When `group_by=model`, this field provides the model name of
            the grouped usage result.
      required:
      - object
      - input_tokens
      - num_model_requests
    UsageResponse:
      type: object
      properties:
        object:
          type: string
          enum:
          - page
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/UsageTimeBucket'
        has_more:
          type: boolean
        next_page:
          type: string
      required:
      - object
      - data
      - has_more
      - next_page
    UsageTimeBucket:
      type: object
      properties:
        object:
          type: string
          enum:
          - bucket
          x-stainless-const: true
        start_time:
          type: integer
        end_time:
          type: integer
        result:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/UsageCompletionsResult'
            - $ref: '#/components/schemas/UsageEmbeddingsResult'
            - $ref: '#/components/schemas/UsageModerationsResult'
            - $ref: '#/components/schemas/UsageImagesResult'
            - $ref: '#/components/schemas/UsageAudioSpeechesResult'
            - $ref: '#/components/schemas/UsageAudioTranscriptionsResult'
            - $ref: '#/components/schemas/UsageVectorStoresResult'
            - $ref: '#/components/schemas/UsageCodeInterpreterSessionsResult'
            - $ref: '#/components/schemas/CostsResult'
      required:
      - object
      - start_time
      - end_time
      - result
    UsageVectorStoresResult:
      type: object
      description: The aggregated vector stores usage details of the specific time
        bucket.
      properties:
        object:
          type: string
          enum:
          - organization.usage.vector_stores.result
          x-stainless-const: true
        usage_bytes:
          type: integer
          description: The vector stores usage in bytes.
        project_id:
          type: string
          nullable: true
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped usage result.
      required:
      - object
      - usage_bytes
    User:
      type: object
      description: Represents an individual `user` within an organization.
      properties:
        object:
          type: string
          enum:
          - organization.user
          description: The object type, which is always `organization.user`
          x-stainless-const: true
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email address of the user
        role:
          type: string
          enum:
          - owner
          - reader
          description: '`owner` or `reader`'
        added_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the user was added.
      required:
      - object
      - id
      - name
      - email
      - role
      - added_at
    UserDeleteResponse:
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.user.deleted
          x-stainless-const: true
        id:
          type: string
        deleted:
          type: boolean
      required:
      - object
      - id
      - deleted
    UserListResponse:
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    UserRoleUpdateRequest:
      type: object
      properties:
        role:
          type: string
          enum:
          - owner
          - reader
          description: '`owner` or `reader`'
      required:
      - role
    VadConfig:
      type: object
      additionalProperties: false
      required:
      - type
      properties:
        type:
          type: string
          enum:
          - server_vad
          description: Must be set to `server_vad` to enable manual chunking using
            server side VAD.
        prefix_padding_ms:
          type: integer
          default: 300
          description: "Amount of audio to include before the VAD detected speech\
            \ (in \nmilliseconds).\n"
        silence_duration_ms:
          type: integer
          default: 200
          description: "Duration of silence to detect speech stop (in milliseconds).\n\
            With shorter values the model will respond more quickly, \nbut may jump\
            \ in on short pauses from the user.\n"
        threshold:
          type: number
          default: 0.5
          description: "Sensitivity threshold (0.0 to 1.0) for voice activity detection.\
            \ A \nhigher threshold will require louder audio to activate the model,\
            \ and \nthus might perform better in noisy environments.\n"
    ValidateGraderRequest:
      type: object
      title: ValidateGraderRequest
      properties:
        grader:
          type: object
          description: The grader used for the fine-tuning job.
          oneOf:
          - $ref: '#/components/schemas/GraderStringCheck'
          - $ref: '#/components/schemas/GraderTextSimilarity'
          - $ref: '#/components/schemas/GraderPython'
          - $ref: '#/components/schemas/GraderScoreModel'
          - $ref: '#/components/schemas/GraderMulti'
      required:
      - grader
    ValidateGraderResponse:
      type: object
      title: ValidateGraderResponse
      properties:
        grader:
          type: object
          description: The grader used for the fine-tuning job.
          oneOf:
          - $ref: '#/components/schemas/GraderStringCheck'
          - $ref: '#/components/schemas/GraderTextSimilarity'
          - $ref: '#/components/schemas/GraderPython'
          - $ref: '#/components/schemas/GraderScoreModel'
          - $ref: '#/components/schemas/GraderMulti'
    VectorStoreExpirationAfter:
      type: object
      title: Vector store expiration policy
      description: The expiration policy for a vector store.
      properties:
        anchor:
          description: 'Anchor timestamp after which the expiration policy applies.
            Supported anchors: `last_active_at`.'
          type: string
          enum:
          - last_active_at
          x-stainless-const: true
        days:
          description: The number of days after the anchor time that the vector store
            will expire.
          type: integer
          minimum: 1
          maximum: 365
      required:
      - anchor
      - days
    VectorStoreFileAttributes:
      type: object
      description: "Set of 16 key-value pairs that can be attached to an object. This\
        \ can be \nuseful for storing additional information about the object in a\
        \ structured \nformat, and querying for objects via API or the dashboard.\
        \ Keys are strings \nwith a maximum length of 64 characters. Values are strings\
        \ with a maximum \nlength of 512 characters, booleans, or numbers.\n"
      maxProperties: 16
      propertyNames:
        type: string
        maxLength: 64
      additionalProperties:
        oneOf:
        - type: string
          maxLength: 512
        - type: number
        - type: boolean
      x-oaiTypeLabel: map
      nullable: true
    VectorStoreFileBatchObject:
      type: object
      title: Vector store file batch
      description: A batch of files attached to a vector store.
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `vector_store.file_batch`.
          type: string
          enum:
          - vector_store.files_batch
          x-stainless-const: true
        created_at:
          description: The Unix timestamp (in seconds) for when the vector store files
            batch was created.
          type: integer
        vector_store_id:
          description: The ID of the [vector store](/docs/api-reference/vector-stores/object)
            that the [File](/docs/api-reference/files) is attached to.
          type: string
        status:
          description: The status of the vector store files batch, which can be either
            `in_progress`, `completed`, `cancelled` or `failed`.
          type: string
          enum:
          - in_progress
          - completed
          - cancelled
          - failed
        file_counts:
          type: object
          properties:
            in_progress:
              description: The number of files that are currently being processed.
              type: integer
            completed:
              description: The number of files that have been processed.
              type: integer
            failed:
              description: The number of files that have failed to process.
              type: integer
            cancelled:
              description: The number of files that where cancelled.
              type: integer
            total:
              description: The total number of files.
              type: integer
          required:
          - in_progress
          - completed
          - cancelled
          - failed
          - total
      required:
      - id
      - object
      - created_at
      - vector_store_id
      - status
      - file_counts
    VectorStoreFileContentResponse:
      type: object
      description: Represents the parsed content of a vector store file.
      properties:
        object:
          type: string
          enum:
          - vector_store.file_content.page
          description: The object type, which is always `vector_store.file_content.page`
          x-stainless-const: true
        data:
          type: array
          description: Parsed content of the file.
          items:
            type: object
            properties:
              type:
                type: string
                description: The content type (currently only `"text"`)
              text:
                type: string
                description: The text content
        has_more:
          type: boolean
          description: Indicates if there are more content pages to fetch.
        next_page:
          type: string
          description: The token for the next page, if any.
          nullable: true
      required:
      - object
      - data
      - has_more
      - next_page
    VectorStoreFileObject:
      type: object
      title: Vector store files
      description: A list of files attached to a vector store.
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `vector_store.file`.
          type: string
          enum:
          - vector_store.file
          x-stainless-const: true
        usage_bytes:
          description: The total vector store usage in bytes. Note that this may be
            different from the original file size.
          type: integer
        created_at:
          description: The Unix timestamp (in seconds) for when the vector store file
            was created.
          type: integer
        vector_store_id:
          description: The ID of the [vector store](/docs/api-reference/vector-stores/object)
            that the [File](/docs/api-reference/files) is attached to.
          type: string
        status:
          description: The status of the vector store file, which can be either `in_progress`,
            `completed`, `cancelled`, or `failed`. The status `completed` indicates
            that the vector store file is ready for use.
          type: string
          enum:
          - in_progress
          - completed
          - cancelled
          - failed
        last_error:
          type: object
          description: The last error associated with this vector store file. Will
            be `null` if there are no errors.
          nullable: true
          properties:
            code:
              type: string
              description: One of `server_error` or `rate_limit_exceeded`.
              enum:
              - server_error
              - unsupported_file
              - invalid_file
            message:
              type: string
              description: A human-readable description of the error.
          required:
          - code
          - message
        chunking_strategy:
          type: object
          description: The strategy used to chunk the file.
          oneOf:
          - $ref: '#/components/schemas/StaticChunkingStrategyResponseParam'
          - $ref: '#/components/schemas/OtherChunkingStrategyResponseParam'
        attributes:
          $ref: '#/components/schemas/VectorStoreFileAttributes'
      required:
      - id
      - object
      - usage_bytes
      - created_at
      - vector_store_id
      - status
      - last_error
    VectorStoreObject:
      type: object
      title: Vector store
      description: A vector store is a collection of processed files can be used by
        the `file_search` tool.
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `vector_store`.
          type: string
          enum:
          - vector_store
          x-stainless-const: true
        created_at:
          description: The Unix timestamp (in seconds) for when the vector store was
            created.
          type: integer
        name:
          description: The name of the vector store.
          type: string
        usage_bytes:
          description: The total number of bytes used by the files in the vector store.
          type: integer
        file_counts:
          type: object
          properties:
            in_progress:
              description: The number of files that are currently being processed.
              type: integer
            completed:
              description: The number of files that have been successfully processed.
              type: integer
            failed:
              description: The number of files that have failed to process.
              type: integer
            cancelled:
              description: The number of files that were cancelled.
              type: integer
            total:
              description: The total number of files.
              type: integer
          required:
          - in_progress
          - completed
          - failed
          - cancelled
          - total
        status:
          description: The status of the vector store, which can be either `expired`,
            `in_progress`, or `completed`. A status of `completed` indicates that
            the vector store is ready for use.
          type: string
          enum:
          - expired
          - in_progress
          - completed
        expires_after:
          $ref: '#/components/schemas/VectorStoreExpirationAfter'
        expires_at:
          description: The Unix timestamp (in seconds) for when the vector store will
            expire.
          type: integer
          nullable: true
        last_active_at:
          description: The Unix timestamp (in seconds) for when the vector store was
            last active.
          type: integer
          nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
      - id
      - object
      - usage_bytes
      - created_at
      - status
      - last_active_at
      - name
      - file_counts
      - metadata
    VectorStoreSearchRequest:
      type: object
      additionalProperties: false
      properties:
        query:
          description: A query string for a search
          oneOf:
          - type: string
          - type: array
            items:
              type: string
              description: A list of queries to search for.
              minItems: 1
        rewrite_query:
          description: Whether to rewrite the natural language query for vector search.
          type: boolean
          default: false
        max_num_results:
          description: The maximum number of results to return. This number should
            be between 1 and 50 inclusive.
          type: integer
          default: 10
          minimum: 1
          maximum: 50
        filters:
          description: A filter to apply based on file attributes.
          oneOf:
          - $ref: '#/components/schemas/ComparisonFilter'
          - $ref: '#/components/schemas/CompoundFilter'
        ranking_options:
          description: Ranking options for search.
          type: object
          additionalProperties: false
          properties:
            ranker:
              type: string
              enum:
              - auto
              - default-2024-11-15
              default: auto
            score_threshold:
              type: number
              minimum: 0
              maximum: 1
              default: 0
      required:
      - query
    VectorStoreSearchResultContentObject:
      type: object
      additionalProperties: false
      properties:
        type:
          description: The type of content.
          type: string
          enum:
          - text
        text:
          description: The text content returned from search.
          type: string
      required:
      - type
      - text
    VectorStoreSearchResultItem:
      type: object
      additionalProperties: false
      properties:
        file_id:
          type: string
          description: The ID of the vector store file.
        filename:
          type: string
          description: The name of the vector store file.
        score:
          type: number
          description: The similarity score for the result.
          minimum: 0
          maximum: 1
        attributes:
          $ref: '#/components/schemas/VectorStoreFileAttributes'
        content:
          type: array
          description: Content chunks from the file.
          items:
            $ref: '#/components/schemas/VectorStoreSearchResultContentObject'
      required:
      - file_id
      - filename
      - score
      - attributes
      - content
    VectorStoreSearchResultsPage:
      type: object
      additionalProperties: false
      properties:
        object:
          type: string
          enum:
          - vector_store.search_results.page
          description: The object type, which is always `vector_store.search_results.page`
          x-stainless-const: true
        search_query:
          type: array
          items:
            type: string
            description: The query used for this search.
            minItems: 1
        data:
          type: array
          description: The list of search result items.
          items:
            $ref: '#/components/schemas/VectorStoreSearchResultItem'
        has_more:
          type: boolean
          description: Indicates if there are more results to fetch.
        next_page:
          type: string
          description: The token for the next page, if any.
          nullable: true
      required:
      - object
      - search_query
      - data
      - has_more
      - next_page
    VoiceIdsShared:
      example: ash
      anyOf:
      - type: string
      - type: string
        enum:
        - alloy
        - ash
        - ballad
        - coral
        - echo
        - sage
        - shimmer
        - verse
    Wait:
      type: object
      title: Wait
      description: 'A wait action.

        '
      properties:
        type:
          type: string
          enum:
          - wait
          default: wait
          description: "Specifies the event type. For a wait action, this property\
            \ is \nalways set to `wait`.\n"
          x-stainless-const: true
      required:
      - type
    WebSearchActionFind:
      type: object
      title: Find action
      description: 'Action type "find": Searches for a pattern within a loaded page.

        '
      properties:
        type:
          type: string
          enum:
          - find
          description: 'The action type.

            '
          x-stainless-const: true
        url:
          type: string
          format: uri
          description: 'The URL of the page searched for the pattern.

            '
        pattern:
          type: string
          description: 'The pattern or text to search for within the page.

            '
      required:
      - type
      - url
      - pattern
    WebSearchActionOpenPage:
      type: object
      title: Open page action
      description: 'Action type "open_page" - Opens a specific URL from search results.

        '
      properties:
        type:
          type: string
          enum:
          - open_page
          description: 'The action type.

            '
          x-stainless-const: true
        url:
          type: string
          format: uri
          description: 'The URL opened by the model.

            '
      required:
      - type
      - url
    WebSearchActionSearch:
      type: object
      title: Search action
      description: 'Action type "search" - Performs a web search query.

        '
      properties:
        type:
          type: string
          enum:
          - search
          description: 'The action type.

            '
          x-stainless-const: true
        query:
          type: string
          description: 'The search query.

            '
      required:
      - type
      - query
    WebSearchContextSize:
      type: string
      description: "High level guidance for the amount of context window space to\
        \ use for the \nsearch. One of `low`, `medium`, or `high`. `medium` is the\
        \ default.\n"
      enum:
      - low
      - medium
      - high
      default: medium
    WebSearchLocation:
      type: object
      title: Web search location
      description: Approximate location parameters for the search.
      properties:
        country:
          type: string
          description: "The two-letter \n[ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1)\
            \ of the user,\ne.g. `US`.\n"
        region:
          type: string
          description: 'Free text input for the region of the user, e.g. `California`.

            '
        city:
          type: string
          description: 'Free text input for the city of the user, e.g. `San Francisco`.

            '
        timezone:
          type: string
          description: "The [IANA timezone](https://timeapi.io/documentation/iana-timezones)\
            \ \nof the user, e.g. `America/Los_Angeles`.\n"
    WebSearchToolCall:
      type: object
      title: Web search tool call
      description: "The results of a web search tool call. See the \n[web search guide](/docs/guides/tools-web-search)\
        \ for more information.\n"
      properties:
        id:
          type: string
          description: 'The unique ID of the web search tool call.

            '
        type:
          type: string
          enum:
          - web_search_call
          description: 'The type of the web search tool call. Always `web_search_call`.

            '
          x-stainless-const: true
        status:
          type: string
          description: 'The status of the web search tool call.

            '
          enum:
          - in_progress
          - searching
          - completed
          - failed
        action:
          type: object
          description: 'An object describing the specific action taken in this web
            search call.

            Includes details on how the model used the web (search, open_page, find).

            '
          oneOf:
          - $ref: '#/components/schemas/WebSearchActionSearch'
          - $ref: '#/components/schemas/WebSearchActionOpenPage'
          - $ref: '#/components/schemas/WebSearchActionFind'
      required:
      - id
      - type
      - status
      - action
    WebhookBatchCancelled:
      type: object
      title: batch.cancelled
      description: 'Sent when a batch API request has been cancelled.

        '
      required:
      - created_at
      - id
      - data
      - type
      properties:
        created_at:
          type: integer
          description: 'The Unix timestamp (in seconds) of when the batch API request
            was cancelled.

            '
        id:
          type: string
          description: 'The unique ID of the event.

            '
        data:
          type: object
          description: 'Event data payload.

            '
          required:
          - id
          properties:
            id:
              type: string
              description: 'The unique ID of the batch API request.

                '
        object:
          type: string
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          x-stainless-const: true
        type:
          type: string
          description: 'The type of the event. Always `batch.cancelled`.

            '
          enum:
          - batch.cancelled
          x-stainless-const: true
    WebhookBatchCompleted:
      type: object
      title: batch.completed
      description: 'Sent when a batch API request has been completed.

        '
      required:
      - created_at
      - id
      - data
      - type
      properties:
        created_at:
          type: integer
          description: 'The Unix timestamp (in seconds) of when the batch API request
            was completed.

            '
        id:
          type: string
          description: 'The unique ID of the event.

            '
        data:
          type: object
          description: 'Event data payload.

            '
          required:
          - id
          properties:
            id:
              type: string
              description: 'The unique ID of the batch API request.

                '
        object:
          type: string
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          x-stainless-const: true
        type:
          type: string
          description: 'The type of the event. Always `batch.completed`.

            '
          enum:
          - batch.completed
          x-stainless-const: true
    WebhookBatchExpired:
      type: object
      title: batch.expired
      description: 'Sent when a batch API request has expired.

        '
      required:
      - created_at
      - id
      - data
      - type
      properties:
        created_at:
          type: integer
          description: 'The Unix timestamp (in seconds) of when the batch API request
            expired.

            '
        id:
          type: string
          description: 'The unique ID of the event.

            '
        data:
          type: object
          description: 'Event data payload.

            '
          required:
          - id
          properties:
            id:
              type: string
              description: 'The unique ID of the batch API request.

                '
        object:
          type: string
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          x-stainless-const: true
        type:
          type: string
          description: 'The type of the event. Always `batch.expired`.

            '
          enum:
          - batch.expired
          x-stainless-const: true
    WebhookBatchFailed:
      type: object
      title: batch.failed
      description: 'Sent when a batch API request has failed.

        '
      required:
      - created_at
      - id
      - data
      - type
      properties:
        created_at:
          type: integer
          description: 'The Unix timestamp (in seconds) of when the batch API request
            failed.

            '
        id:
          type: string
          description: 'The unique ID of the event.

            '
        data:
          type: object
          description: 'Event data payload.

            '
          required:
          - id
          properties:
            id:
              type: string
              description: 'The unique ID of the batch API request.

                '
        object:
          type: string
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          x-stainless-const: true
        type:
          type: string
          description: 'The type of the event. Always `batch.failed`.

            '
          enum:
          - batch.failed
          x-stainless-const: true
    WebhookEvalRunCanceled:
      type: object
      title: eval.run.canceled
      description: 'Sent when an eval run has been canceled.

        '
      required:
      - created_at
      - id
      - data
      - type
      properties:
        created_at:
          type: integer
          description: 'The Unix timestamp (in seconds) of when the eval run was canceled.

            '
        id:
          type: string
          description: 'The unique ID of the event.

            '
        data:
          type: object
          description: 'Event data payload.

            '
          required:
          - id
          properties:
            id:
              type: string
              description: 'The unique ID of the eval run.

                '
        object:
          type: string
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          x-stainless-const: true
        type:
          type: string
          description: 'The type of the event. Always `eval.run.canceled`.

            '
          enum:
          - eval.run.canceled
          x-stainless-const: true
    WebhookEvalRunFailed:
      type: object
      title: eval.run.failed
      description: 'Sent when an eval run has failed.

        '
      required:
      - created_at
      - id
      - data
      - type
      properties:
        created_at:
          type: integer
          description: 'The Unix timestamp (in seconds) of when the eval run failed.

            '
        id:
          type: string
          description: 'The unique ID of the event.

            '
        data:
          type: object
          description: 'Event data payload.

            '
          required:
          - id
          properties:
            id:
              type: string
              description: 'The unique ID of the eval run.

                '
        object:
          type: string
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          x-stainless-const: true
        type:
          type: string
          description: 'The type of the event. Always `eval.run.failed`.

            '
          enum:
          - eval.run.failed
          x-stainless-const: true
    WebhookEvalRunSucceeded:
      type: object
      title: eval.run.succeeded
      description: 'Sent when an eval run has succeeded.

        '
      required:
      - created_at
      - id
      - data
      - type
      properties:
        created_at:
          type: integer
          description: 'The Unix timestamp (in seconds) of when the eval run succeeded.

            '
        id:
          type: string
          description: 'The unique ID of the event.

            '
        data:
          type: object
          description: 'Event data payload.

            '
          required:
          - id
          properties:
            id:
              type: string
              description: 'The unique ID of the eval run.

                '
        object:
          type: string
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          x-stainless-const: true
        type:
          type: string
          description: 'The type of the event. Always `eval.run.succeeded`.

            '
          enum:
          - eval.run.succeeded
          x-stainless-const: true
    WebhookFineTuningJobCancelled:
      type: object
      title: fine_tuning.job.cancelled
      description: 'Sent when a fine-tuning job has been cancelled.

        '
      required:
      - created_at
      - id
      - data
      - type
      properties:
        created_at:
          type: integer
          description: 'The Unix timestamp (in seconds) of when the fine-tuning job
            was cancelled.

            '
        id:
          type: string
          description: 'The unique ID of the event.

            '
        data:
          type: object
          description: 'Event data payload.

            '
          required:
          - id
          properties:
            id:
              type: string
              description: 'The unique ID of the fine-tuning job.

                '
        object:
          type: string
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          x-stainless-const: true
        type:
          type: string
          description: 'The type of the event. Always `fine_tuning.job.cancelled`.

            '
          enum:
          - fine_tuning.job.cancelled
          x-stainless-const: true
    WebhookFineTuningJobFailed:
      type: object
      title: fine_tuning.job.failed
      description: 'Sent when a fine-tuning job has failed.

        '
      required:
      - created_at
      - id
      - data
      - type
      properties:
        created_at:
          type: integer
          description: 'The Unix timestamp (in seconds) of when the fine-tuning job
            failed.

            '
        id:
          type: string
          description: 'The unique ID of the event.

            '
        data:
          type: object
          description: 'Event data payload.

            '
          required:
          - id
          properties:
            id:
              type: string
              description: 'The unique ID of the fine-tuning job.

                '
        object:
          type: string
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          x-stainless-const: true
        type:
          type: string
          description: 'The type of the event. Always `fine_tuning.job.failed`.

            '
          enum:
          - fine_tuning.job.failed
          x-stainless-const: true
    WebhookFineTuningJobSucceeded:
      type: object
      title: fine_tuning.job.succeeded
      description: 'Sent when a fine-tuning job has succeeded.

        '
      required:
      - created_at
      - id
      - data
      - type
      properties:
        created_at:
          type: integer
          description: 'The Unix timestamp (in seconds) of when the fine-tuning job
            succeeded.

            '
        id:
          type: string
          description: 'The unique ID of the event.

            '
        data:
          type: object
          description: 'Event data payload.

            '
          required:
          - id
          properties:
            id:
              type: string
              description: 'The unique ID of the fine-tuning job.

                '
        object:
          type: string
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          x-stainless-const: true
        type:
          type: string
          description: 'The type of the event. Always `fine_tuning.job.succeeded`.

            '
          enum:
          - fine_tuning.job.succeeded
          x-stainless-const: true
    WebhookResponseCancelled:
      type: object
      title: response.cancelled
      description: 'Sent when a background response has been cancelled.

        '
      required:
      - created_at
      - id
      - data
      - type
      properties:
        created_at:
          type: integer
          description: 'The Unix timestamp (in seconds) of when the model response
            was cancelled.

            '
        id:
          type: string
          description: 'The unique ID of the event.

            '
        data:
          type: object
          description: 'Event data payload.

            '
          required:
          - id
          properties:
            id:
              type: string
              description: 'The unique ID of the model response.

                '
        object:
          type: string
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          x-stainless-const: true
        type:
          type: string
          description: 'The type of the event. Always `response.cancelled`.

            '
          enum:
          - response.cancelled
          x-stainless-const: true
    WebhookResponseCompleted:
      type: object
      title: response.completed
      description: 'Sent when a background response has been completed.

        '
      required:
      - created_at
      - id
      - data
      - type
      properties:
        created_at:
          type: integer
          description: 'The Unix timestamp (in seconds) of when the model response
            was completed.

            '
        id:
          type: string
          description: 'The unique ID of the event.

            '
        data:
          type: object
          description: 'Event data payload.

            '
          required:
          - id
          properties:
            id:
              type: string
              description: 'The unique ID of the model response.

                '
        object:
          type: string
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          x-stainless-const: true
        type:
          type: string
          description: 'The type of the event. Always `response.completed`.

            '
          enum:
          - response.completed
          x-stainless-const: true
    WebhookResponseFailed:
      type: object
      title: response.failed
      description: 'Sent when a background response has failed.

        '
      required:
      - created_at
      - id
      - data
      - type
      properties:
        created_at:
          type: integer
          description: 'The Unix timestamp (in seconds) of when the model response
            failed.

            '
        id:
          type: string
          description: 'The unique ID of the event.

            '
        data:
          type: object
          description: 'Event data payload.

            '
          required:
          - id
          properties:
            id:
              type: string
              description: 'The unique ID of the model response.

                '
        object:
          type: string
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          x-stainless-const: true
        type:
          type: string
          description: 'The type of the event. Always `response.failed`.

            '
          enum:
          - response.failed
          x-stainless-const: true
    WebhookResponseIncomplete:
      type: object
      title: response.incomplete
      description: 'Sent when a background response has been interrupted.

        '
      required:
      - created_at
      - id
      - data
      - type
      properties:
        created_at:
          type: integer
          description: 'The Unix timestamp (in seconds) of when the model response
            was interrupted.

            '
        id:
          type: string
          description: 'The unique ID of the event.

            '
        data:
          type: object
          description: 'Event data payload.

            '
          required:
          - id
          properties:
            id:
              type: string
              description: 'The unique ID of the model response.

                '
        object:
          type: string
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          x-stainless-const: true
        type:
          type: string
          description: 'The type of the event. Always `response.incomplete`.

            '
          enum:
          - response.incomplete
          x-stainless-const: true
    InputTextContent:
      properties:
        type:
          type: string
          enum:
          - input_text
          description: The type of the input item. Always `input_text`.
          default: input_text
          x-stainless-const: true
        text:
          type: string
          description: The text input to the model.
      type: object
      required:
      - type
      - text
      title: Input text
      description: A text input to the model.
    InputImageContent:
      properties:
        type:
          type: string
          enum:
          - input_image
          description: The type of the input item. Always `input_image`.
          default: input_image
          x-stainless-const: true
        image_url:
          anyOf:
          - type: string
            description: The URL of the image to be sent to the model. A fully qualified
              URL or base64 encoded image in a data URL.
          - type: 'null'
        file_id:
          anyOf:
          - type: string
            description: The ID of the file to be sent to the model.
          - type: 'null'
        detail:
          type: string
          enum:
          - low
          - high
          - auto
          description: The detail level of the image to be sent to the model. One
            of `high`, `low`, or `auto`. Defaults to `auto`.
      type: object
      required:
      - type
      - detail
      title: Input image
      description: An image input to the model. Learn about [image inputs](/docs/guides/vision).
    InputFileContent:
      properties:
        type:
          type: string
          enum:
          - input_file
          description: The type of the input item. Always `input_file`.
          default: input_file
          x-stainless-const: true
        file_id:
          anyOf:
          - type: string
            description: The ID of the file to be sent to the model.
          - type: 'null'
        filename:
          type: string
          description: The name of the file to be sent to the model.
        file_url:
          type: string
          description: The URL of the file to be sent to the model.
        file_data:
          type: string
          description: 'The content of the file to be sent to the model.

            '
      type: object
      required:
      - type
      title: Input file
      description: A file input to the model.
    FunctionTool:
      properties:
        type:
          type: string
          enum:
          - function
          description: The type of the function tool. Always `function`.
          default: function
          x-stainless-const: true
        name:
          type: string
          description: The name of the function to call.
        description:
          anyOf:
          - type: string
            description: A description of the function. Used by the model to determine
              whether or not to call the function.
          - type: 'null'
        parameters:
          anyOf:
          - additionalProperties: {}
            type: object
            description: A JSON schema object describing the parameters of the function.
          - type: 'null'
        strict:
          anyOf:
          - type: boolean
            description: Whether to enforce strict parameter validation. Default `true`.
          - type: 'null'
      type: object
      required:
      - type
      - name
      - strict
      - parameters
      title: Function
      description: Defines a function in your own code the model can choose to call.
        Learn more about [function calling](https://platform.openai.com/docs/guides/function-calling).
    RankingOptions:
      properties:
        ranker:
          type: string
          enum:
          - auto
          - default-2024-11-15
          description: The ranker to use for the file search.
        score_threshold:
          type: number
          description: The score threshold for the file search, a number between 0
            and 1. Numbers closer to 1 will attempt to return only the most relevant
            results, but may return fewer results.
      type: object
      required: []
    Filters:
      anyOf:
      - $ref: '#/components/schemas/ComparisonFilter'
      - $ref: '#/components/schemas/CompoundFilter'
    FileSearchTool:
      properties:
        type:
          type: string
          enum:
          - file_search
          description: The type of the file search tool. Always `file_search`.
          default: file_search
          x-stainless-const: true
        vector_store_ids:
          items:
            type: string
          type: array
          description: The IDs of the vector stores to search.
        max_num_results:
          type: integer
          description: The maximum number of results to return. This number should
            be between 1 and 50 inclusive.
        ranking_options:
          $ref: '#/components/schemas/RankingOptions'
          description: Ranking options for search.
        filters:
          anyOf:
          - $ref: '#/components/schemas/Filters'
            description: A filter to apply.
          - type: 'null'
      type: object
      required:
      - type
      - vector_store_ids
      title: File search
      description: A tool that searches for relevant content from uploaded files.
        Learn more about the [file search tool](https://platform.openai.com/docs/guides/tools-file-search).
    ApproximateLocation:
      properties:
        type:
          type: string
          enum:
          - approximate
          description: The type of location approximation. Always `approximate`.
          default: approximate
          x-stainless-const: true
        country:
          anyOf:
          - type: string
            description: The two-letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1)
              of the user, e.g. `US`.
          - type: 'null'
        region:
          anyOf:
          - type: string
            description: Free text input for the region of the user, e.g. `California`.
          - type: 'null'
        city:
          anyOf:
          - type: string
            description: Free text input for the city of the user, e.g. `San Francisco`.
          - type: 'null'
        timezone:
          anyOf:
          - type: string
            description: The [IANA timezone](https://timeapi.io/documentation/iana-timezones)
              of the user, e.g. `America/Los_Angeles`.
          - type: 'null'
      type: object
      required:
      - type
    WebSearchPreviewTool:
      properties:
        type:
          type: string
          enum:
          - web_search_preview
          - web_search_preview_2025_03_11
          description: The type of the web search tool. One of `web_search_preview`
            or `web_search_preview_2025_03_11`.
          default: web_search_preview
          x-stainless-const: true
        user_location:
          anyOf:
          - $ref: '#/components/schemas/ApproximateLocation'
            description: The user's location.
          - type: 'null'
        search_context_size:
          type: string
          enum:
          - low
          - medium
          - high
          description: High level guidance for the amount of context window space
            to use for the search. One of `low`, `medium`, or `high`. `medium` is
            the default.
      type: object
      required:
      - type
      title: Web search preview
      description: This tool searches the web for relevant results to use in a response.
        Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search).
    ComputerUsePreviewTool:
      properties:
        type:
          type: string
          enum:
          - computer_use_preview
          description: The type of the computer use tool. Always `computer_use_preview`.
          default: computer_use_preview
          x-stainless-const: true
        environment:
          type: string
          enum:
          - windows
          - mac
          - linux
          - ubuntu
          - browser
          description: The type of computer environment to control.
        display_width:
          type: integer
          description: The width of the computer display.
        display_height:
          type: integer
          description: The height of the computer display.
      type: object
      required:
      - type
      - environment
      - display_width
      - display_height
      title: Computer use preview
      description: A tool that controls a virtual computer. Learn more about the [computer
        tool](https://platform.openai.com/docs/guides/tools-computer-use).
    ImageGenInputUsageDetails:
      properties:
        text_tokens:
          type: integer
          description: The number of text tokens in the input prompt.
        image_tokens:
          type: integer
          description: The number of image tokens in the input prompt.
      type: object
      required:
      - text_tokens
      - image_tokens
      title: Input usage details
      description: The input tokens detailed information for the image generation.
    ImageGenUsage:
      properties:
        input_tokens:
          type: integer
          description: The number of tokens (images and text) in the input prompt.
        total_tokens:
          type: integer
          description: The total number of tokens (images and text) used for the image
            generation.
        output_tokens:
          type: integer
          description: The number of output tokens generated by the model.
        input_tokens_details:
          $ref: '#/components/schemas/ImageGenInputUsageDetails'
      type: object
      required:
      - input_tokens
      - total_tokens
      - output_tokens
      - input_tokens_details
      title: Image generation usage
      description: For `gpt-image-1` only, the token usage information for the image
        generation.
    FileCitationBody:
      properties:
        type:
          type: string
          enum:
          - file_citation
          description: The type of the file citation. Always `file_citation`.
          default: file_citation
          x-stainless-const: true
        file_id:
          type: string
          description: The ID of the file.
        index:
          type: integer
          description: The index of the file in the list of files.
        filename:
          type: string
          description: The filename of the file cited.
      type: object
      required:
      - type
      - file_id
      - index
      - filename
      title: File citation
      description: A citation to a file.
    UrlCitationBody:
      properties:
        type:
          type: string
          enum:
          - url_citation
          description: The type of the URL citation. Always `url_citation`.
          default: url_citation
          x-stainless-const: true
        url:
          type: string
          description: The URL of the web resource.
        start_index:
          type: integer
          description: The index of the first character of the URL citation in the
            message.
        end_index:
          type: integer
          description: The index of the last character of the URL citation in the
            message.
        title:
          type: string
          description: The title of the web resource.
      type: object
      required:
      - type
      - url
      - start_index
      - end_index
      - title
      title: URL citation
      description: A citation for a web resource used to generate a model response.
    ContainerFileCitationBody:
      properties:
        type:
          type: string
          enum:
          - container_file_citation
          description: The type of the container file citation. Always `container_file_citation`.
          default: container_file_citation
          x-stainless-const: true
        container_id:
          type: string
          description: The ID of the container file.
        file_id:
          type: string
          description: The ID of the file.
        start_index:
          type: integer
          description: The index of the first character of the container file citation
            in the message.
        end_index:
          type: integer
          description: The index of the last character of the container file citation
            in the message.
        filename:
          type: string
          description: The filename of the container file cited.
      type: object
      required:
      - type
      - container_id
      - file_id
      - start_index
      - end_index
      - filename
      title: Container file citation
      description: A citation for a container file used to generate a model response.
    Annotation:
      oneOf:
      - $ref: '#/components/schemas/FileCitationBody'
      - $ref: '#/components/schemas/UrlCitationBody'
      - $ref: '#/components/schemas/ContainerFileCitationBody'
      - $ref: '#/components/schemas/FilePath'
      discriminator:
        propertyName: type
    TopLogProb:
      properties:
        token:
          type: string
        logprob:
          type: number
        bytes:
          items:
            type: integer
          type: array
      type: object
      required:
      - token
      - logprob
      - bytes
      title: Top log probability
      description: The top log probability of a token.
    LogProb:
      properties:
        token:
          type: string
        logprob:
          type: number
        bytes:
          items:
            type: integer
          type: array
        top_logprobs:
          items:
            $ref: '#/components/schemas/TopLogProb'
          type: array
      type: object
      required:
      - token
      - logprob
      - bytes
      - top_logprobs
      title: Log probability
      description: The log probability of a token.
    OutputTextContent:
      properties:
        type:
          type: string
          enum:
          - output_text
          description: The type of the output text. Always `output_text`.
          default: output_text
          x-stainless-const: true
        text:
          type: string
          description: The text output from the model.
        annotations:
          items:
            $ref: '#/components/schemas/Annotation'
          type: array
          description: The annotations of the text output.
        logprobs:
          items:
            $ref: '#/components/schemas/LogProb'
          type: array
      type: object
      required:
      - type
      - text
      - annotations
      title: Output text
      description: A text output from the model.
    RefusalContent:
      properties:
        type:
          type: string
          enum:
          - refusal
          description: The type of the refusal. Always `refusal`.
          default: refusal
          x-stainless-const: true
        refusal:
          type: string
          description: The refusal explanation from the model.
      type: object
      required:
      - type
      - refusal
      title: Refusal
      description: A refusal from the model.
    ComputerCallSafetyCheckParam:
      properties:
        id:
          type: string
          description: The ID of the pending safety check.
        code:
          anyOf:
          - type: string
            description: The type of the pending safety check.
          - type: 'null'
        message:
          anyOf:
          - type: string
            description: Details about the pending safety check.
          - type: 'null'
      type: object
      required:
      - id
      description: A pending safety check for the computer call.
    ComputerCallOutputItemParam:
      properties:
        id:
          anyOf:
          - type: string
            description: The ID of the computer tool call output.
          - type: 'null'
        call_id:
          type: string
          maxLength: 64
          minLength: 1
          description: The ID of the computer tool call that produced the output.
        type:
          type: string
          enum:
          - computer_call_output
          description: The type of the computer tool call output. Always `computer_call_output`.
          default: computer_call_output
          x-stainless-const: true
        output:
          $ref: '#/components/schemas/ComputerScreenshotImage'
        acknowledged_safety_checks:
          anyOf:
          - items:
              $ref: '#/components/schemas/ComputerCallSafetyCheckParam'
            type: array
            description: The safety checks reported by the API that have been acknowledged
              by the developer.
          - type: 'null'
        status:
          anyOf:
          - type: string
            enum:
            - in_progress
            - completed
            - incomplete
            description: The status of the message input. One of `in_progress`, `completed`,
              or `incomplete`. Populated when input items are returned via API.
          - type: 'null'
      type: object
      required:
      - call_id
      - type
      - output
      title: Computer tool call output
      description: The output of a computer tool call.
    FunctionCallOutputItemParam:
      properties:
        id:
          anyOf:
          - type: string
            description: The unique ID of the function tool call output. Populated
              when this item is returned via API.
          - type: 'null'
        call_id:
          type: string
          maxLength: 64
          minLength: 1
          description: The unique ID of the function tool call generated by the model.
        type:
          type: string
          enum:
          - function_call_output
          description: The type of the function tool call output. Always `function_call_output`.
          default: function_call_output
          x-stainless-const: true
        output:
          type: string
          maxLength: 10485760
          description: A JSON string of the output of the function tool call.
        status:
          anyOf:
          - type: string
            enum:
            - in_progress
            - completed
            - incomplete
            description: The status of the item. One of `in_progress`, `completed`,
              or `incomplete`. Populated when items are returned via API.
          - type: 'null'
      type: object
      required:
      - call_id
      - type
      - output
      title: Function tool call output
      description: The output of a function tool call.
    ItemReferenceParam:
      properties:
        type:
          anyOf:
          - type: string
            enum:
            - item_reference
            description: The type of item to reference. Always `item_reference`.
            default: item_reference
            x-stainless-const: true
          - type: 'null'
        id:
          type: string
          description: The ID of the item to reference.
      type: object
      required:
      - id
      title: Item reference
      description: An internal identifier for an item to reference.
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
