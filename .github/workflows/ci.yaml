name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published, edited]
  workflow_dispatch:

jobs:
  frontend-test:
    runs-on: depot-ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: dashboard/package-lock.json

      - name: Install dependencies
        working-directory: ./dashboard
        run: npm ci

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Run frontend CI pipeline
        id: ci-step
        run: |
          START_TIME=$(date +%s)
          just ci ts
          END_TIME=$(date +%s)
          CI_DURATION=$((END_TIME - START_TIME))
          echo "ci_duration=$CI_DURATION" >> $GITHUB_OUTPUT
          echo "Frontend CI pipeline completed in ${CI_DURATION}s"

          # Report metrics to Somnial
          curl -X POST "https://charts.somnial.co/doubleword-waycast/frontend-ci-duration?value=${CI_DURATION}" || true

      - name: Extract frontend coverage metrics
        id: coverage-step
        working-directory: ./dashboard
        run: |
          # Extract coverage from already generated coverage files (from 'just ci ts')
          echo "Checking for coverage files..."
          ls -la coverage/ || echo "Coverage directory not found"

          if [ -f coverage/lcov.info ]; then
            echo "Found lcov.info, extracting coverage..."
            
            # Parse coverage/lcov.info using awk (clean and always available)
            COVERAGE=$(awk '
              /^LF:/ { lf += $2 }
              /^LH:/ { lh += $2 }
              END { 
                if (lf > 0) 
                  printf "%.2f", (lh * 100) / lf
                else 
                  print "0"
              }
            ' FS=: coverage/lcov.info)
            
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "Frontend code coverage: ${COVERAGE}%"
            
            # Report coverage to Somnial
            curl -X POST "https://charts.somnial.co/doubleword-waycast/frontend-code-coverage?value=${COVERAGE}" || true
          else
            echo "No coverage report found at coverage/lcov.info - coverage may not have been generated"
            echo "coverage=0" >> $GITHUB_OUTPUT
          fi

      - name: Calculate bundle metrics
        id: build-step
        run: |
          cd dashboard
          # Calculate bundle metrics from the build output
          TOTAL_SIZE=$(find dist -name "*.js" -o -name "*.css" | xargs wc -c | tail -1 | awk '{print $1}')
          GZIPPED_SIZE=$(find dist -name "*.js" -o -name "*.css" | xargs gzip -c | wc -c)

          echo "total_size=$TOTAL_SIZE" >> $GITHUB_OUTPUT
          echo "gzipped_size=$GZIPPED_SIZE" >> $GITHUB_OUTPUT

          echo "Bundle: ${TOTAL_SIZE} bytes (${GZIPPED_SIZE} gzipped)"

          # Report bundle metrics to Somnial
          curl -X POST "https://charts.somnial.co/doubleword-waycast/total-bundle-size?value=${TOTAL_SIZE}" || true
          curl -X POST "https://charts.somnial.co/doubleword-waycast/gzipped-bundle-size?value=${GZIPPED_SIZE}" || true

  backend-test:
    runs-on: depot-ubuntu-24.04-16

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 1s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      # used only for caching binary installs
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: waycast

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Install sqlx-cli and cargo-llvm-cov
        run: |
          cargo install sqlx-cli --no-default-features --features native-tls,postgres --locked
          cargo install cargo-llvm-cov --locked

      - name: Run database migrations
        working-directory: ./waycast
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test
        run: |
          sqlx migrate run

      - name: Run backend CI pipeline
        id: ci-step
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test
          TEST_DATABASE_URL: postgres://postgres:postgres@localhost:5432/test
        run: |
          START_TIME=$(date +%s)
          just ci rust -- -D warnings
          END_TIME=$(date +%s)
          CI_DURATION=$((END_TIME - START_TIME))
          echo "ci_duration=$CI_DURATION" >> $GITHUB_OUTPUT
          echo "Rust CI pipeline completed in ${CI_DURATION}s"

          # Report metrics to Somnial
          curl -X POST "https://charts.somnial.co/doubleword-waycast/backend-ci-duration?value=${CI_DURATION}" || true

      - name: Extract backend coverage metrics
        id: coverage-step
        working-directory: ./waycast
        run: |
          # Extract coverage from already generated lcov.info file (from 'just ci rust')
          echo "Checking for coverage files..."
          ls -la lcov.info || echo "lcov.info not found"

          if [ -f lcov.info ]; then
            echo "Found lcov.info, parsing coverage data..."
            
            # Parse lcov.info using awk (clean and always available)
            COVERAGE=$(awk '
              /^LF:/ { lf += $2 }
              /^LH:/ { lh += $2 }
              END { 
                if (lf > 0) 
                  printf "%.2f", (lh * 100) / lf
                else 
                  print "0"
              }
            ' FS=: lcov.info)
            
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "Backend code coverage: ${COVERAGE}%"
            
            # Report coverage to Somnial
            curl -X POST "https://charts.somnial.co/doubleword-waycast/backend-code-coverage?value=${COVERAGE}" || true
          else
            echo "No coverage report found at lcov.info - coverage may not have been generated"
            echo "coverage=0" >> $GITHUB_OUTPUT
          fi

  build:
    if: github.event_name != 'release' || !github.event.release.prerelease
    runs-on: depot-ubuntu-24.04

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_PR_HEAD_SHA: true
        with:
          images: ghcr.io/doublewordai/waycast
          sep-tags: "\n"
          tags: |
            type=sha,event=branch,prefix=sha-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}

      - name: Build and push all images
        id: build-step
        run: |
          START_TIME=$(date +%s)
          echo "start_time=$START_TIME" >> $GITHUB_OUTPUT
          echo "Starting Docker build at $(date)"

      - name: Format tags for bake
        id: format-tags
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          # Convert newline-separated tags into multiple --set lines
          TAG_SETS=$(echo "$TAGS" | sed 's/^/waycast.tags=/')
          echo "tag_sets<<EOF" >> $GITHUB_OUTPUT
          echo "$TAG_SETS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Run depot bake
        uses: depot/bake-action@v1
        with:
          files: ./docker-compose.yml
          targets: waycast
          push: true
          project: ${{ secrets.DEPOT_PROJECT_ID }}
          set: |
            ${{ steps.format-tags.outputs.tag_sets }}
            *.attest=type=sbom
            *.attest=type=provenance
            waycast.platform=linux/amd64,linux/arm64

      - name: Record build time
        id: build-time-step
        run: |
          END_TIME=$(date +%s)
          BUILD_DURATION=$((END_TIME - ${{ steps.build-step.outputs.start_time }}))
          echo "build_duration=$BUILD_DURATION" >> $GITHUB_OUTPUT
          echo "Docker build completed in ${BUILD_DURATION}s"

          # Report build time to Somnial
          curl -X POST "https://charts.somnial.co/doubleword-waycast/docker-build-duration?value=${BUILD_DURATION}" || true

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

  security-scan:
    runs-on: depot-ubuntu-24.04
    needs: build

    permissions:
      contents: read
      packages: read
      security-events: write # For uploading SARIF results

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Grype
        run: |
          curl -sSfL https://get.anchore.io/grype | sudo sh -s -- -b /usr/local/bin
          grype version

      - name: Security scan with Grype
        id: security-scan
        run: |
          # Define image tags using the built images
          TAG_LIST="${{ needs.build.outputs.image-tag }}"
          # Extract just the SHA tag for our scan
          TAG=$(echo "$TAG_LIST" | head -n1 | cut -d':' -f2)

          WAYCAST_TAG="ghcr.io/doublewordai/waycast:$TAG"

          echo "Scanning images for security vulnerabilities..."
          echo "Tag: $TAG"

          # Parse results and calculate metrics
          calculate_vulns() {
            local file=$1
            local severity=$2
            jq -r --arg sev "$severity" '[.matches[] | select(.vulnerability.severity == $sev)] | length' "$file"
          }

          # Scan waycast image
          echo "Scanning waycast image: $WAYCAST_TAG"
          grype "$WAYCAST_TAG" --output json --file waycast-vulnerabilities.json
          WAYCAST_CRITICAL=$(calculate_vulns waycast-vulnerabilities.json "Critical")
          WAYCAST_HIGH=$(calculate_vulns waycast-vulnerabilities.json "High")

          # Console output
          echo "Security scan completed:"
          echo "  Critical vulnerabilities: $WAYCAST_CRITICAL"
          echo "  High vulnerabilities: $WAYCAST_HIGH"

          # Set outputs for metrics reporting
          echo "total_critical=$WAYCAST_CRITICAL" >> $GITHUB_OUTPUT
          echo "total_high=$WAYCAST_HIGH" >> $GITHUB_OUTPUT

      - name: Report vulnerability counts to Somnial
        if: always()
        run: |
          # Report high and critical vulnerability counts to Somnial
          CRITICAL="${{ steps.security-scan.outputs.total_critical || '0' }}"
          HIGH="${{ steps.security-scan.outputs.total_high || '0' }}"

          echo "Reporting vulnerability counts to Somnial..."
          echo "  Critical vulnerabilities: ${CRITICAL}"
          echo "  High vulnerabilities: ${HIGH}"

          curl -X POST "https://charts.somnial.co/doubleword-waycast/critical-vulnerabilities?value=${CRITICAL}" || echo "Failed to report critical vulnerabilities"
          curl -X POST "https://charts.somnial.co/doubleword-waycast/high-vulnerabilities?value=${HIGH}" || echo "Failed to report high vulnerabilities"

  e2e-test-docker:
    runs-on: depot-ubuntu-24.04
    needs: build

    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: dashboard/package-lock.json

      - name: Install dashboard dependencies
        working-directory: ./dashboard
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./dashboard
        run: npx playwright install chromium --only-shell

      - name: Install hurl
        uses: gacts/install-hurl@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      # Run end to end docker-compose tests
      - name: Run Docker end-to-end tests
        id: e2e-step
        run: |
          # Extract first image from newline-separated list
          IMAGE_LIST="${{ needs.build.outputs.image-tag }}"
          export IMAGE=$(echo "$IMAGE_LIST" | head -n1)
          echo "Using image: $IMAGE"

          START_TIME=$(date +%s)
          just test docker
          END_TIME=$(date +%s)
          E2E_DURATION=$((END_TIME - START_TIME))
          echo "e2e_duration=$E2E_DURATION" >> $GITHUB_OUTPUT
          echo "Docker E2E tests completed in ${E2E_DURATION}s"

          # Report metrics to Somnial
          curl -X POST "https://charts.somnial.co/doubleword-waycast/e2e-docker-duration?value=${E2E_DURATION}" || true

  publish-crates:
    if: github.event_name == 'release' && !github.event.release.prerelease
    runs-on: depot-ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: waycast

      - name: Publish waycast to crates.io
        working-directory: ./waycast
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
