import { Page } from "@playwright/test";
import { execSync } from "node:child_process";
import path from "node:path";
import { fileURLToPath } from "node:url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * Authentication helper for E2E tests
 * Uses the actual JWT generation script from scripts/generate-jwt.sh
 */
export class AuthHelper {
  private adminEmail: string;

  constructor(private page: Page) {
    // Get admin email from environment variable, with fallback for backward compatibility
    this.adminEmail = process.env.ADMIN_EMAIL || "yicheng@doubleword.ai";
  }

  /**
   * Set authentication cookie using JWT token generated by the actual script
   */
  async loginWithJWT(email: string) {
    const jwt = this.generateJWT(email);

    // Set the VouchCookie that vouch-proxy expects
    await this.page.context().addCookies([
      {
        name: "VouchCookie",
        value: jwt,
        domain: "localhost",
        path: "/",
        secure: true,
        httpOnly: true,
      },
    ]);
  }

  /**
   * Login as admin user (matches the admin_jwt from hurl tests)
   */
  async loginAsAdmin() {
    await this.loginWithJWT(this.adminEmail);
  }

  /**
   * Login as regular user (matches the user_jwt from hurl tests)
   */
  async loginAsUser() {
    await this.loginWithJWT("user@example.org");
  }

  /**
   * Logout by clearing cookies
   */
  async logout() {
    await this.page.context().clearCookies();
  }

  /**
   * Generate JWT token using the actual scripts/generate-jwt.sh script
   */
  private generateJWT(email: string): string {
    try {
      // Path to the generate-jwt.sh script relative to the dashboard directory
      const scriptPath = path.resolve(
        __dirname,
        "../../../scripts/generate-jwt.sh",
      );

      // Use the same JWT_SECRET as the hurl tests
      const jwtSecret =
        process.env.JWT_SECRET ||
        "dev-insecure-jwt-secret-change-in-production";

      // Execute the script with the email parameter
      const jwt = execSync(
        `JWT_SECRET="${jwtSecret}" ${scriptPath} "${email}"`,
        {
          encoding: "utf8",
          stdio: ["pipe", "pipe", "pipe"], // Capture stderr separately to avoid validation output
        },
      ).trim();

      return jwt;
    } catch (error) {
      throw new Error(`Failed to generate JWT for ${email}: ${error}`);
    }
  }
}
